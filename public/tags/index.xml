
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Tags on My New Hugo Site</title>
   <link>http://example.org/tags/</link>
   <description>Recent content in Tags on My New Hugo Site</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   
       <atom:link href="http://example.org/tags/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>the right tool for the job</title>
       <link>http://example.org/post/2017/08/26t110623/0400/the-right-tool-for-the-job/</link>
       <pubDate>Sat, 26 Aug 2017 11:06:23 -0400</pubDate>
       
       <guid>http://example.org/post/2017/08/26t110623/0400/the-right-tool-for-the-job/</guid>
       <description>&lt;p&gt;I&#39;ve become somewhat more of an Emacs celebrity than I could have
predicted. After giving &lt;a href=&#34;https://www.youtube.com/watch?v=JWD1Fpdd4Pc&#34;&gt;that talk&lt;/a&gt; and spending a couple years blogging
and tweeting about Emacs, people frequently ask for my opinion or advice
regarding its use, how to learn it, or whether to learn it at all.&lt;/p&gt;
&lt;p&gt;Today I want to share my long-form answer to a few related questions that I get
asked pretty often. Those questions are, roughly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should I start using Evil Mode right away, or learn &amp;ldquo;pure&amp;rdquo; Emacs first?&lt;/li&gt;
&lt;li&gt;Should I learn Vim before using Evil Mode?&lt;/li&gt;
&lt;li&gt;Is Emacs the right editor for me if I am a: computer science student,
professional programmer, astronaut, whatever?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer is: maybe.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;First, chances are very high that your situation is different from mine, and so
the reasoning behind my decision to give Emacs a try and then spend two years
evangelizing about it may not apply to you.&lt;/p&gt;
&lt;p&gt;I gave Emacs a shot because I wanted to see what all the fuss over Org Mode was
about. After spending a couple of days getting Evil Mode working to my
satisfaction, it became abundantly clear to me that Emacs was a far superior
system when compared to Vim (7.4, or so). Neovim is chipping away at that
divide, but I still believe Emacs is superior.&lt;/p&gt;
&lt;p&gt;There are some things that Emacs is extremely good at. There are other things
that it is not very good at. The same can be said of Vim, or Neovim, or Sublime
Text, or Atom, or whatever tool you are using.&lt;/p&gt;
&lt;p&gt;So let me answer all of the original questions in two parts.&lt;/p&gt;
&lt;h2 id=&#34;the-vim-paradigm-is-lifechanging&#34;&gt;The Vim Paradigm is Life-Changing&lt;/h2&gt;
&lt;p&gt;The one universal piece of advice that I give to everyone (whether they ask for
it or not) is that the modal editing system that Vim made famous is the most
efficient and powerful approach yet devised and that you will fail to reach your
full potential if you choose not to learn it.&lt;/p&gt;
&lt;p&gt;Though the editor you choose for any particular purpose is an important choice,
and one that will likely have an impact on your ability to excel at any given
task, the Vim modal editing system will have a greater magnifying effect on your
capacity for &lt;em&gt;editing raw text&lt;/em&gt; than any other skill or technique or tool that
you will learn.&lt;/p&gt;
&lt;p&gt;If you read this whole post and come away with only &lt;em&gt;one thing&lt;/em&gt;, let it be this
very strong urging that you put down your cup of coffee and your tablet and
launch &lt;code&gt;vimtutor&lt;/code&gt;, right now.&lt;/p&gt;
&lt;h2 id=&#34;emacs-isnt-right-for-everything&#34;&gt;Emacs Isn&#39;t Right For Everything&lt;/h2&gt;
&lt;p&gt;So, should you learn to use Emacs, or try Emacs for the first time in order to
do task XYZ? Maybe.&lt;/p&gt;
&lt;p&gt;If you are going to do real, professional, challenging work in PHP or Java, it
is very likely that you&#39;ll be faster and more accurate in PhpStorm or IntelliJ
(respectively). If you are going to be spending weeks or months hacking on .NET
code, you should really use Visual Studio.&lt;/p&gt;
&lt;p&gt;In short, there is no substitute for a real IDE. Vim and Emacs can both make use
of external programs like GNU Global, ctags, or syntax checkers and linters that
make the editor &lt;em&gt;feel&lt;/em&gt; pretty smart. But, at least as far as I know, none of
them are as powerful or feature-rich as a purpose-built IDE.&lt;/p&gt;
&lt;p&gt;Fortunately, there are Vim-style editing extensions for all of them! For Visual
Studio there is VsVim; for PhpStorm, IntelliJ, DataGrip, and the other JetBrains
products there is IdeaVim; for Sublime Text there is Vintage Mode; for Chrome
there is Vimium; for your shell there is &lt;code&gt;set -o vi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, if what you need a text editor for is smaller projects, or projects in
languages other than those above, and if you&#39;re interested in learning a Lisp
and becoming a wizard who wields their editing environment like some
immeasurably powerful, flaming magical poisonous scepter and renders their foes
into dust with the subtlest flick of the wrist, then learn Emacs. And use Evil
Mode.&lt;/p&gt;
&lt;p&gt;Likewise, if you spend most of your days struggling through an organizational
nightmare of running projects, requests, random ideas, meetings, emails, and
time-bound tasks, I haven&#39;t found any solution superior to Org Mode.&lt;/p&gt;
&lt;p&gt;So, in short, choose the right tool for the job.&lt;/p&gt;
&lt;p&gt;But make sure it supports a Vim input system.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>organizing notes with refile</title>
       <link>http://example.org/post/2017/03/19t104012/0400/organizing-notes-with-refile/</link>
       <pubDate>Sun, 19 Mar 2017 10:40:12 -0400</pubDate>
       
       <guid>http://example.org/post/2017/03/19t104012/0400/organizing-notes-with-refile/</guid>
       <description>&lt;p&gt;{% img noborder /images/uploads/organizing-notes-with-refile/refile-screenshot.png %}&lt;/p&gt;
&lt;p&gt;As the first quarter of the year reaches its end, my department is deep into
planning the work we will do in the second quarter. As you all know, I use Org
Mode to sort out all of the details of my work life, including imminent tasks,
meetings I need to schedule, and projects I want to work on.&lt;/p&gt;
&lt;p&gt;For the last three months I&#39;ve kept notes for all of the projects that my team
could possibly put effort toward, as I thought of them. This resulted in a
pretty haphazard list of rough ideas and specific tasks intermingled. I needed
to get this into a clean, prioritized list&amp;hellip; So I learned how to use Refile.&lt;/p&gt;
&lt;p&gt;Let me teach you how to use it, too.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-refile&#34;&gt;What Is Refile?&lt;/h2&gt;
&lt;p&gt;The first thing you should do is RTFM, so check out manual section &lt;a href=&#34;http://orgmode.org/manual/Refile-and-copy.html&#34;&gt;9.5, Refile
and Copy&lt;/a&gt;. It&#39;s not long, I&#39;ll wait right here.&lt;/p&gt;
&lt;p&gt;The executive summary is that the Refile command allows you to move an element
of an Org file (and its children) to another location by doing a narrowing
search for the target location. You can do this arbitrarily, in any Org file,
with &lt;code&gt;C-c C-w&lt;/code&gt;, but you can also use the same command to immediately refile a
new node from the capture buffer (also extremely handy).&lt;/p&gt;
&lt;p&gt;In other words, once you have Refile itself set up to your liking, you never
again have to worry about whether a note or task is in the right place. It
becomes trivial to copy or move it somewhere else.&lt;/p&gt;
&lt;h2 id=&#34;the-configuration&#34;&gt;The Configuration&lt;/h2&gt;
&lt;p&gt;As with all things in Emacs, the Refile command is quite configurable, so your
mileage may vary based on how you personally use Org Mode, but here I will
present your options and what I&#39;ve chosen to do.&lt;/p&gt;
&lt;p&gt;The main thing you can configure about Refile is where the target list comes
from and how it is presented. By default, Refile will assume that you&#39;d like to
move a node to one of the headings within the same Org buffer (a top-level
heading).&lt;/p&gt;
&lt;p&gt;That&#39;s fairly limiting if, like me, you have divided your Org notes and tasks
across several files, perhaps using &lt;code&gt;org-agenda-files&lt;/code&gt; to allow the agenda view
to see them all. For this example, let&#39;s assume that we have a file called
&lt;code&gt;backlog.org&lt;/code&gt;, which contains all possible projects, and another file called
&lt;code&gt;projects.org&lt;/code&gt;, which represents &amp;ldquo;live&amp;rdquo; projects.&lt;/p&gt;
&lt;p&gt;What we want to be able to do is move project nodes from &lt;code&gt;backlog.org&lt;/code&gt; to some
location in &lt;code&gt;projects.org&lt;/code&gt;, either under a parent node for some existing
project, or at the top level, as an entirely new project.&lt;/p&gt;
&lt;p&gt;We need a few configurations to make that possible.&lt;/p&gt;
&lt;h3 id=&#34;refile-targets&#34;&gt;Refile Targets&lt;/h3&gt;
&lt;p&gt;First, we must set the value of &lt;code&gt;org-refile-targets&lt;/code&gt;, which tells Org how to
find the possible targets. Be sure to read the documentation for this variable,
because there are a few ways to define targets, but for this scenario, I want to
be able to move a node to any of my agenda files, and I also want to consider
nodes up to three levels deep.&lt;/p&gt;
&lt;p&gt;That&#39;s exactly what this setting will do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-refile-targets &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((org-agenda-files &lt;span style=&#34;color:#e6db74&#34;&gt;:maxlevel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this set, you can trigger Refile with &lt;code&gt;C-c C-w&lt;/code&gt; in any Org file and get a
completing read of all headings up to three levels deep in all files in
&lt;code&gt;org-agenda-files&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you use Helm, &lt;em&gt;which you really should&lt;/em&gt;, you will see a very pretty
hierarchical display of possible targets. You can type a filename to narrow down
to headings within that file, and so on.&lt;/p&gt;
&lt;h3 id=&#34;refile-to-the-top-level&#34;&gt;Refile to the Top Level&lt;/h3&gt;
&lt;p&gt;You may have noticed that all of the targets listed are existing headings. So
how can you refile a node to the top level within a file? To do that, we&#39;ll need
to reconfigure the way Org generates the targets to be aware of their outline
paths.&lt;/p&gt;
&lt;p&gt;This is sort of a trick; you will have a generally cleaner and prettier
experience with Refile if you don&#39;t need to do this, but this is the only way to
do top-level refiles. We configure &lt;code&gt;org-refile-use-outline-path&lt;/code&gt; to tell Org to
include the destination file as an element in the path to a heading, and to use
the full paths as completion targets rather than just the heading text itself.&lt;/p&gt;
&lt;p&gt;What this results in is a targets listing containing forward-slash-delimited
filenames and headings, as though they were paths on disk. Because the filename
also appears by itself, you can select that to refile to the top level of the
file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-refile-use-outline-path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;file&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But, if you use Helm, &lt;em&gt;which you really should&lt;/em&gt;, you will notice that as soon as
you set this option, your target list contains only one filename. Typing to
complete may allow you to find another filename within your agenda files, but
you will only ever see a filename; no other headings ever appear! Why is that?!&lt;/p&gt;
&lt;p&gt;It took a bit of searching to find this solution. This is because the default
behavior for Refile is to allow you to do a step-by-step completion of this
path, but if you&#39;re using Helm, Helm is overriding the completing read to make
it into a narrowing list (that we have all come to love).&lt;/p&gt;
&lt;p&gt;So what you need to do is tell Org that you don&#39;t want to complete in steps; you
want Org to generate all of the possible completions and present them at
once. Helm then lets you narrow to the one you want.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-outline-path-complete-in-steps &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;creating-new-parents&#34;&gt;Creating New Parents&lt;/h3&gt;
&lt;p&gt;Occasionally you may want to refile something into another file or heading and
place it beneath a new parent that you create on-the-fly. If you do not set up
this configuration, you will not be able to create new parents during refile, so
I recommend setting it up.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-refile-allow-creating-parent-nodes &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;confirm&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means &amp;ldquo;allow me to tack new heading names onto the end of my outline path,
and if I am asking to create new ones, make me confirm it.&amp;rdquo; For the simplest
case, you allow Helm to narrow to what you want and hit &lt;code&gt;RET&lt;/code&gt; and you&#39;re
done. If you want to create a new heading, you must add &lt;code&gt;/New Heading&lt;/code&gt; to the
end, and upon accepting that entry, Org will prompt you to confirm that you want
to create a new heading called &amp;ldquo;New Heading.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This can be useful if you are refiling a bunch of stuff and you have an idea of
the new structure you want and you don&#39;t want to have to bounce between files
creating new parent headings that will become targets. You can just use Refile
itself to build the structure that you want.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Refile is a powerful way to reorganize your notes once you&#39;ve taken them. Once
you have mastered the Refile feature, you will no longer pause when making a new
note, wondering if you&#39;re putting it in the right place or expressing the
ideal relationship between items. Refile gives you the power to dynamically
restructure your existing and new notes in the blink of an eye.&lt;/p&gt;
&lt;p&gt;If you liked this, let me know in the comments below, and share it with your
friends and followers!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>don t use terminal emacs</title>
       <link>http://example.org/post/2016/12/29t162020/0500/don-t-use-terminal-emacs/</link>
       <pubDate>Thu, 29 Dec 2016 16:20:20 -0500</pubDate>
       
       <guid>http://example.org/post/2016/12/29t162020/0500/don-t-use-terminal-emacs/</guid>
       <description>&lt;p&gt;If you are a terminal guy as I am, or if you&#39;re a terminal gal, you may be
inclined to use Emacs in the terminal as well. A couple of my friends who took
up Vim got used to running it within tmux and exchanged one terminal program for
the other. This is wrong.&lt;/p&gt;
&lt;p&gt;The GUI Emacs program is not just a crutch for the ignorant fools with their
fingers all gnarled by mouse overuse; no, GUI Emacs is much more powerful, and
there is almost no reason at all to run Emacs in a terminal. Ever.&lt;/p&gt;
&lt;p&gt;Let me explain why.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;There are two reasons why GUI Emacs is superior to Emacs run in a terminal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GUI Emacs is capable of things that the terminal fundamentally cannot do, and&lt;/li&gt;
&lt;li&gt;TRAMP.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;m going to come at this from a Vim vs. gVim perspective because I was the guy
who used to run around telling people to &amp;ldquo;just run Vim in the terminal,&amp;rdquo; and
reciting facts like &amp;ldquo;other than color depth you get &lt;em&gt;nothing&lt;/em&gt; from gVim,&amp;rdquo; and so
on. Those statements are true.&lt;/p&gt;
&lt;p&gt;Emacs, in so many ways, is light years ahead of Vim. I&#39;ve said it before, I&#39;ll
say it again: Emacs is better software.&lt;/p&gt;
&lt;p&gt;OK, so let&#39;s dig into the details.&lt;/p&gt;
&lt;h2 id=&#34;gui-capabilities&#34;&gt;GUI Capabilities&lt;/h2&gt;
&lt;p&gt;There are things that the GUI Emacs program can do that a terminal program
simply cannot. These are things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use rich text formatting&lt;/li&gt;
&lt;li&gt;Display images&lt;/li&gt;
&lt;li&gt;Display PDF documents&lt;/li&gt;
&lt;li&gt;Interact with the system clipboard natively&lt;/li&gt;
&lt;li&gt;Respond to key presses that terminals can&#39;t see or understand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gVim has the ability to use the system clipboard, but apart from color depth
there was no other difference in capabilities between it and good old terminal
Vim.&lt;/p&gt;
&lt;p&gt;Emacs brings in the ability to format text in different sizes, styles, and
weights; display actual full images; display PDF documents; and use key bindings
terminals don&#39;t support.&lt;/p&gt;
&lt;p&gt;I&#39;ll just talk through a couple of these that I&#39;ve found particularly useful,
but feel free to drop additional questions in the comments below.&lt;/p&gt;
&lt;h3 id=&#34;display-images&#34;&gt;Display Images&lt;/h3&gt;
&lt;p&gt;Let&#39;s get this out of the way first. I don&#39;t think that displaying images in
Emacs is a &amp;ldquo;killer app.&amp;rdquo; I have used it when creating presentations or taking
notes in Org Mode, but I could easily live without it. I even wrote a package
for displaying the weather forecast, called &lt;a href=&#34;https://github.com/aaronbieber/sunshine.el&#34;&gt;Sunshine&lt;/a&gt;, which can display
the icons for weather conditions. It&#39;s easy to do. It&#39;s not critical to my
lifestyle or well-being.&lt;/p&gt;
&lt;h3 id=&#34;system-clipboard&#34;&gt;System Clipboard&lt;/h3&gt;
&lt;p&gt;Access to the system clipboard is &lt;em&gt;absolutely&lt;/em&gt; a must-have. I recall going
through long and uncomfortable contortions to get tmux and terminal Vim to share
clipboard data with the Linux system clipboard using command line utilities like
&lt;code&gt;xsel&lt;/code&gt; and &lt;code&gt;xclip&lt;/code&gt;. It never worked well, it hung the editor, it was not
reliable.&lt;/p&gt;
&lt;p&gt;Being able to copy and paste freely between your browser or other apps and your
editor is a &lt;em&gt;critical time-saver&lt;/em&gt;. That&#39;s why the clipboard exists in the first
place.&lt;/p&gt;
&lt;p&gt;Both gVim and GUI Emacs have this ability because they are GUI programs. You are
severely missing out if you are using your terminal as a layer in between these
functions. Pasting &lt;em&gt;into&lt;/em&gt; the editor is usually not so bad, but copying out of
it is tedious and awful.&lt;/p&gt;
&lt;p&gt;When using Org Mode to comprehensively organize my entire life, access to
features like clipboard sharing and [protocol triggers][org-protocol] are
totally killer.&lt;/p&gt;
&lt;p&gt;[org-protocol]: {% post_url 2016-11-24-org-capture-from-anywhere-on-your-mac %}&lt;/p&gt;
&lt;h3 id=&#34;respond-to-keys-the-terminal-doesnt-understand&#34;&gt;Respond to Keys the Terminal Doesn&#39;t Understand&lt;/h3&gt;
&lt;p&gt;There are actually &lt;em&gt;four&lt;/em&gt; common modifier keys on any modern keyboard. Those
are, in no particular order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Shift,&lt;/li&gt;
&lt;li&gt;Control,&lt;/li&gt;
&lt;li&gt;Alt (or Meta), and&lt;/li&gt;
&lt;li&gt;Super&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Super is also called by other names, like &amp;ldquo;Command&amp;rdquo; (on the Mac) or &amp;ldquo;the Windows
key&amp;rdquo; in That Other Operating System. Emacs loves to bind things to
&lt;em&gt;super&lt;/em&gt;. Since picking up Emacs I have discovered all sorts of ways to make use
of the additional key bindings at my disposal when I am using &lt;em&gt;super&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Emacs also loves binding things to &lt;em&gt;meta&lt;/em&gt; (alt). Even &lt;em&gt;meta&lt;/em&gt; doesn&#39;t always work
properly in some terminals because there are strong differences of opinion about
how those particular character codes are formed, but there are few terminals
that can properly handle a &lt;em&gt;super&lt;/em&gt; key press at all.&lt;/p&gt;
&lt;p&gt;You have all of these keys, and your operating system can use them, so why not
your editor?&lt;/p&gt;
&lt;h2 id=&#34;tramp&#34;&gt;TRAMP&lt;/h2&gt;
&lt;p&gt;For those who are not familiar with TRAMP, it is an acronym that stands for
&amp;ldquo;Transparent Remote Access, Multiple Protocol&amp;rdquo; and has been a part of core Emacs
since version 22.1.&lt;/p&gt;
&lt;p&gt;Why does this have anything at all to do with terminal vs. GUI Emacs? Because
the terminal versions of editors are quite often used to make changes to files
on remote servers, generally through an SSH connection.&lt;/p&gt;
&lt;p&gt;What TRAMP allows you to do is open remote files, through SSH, directly in your
local GUI Emacs. Not only does it allow you to &lt;em&gt;open&lt;/em&gt; those files, it allows you
to save them, to move them, to change their permissions, and so forth. TRAMP
abstracts away the protocol layer in between so that essentially all Emacs
operations work on remote files. It&#39;s similar to magic.&lt;/p&gt;
&lt;p&gt;Is your remote file located in a Git repository? No problem, Magit works through
TRAMP as well. Because TRAMP basically wraps all of the elisp file access
functions, or something like that, most Emacs packages don&#39;t need to do any
extra work to act on remote files.&lt;/p&gt;
&lt;p&gt;There are a few caveats, of course. If you work on remote &lt;em&gt;projects&lt;/em&gt; quite
often, it can be slow to use tools like Projectile, where indexing tons of
remote files is required, but for dropping in and editing a few files (the sort
of thing you&#39;d open a quick SSH session for), TRAMP is perfect.&lt;/p&gt;
&lt;p&gt;Since you&#39;re using your own local GUI Emacs, you feel right at home with all of
your GUI key bindings and colors and so on.&lt;/p&gt;
&lt;h2 id=&#34;advice-you-didnt-ask-for&#34;&gt;Advice You Didn&#39;t Ask For&lt;/h2&gt;
&lt;p&gt;If you&#39;ve made it this far without cheating, you already know my opinion. I
strongly advise you to simply stop using Emacs in the terminal. Full stop.&lt;/p&gt;
&lt;p&gt;You may ask, &amp;ldquo;but what if I need to edit my crontab file or something?&amp;rdquo; Sure. I
get that. Guess what, you can use GUI Emacs for that, too, if you have
&lt;code&gt;(server-start)&lt;/code&gt; in your init file and your &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is
set to &lt;code&gt;emacsclient&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Live in the blissful world of 16.7 million colors, different font sizes, and
infinite key bindings. Live in the GUI, forever.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>org capture from anywhere on your mac</title>
       <link>http://example.org/post/2016/11/24t085724/0500/org-capture-from-anywhere-on-your-mac/</link>
       <pubDate>Thu, 24 Nov 2016 08:57:24 -0500</pubDate>
       
       <guid>http://example.org/post/2016/11/24t085724/0500/org-capture-from-anywhere-on-your-mac/</guid>
       <description>&lt;p&gt;I&#39;m going to show you how you can create a &amp;ldquo;bookmarklet&amp;rdquo; button in your browser
that will capture a note or link directly into Org Mode in your running
Emacs. That&#39;s right, you press a button in, say, Chrome, and Emacs pops up and
displays your Org capture interface with the current webpage&#39;s information in it.&lt;/p&gt;
&lt;p&gt;{% infobox %}
Fair warning: this is a Mac-only post. What I will talk about is surely possible
in Windows, but I have no idea how, so don&#39;t ask. If you do know (or find out)
feel free to use the comments section to share your knowledge with everyone else
here.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;How is this achieved? Through a little bit of magic called &amp;ldquo;Org Protocol.&amp;rdquo;
&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;The goal of this exercise is to be able to click a button in Chrome and have
your already-running GUI Emacs pop up with a capture buffer open containing the
page title and URL of the webpage that was open in Chrome when you did that.&lt;/p&gt;
&lt;p&gt;To accomplish this, we will use Org Protocol. The way it works is
straightforward to wire up on a Mac, but there are several moving parts. This is
what is going to happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You click a &amp;ldquo;bookmarklet&amp;rdquo; button in your browser, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That bookmarklet is not a URL to a page, but rather a snippet of Javascript
that composes a URL using a protocol prefix of &lt;code&gt;org-protocol://&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Javascript tells Chrome to visit that URL. Chrome sees that the protocol is
not internally supported (e.g. &lt;code&gt;http://&lt;/code&gt;, &lt;code&gt;ftp://&lt;/code&gt;, etc.) and so it defers
to the operating system to find a &amp;ldquo;handler&amp;rdquo; for that protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Through a bit of OS X magic, an AppleScript application has been registered
as a handler of &lt;code&gt;org-protocol://&lt;/code&gt; URLs, so it is run and given this data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That AppleScript application runs &lt;code&gt;emacsclient&lt;/code&gt; and hands it the URL, and
then&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;emacsclient&lt;/code&gt; communicates with your already-running Emacs (though the
server/client connection) and Org&#39;s Protocol module interprets the URL as a
request to capture a specific template, which it carries out.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why is it done this way? Primarily because the Emacs GUI program doesn&#39;t
register itself as a protocol handler on your system. It would be convenient if
it did, and maybe someone can write a patch to support that some day, but until
then we have this AppleScript layer in between.&lt;/p&gt;
&lt;p&gt;Let&#39;s get started.&lt;/p&gt;
&lt;h2 id=&#34;build-a-protocol-handler&#34;&gt;Build a Protocol Handler&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aaronbieber/org-protocol-handler&#34;&gt;{% img noborder left /images/uploads/applescript-icon.png %}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code necessary to implement a system-level protocol handler in OS X is
surprisingly simple, especially if you write it in AppleScript. Any application
package whose &lt;code&gt;Info.plist&lt;/code&gt; defines a &amp;ldquo;URL scheme&amp;rdquo; you want to respond to and
that lives in &lt;code&gt;/Applications&lt;/code&gt; is automatically registered as a handler for that
scheme.&lt;/p&gt;
&lt;p&gt;In the AppleScript code, you write an &lt;code&gt;on open location&lt;/code&gt; routine that accepts
the whole URL as an argument, and do what you want with it. In this case, we
take that URL and pass it on as an argument to &lt;code&gt;emacsclient&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because I am a polite and generous
hacker, &lt;a href=&#34;https://github.com/aaronbieber/org-protocol-handler&#34;&gt;I have already written this for you (Github)&lt;/a&gt;. Other solutions do
already exist, but I wrote my own for three reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To learn how (chiefly),&lt;/li&gt;
&lt;li&gt;To display a desktop notification letting you know that it worked, and&lt;/li&gt;
&lt;li&gt;To focus GUI Emacs (if it&#39;s running) when capture is triggered.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The README within the project explains how to install and configure the protocol
handler application. Essentially, edit the path to &lt;code&gt;emacsclient&lt;/code&gt; if necessary
and drop the application itself into &lt;code&gt;/Applications&lt;/code&gt;. That&#39;s it.&lt;/p&gt;
&lt;p&gt;If you use terminal Emacs it should work just fine, but when you trigger a
capture, the script will not be able to give Emacs the focus because it&#39;s inside
of some terminal somewhere that AppleScript can&#39;t see. I recommend using GUI
Emacs for many other reasons, but this is another good one.&lt;/p&gt;
&lt;h2 id=&#34;configure-emacs&#34;&gt;Configure Emacs&lt;/h2&gt;
&lt;p&gt;The canonical guide for configuring Org Protocol
is &lt;a href=&#34;http://orgmode.org/worg/org-contrib/org-protocol.html&#34;&gt;available on the Org Mode website&lt;/a&gt;. You should skim that guide
and pay special attention to the following details:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;org-protocol&lt;/code&gt; package should be included with your distribution of Org
Mode, so you don&#39;t need to install anything.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You do need to &lt;code&gt;(require &#39;org-protocol)&lt;/code&gt;, because that package isn&#39;t loaded
by default, and finally&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to have the Emacs server running.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have added &lt;code&gt;(server-start)&lt;/code&gt; to my init file so that the Emacs server is always
started when Emacs starts. The overhead involved in running this server
interface is quite low.&lt;/p&gt;
&lt;p&gt;If you just want to store a link to the current page for later insertion into an
Org file, you don&#39;t need anything else. If you want to capture the current
page&#39;s URL, title, and any selected text into a new Org element (using
&amp;ldquo;capture&amp;rdquo;), you will need to set up a capture template.&lt;/p&gt;
&lt;p&gt;Before getting into capture templates, let&#39;s get a simple bookmarklet working.&lt;/p&gt;
&lt;h2 id=&#34;storing-a-link&#34;&gt;Storing a Link&lt;/h2&gt;
&lt;p&gt;To store a link for later insertion into an Org file, I use this bookmarklet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;javascript:(function () {
  window.location.href=&#39;org-protocol://store-link://&#39;
    +encodeURIComponent(location.href)+&#39;/&#39;
    +encodeURIComponent(document.title)+&#39;/&#39;
    +encodeURIComponent(window.getSelection())
})();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;{% infobox %}
Note that I&#39;ve added newlines and indentation here strictly for legibility; you
should format this as a single continuous line for use in your browser.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;Create a new bookmark and supply this string as the URL. I think it really works
best if you use a bookmark on your bookmarks toolbar so that it is a button you
can click on. When you click that button, your browser will attempt to visit
this URL, which runs the Javascript that does all the magic.&lt;/p&gt;
&lt;p&gt;If you&#39;ve followed along closely up till now and you have Emacs and its server
running and the Org Protocol Handler app in your &lt;code&gt;/Applications&lt;/code&gt; directory and
you click this bookmarklet, a desktop notification should appear informing you
that the link has been saved.&lt;/p&gt;
&lt;p&gt;Within Org you should be able to press &lt;code&gt;C-c C-l&lt;/code&gt; to insert a link, and the first
item should be the URL of the page you were viewing when you pressed the
bookmark button! If not, you screwed something up!&lt;/p&gt;
&lt;h2 id=&#34;capturing-notes&#34;&gt;Capturing Notes&lt;/h2&gt;
&lt;p&gt;Capture is where things start to get interesting. The URL scheme for capturing a
new Org element is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org-protocol://capture://&amp;lt;Template&amp;gt;/&amp;lt;URL&amp;gt;/&amp;lt;Title&amp;gt;/&amp;lt;Text (optional)&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The value of &lt;code&gt;&amp;lt;Template&amp;gt;&lt;/code&gt; is the template &amp;ldquo;key&amp;rdquo; pointing to a specific template
defined in &lt;code&gt;org-capture-templates&lt;/code&gt;. You can read about how to configure a
capture template in the Org Mode manual under &lt;a href=&#34;http://orgmode.org/manual/Capture-templates.html&#34;&gt;Capture Templates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Org Mode will open a capture window using the template indicated when this URL
is sent through &lt;code&gt;emacsclient&lt;/code&gt;. The net effect is that you can use a special
template for these captures that contains placeholders for the interactive link,
page title, and selected text.&lt;/p&gt;
&lt;p&gt;Because Org Mode capture templates also specify the destination of the new
entry, you can use this to capture general notes, make a list of sites for
reading later, or anything else you can think of, just by changing the target
template key in the bookmarklet.&lt;/p&gt;
&lt;p&gt;Read more about this in the &lt;a href=&#34;http://orgmode.org/worg/org-contrib/org-protocol.html#orgheadline20&#34;&gt;Org Protocol capture templates docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OK, let&#39;s get this thing working.&lt;/p&gt;
&lt;h3 id=&#34;the-capture-template&#34;&gt;The Capture Template&lt;/h3&gt;
&lt;p&gt;I&#39;m using a template designed to save links for later reading. It looks like
this (this is what it would look like if it was my only template, which it
isn&#39;t; the variable can contain multiple templates like this):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-capture-templates
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A link, for reading later.&amp;#34;&lt;/span&gt; entry
         (file+headline &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;notes.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reading List&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* %:description\n%u\n\n%c\n\n%i&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#e6db74&#34;&gt;:empty-lines&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key for this template is the letter &amp;ldquo;l&amp;rdquo; (that&#39;s lowercase &amp;ldquo;L&amp;rdquo;, for
&amp;ldquo;link&amp;rdquo;). It is a new &amp;ldquo;entry&amp;rdquo; and should be added under the &amp;ldquo;Reading List&amp;rdquo;
headline in &amp;ldquo;notes.org.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The important part is the format string. You can make use of some placeholder
values for URL captures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%c&lt;/code&gt; is the interactive link to the captured page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%i&lt;/code&gt; is the selected text, if any&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%:description&lt;/code&gt; contains the plain text title of the page&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this template I am also using &lt;code&gt;%u&lt;/code&gt;, which is an inactive timestamp. Various
other standard placeholder values are defined in the Org Mode documentation for
capture templates.&lt;/p&gt;
&lt;p&gt;So now that we have a capture template, we can send a capture URL to
&lt;code&gt;emacsclient&lt;/code&gt; with a bookmarklet like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;javascript:(function () {
  window.location.href=&#39;org-protocol://capture://l/&#39;
    +encodeURIComponent(window.location.href)+&#39;/&#39;
    +encodeURIComponent(document.title)+&#39;/&#39;
    +encodeURIComponent(window.getSelection());
})();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open some webpage of your choice, maybe select some text on the page, and hit
this bookmarklet. Hopefully Emacs will come to the front with a capture window
open, ready for you to tweak or edit the new entry and commit it to your notes!&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;This is one of the most sophisticated things I&#39;ve done with Emacs so far. This
functionality ties together OS-level protocol handling, custom AppleScript, and
Org Mode configuration to create a way for programs I use all the time to talk
to each other and make my life easier.&lt;/p&gt;
&lt;p&gt;If you came away from this scratching your head, or if you use Windows and
figured out how to make this work there, please leave comments below!&lt;/p&gt;
&lt;p&gt;And if you&#39;re in the US or Canada, happy Thanksgiving!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>creating org mode structure templates</title>
       <link>http://example.org/post/2016/11/23t140211/0500/creating-org-mode-structure-templates/</link>
       <pubDate>Wed, 23 Nov 2016 14:02:11 -0500</pubDate>
       
       <guid>http://example.org/post/2016/11/23t140211/0500/creating-org-mode-structure-templates/</guid>
       <description>&lt;p&gt;Hopefully you already know that you can insert common markup blocks in Org Mode
by entering a prefix like &lt;code&gt;&amp;lt;s&lt;/code&gt; and pressing &lt;code&gt;&amp;lt;M-TAB&amp;gt;&lt;/code&gt;. Org Mode publicly calls
these &amp;ldquo;Easy Templates&amp;rdquo; but internally calls them &amp;ldquo;structure templates.&amp;rdquo; I wanted
to be able to insert a couple of other common Org-specific blocks, so I figured
out how to add my own. &lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Org Mode supports a few &amp;ldquo;blocks,&amp;rdquo; which you can read about beginning on the
&lt;a href=&#34;http://orgmode.org/manual/Blocks.html&#34;&gt;Blocks page&lt;/a&gt; of the Org documentation.&lt;/p&gt;
&lt;p&gt;For example, if you want to insert a block of Emacs Lisp code into an Org
document, you would write a block that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC emacs-lisp
(defun org-xor (a b)
    &amp;quot;Exclusive or.&amp;quot;
    (if a (not b) b))
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It can be hard to remember, and tedious to type, the &lt;code&gt;#+BEGIN_SRC&lt;/code&gt; bit, so Org
includes this expansion capability that it refers to in its documentation as
&lt;a href=&#34;http://orgmode.org/manual/Easy-Templates.html&#34;&gt;Easy Templates&lt;/a&gt;, but that is referred to in its source code as
&amp;ldquo;structure templates.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Getting straight to the point, I use the export features of Org Mode quite
often, especially export to HTML (mostly for pasting into other formatted
mediums such as email) and LaTeX/Beamer (for quick one-off slide decks). I
usually write content directly into my &amp;ldquo;notes&amp;rdquo; file and then export a single
subtree.&lt;/p&gt;
&lt;p&gt;Exporting a subtree is very easy, simply trigger export with &lt;code&gt;C-c C-e&lt;/code&gt;, toggle
&amp;ldquo;export subtree&amp;rdquo; on with &lt;code&gt;C-s&lt;/code&gt;, and press the appropriate export format buttons,
like &lt;code&gt;h o&lt;/code&gt; for &amp;ldquo;export as HTML and open in the default browser.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;{% infobox %}
If you&#39;re a pro like me, you have set &lt;code&gt;org-export-initial-scope&lt;/code&gt; to &lt;code&gt;subtree&lt;/code&gt; so
that you can skip the second step.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;Let&#39;s take HTML as an example. The default export settings when you export to
HTML are crude at best. For one thing, the title of the document will be the
subtree&#39;s title, which is not always what you want. Worse, the filename of the
HTML file will be the filename of the &lt;em&gt;entire file&lt;/em&gt; the subtree is in. So
essentially I wound up with a &lt;code&gt;notes.org.html&lt;/code&gt; over and over.&lt;/p&gt;
&lt;p&gt;You can fix that by adding some export options, and for subtree exports you put
those into a property drawer. For me, that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Test Subtree Export
  :PROPERTIES:
  :EXPORT_FILE_NAME: actually-use-this-filename
  :EXPORT_TITLE: My Fascinating HTML Export
  :EXPORT_OPTIONS: toc:nil html-postamble:nil num:nil
  :END:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this workflow there are two things that are annoying:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I hate typing out &lt;code&gt;:PROPERTIES:&lt;/code&gt;, and I use property drawers a lot. There is
an Org function for this (&lt;code&gt;org-insert-property-drawer&lt;/code&gt;), but I&#39;m running out
of good key bindings so I didn&#39;t want to make another one for this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&#39;m not going to be able to memorize the precise format of all of my HTML
export settings, let alone &lt;code&gt;toc:nil html-postamble:nil num:nil&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is where a structure template comes in handy.&lt;/p&gt;
&lt;h2 id=&#34;the-goal&#34;&gt;The Goal&lt;/h2&gt;
&lt;p&gt;The goal is to be able to type something like &lt;code&gt;&amp;lt;p&lt;/code&gt; and press &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; to insert
the property drawer, and then something like &lt;code&gt;&amp;lt;eh&lt;/code&gt; (for &lt;strong&gt;e&lt;/strong&gt;xport &lt;strong&gt;h&lt;/strong&gt;tml) and
press &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; to insert my default HTML export options.&lt;/p&gt;
&lt;p&gt;{% infobox %}
Structure templates are inserted as part of the &lt;code&gt;org-cycle&lt;/code&gt; function, and so I
have bound &lt;code&gt;org-cycle&lt;/code&gt; to &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; in my config. If &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; doesn&#39;t work for you,
but &lt;code&gt;&amp;lt;M-TAB&amp;gt;&lt;/code&gt; does, this is probably why.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;On the &lt;a href=&#34;http://orgmode.org/manual/Easy-Templates.html&#34;&gt;Easy Templates&lt;/a&gt; manual page, it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can install additional templates by customizing the variable
&lt;code&gt;org-structure-template-alist&lt;/code&gt;. See the docstring of the variable for
additional details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So this should be easy, we just need to add a new value to this list.&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-template&#34;&gt;Create a New Template&lt;/h2&gt;
&lt;p&gt;The format of &lt;code&gt;org-structure-template-alist&lt;/code&gt; is like this (abridged):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;((&amp;quot;s&amp;quot; &amp;quot;#+BEGIN_SRC ?\n\n#+END_SRC&amp;quot; &amp;quot;&amp;lt;src lang=\&amp;quot;?\&amp;quot;&amp;gt;\n\n&amp;lt;/src&amp;gt;&amp;quot;)
 (&amp;quot;e&amp;quot; &amp;quot;#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE&amp;quot; &amp;quot;&amp;lt;example&amp;gt;\n?\n&amp;lt;/example&amp;gt;&amp;quot;)
 (&amp;quot;q&amp;quot; &amp;quot;#+BEGIN_QUOTE\n?\n#+END_QUOTE&amp;quot; &amp;quot;&amp;lt;quote&amp;gt;\n?\n&amp;lt;/quote&amp;gt;&amp;quot;)
 ...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is an &lt;em&gt;association list&lt;/em&gt; so each element of the outer list is a list with
at least two elements. The first element is the letter to follow &lt;code&gt;&amp;lt;&lt;/code&gt; in your
template expansion trigger. The second element is the template itself, with a
&lt;code&gt;?&lt;/code&gt; where the cursor should wind up at the end.&lt;/p&gt;
&lt;p&gt;Most of the defaults have a third value, which is an &amp;ldquo;Emacs Muse&amp;rdquo;-style
template. Muse is some kind of authoring system for Emacs that I know nothing
about and don&#39;t care about. You don&#39;t need a third element for this to work, so
just ignore it.&lt;/p&gt;
&lt;p&gt;Cool, so we just add a new element to this list defining our template. Let&#39;s do
the &lt;code&gt;:PROPERTIES:&lt;/code&gt; one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-structure-template-alist&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt; (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:PROPERTIES:\n&amp;#34;&lt;/span&gt;
                               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?\n&amp;#34;&lt;/span&gt;
                               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:END:&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% infobox %}
Note that I am using the &lt;code&gt;list&lt;/code&gt; function rather than a quoted list because I
need Emacs to evaluate the return value of the &lt;code&gt;concat&lt;/code&gt; function within the
list. I am only using &lt;code&gt;concat&lt;/code&gt; here to make the code more legible because the
template string is multiple lines long. I like pretty code.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;You can evaluate this expression by placing your cursor outside of the last
closing parenthesis and calling &lt;code&gt;eval-last-sexp&lt;/code&gt; (which I have bound to &lt;code&gt;C-RET&lt;/code&gt;
for just such an occasion).&lt;/p&gt;
&lt;p&gt;Once you have evaluated that expression, the template should work right away!
Open an Org file, enter &lt;code&gt;&amp;lt;p&lt;/code&gt; on its own line, and hit &lt;code&gt;&amp;lt;M-TAB&amp;gt;&lt;/code&gt; (or &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;/code&gt; if
you bound &lt;code&gt;org-cycle&lt;/code&gt; to it as I have).&lt;/p&gt;
&lt;h2 id=&#34;but-longer-shortcuts-though&#34;&gt;But Longer Shortcuts Though?&lt;/h2&gt;
&lt;p&gt;If you read the source code of the function &lt;code&gt;org-try-structure-completion&lt;/code&gt;, you
will notice that the regular expression will match &lt;em&gt;one or more letters&lt;/em&gt;, so
even though Org only ships with one-letter expansion triggers, you can create
longer ones if you want to.&lt;/p&gt;
&lt;p&gt;Here is my HTML export options template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-structure-template-alist&lt;/span&gt;
             (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eh&amp;#34;&lt;/span&gt; (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:EXPORT_FILE_NAME: ?\n&amp;#34;&lt;/span&gt;
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:EXPORT_TITLE:\n&amp;#34;&lt;/span&gt;
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:EXPORT_OPTIONS: toc:nil html-postamble:nil num:nil&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now I can do &lt;code&gt;&amp;lt;p&amp;lt;TAB&amp;gt;&lt;/code&gt; and then immediately &lt;code&gt;&amp;lt;eh&amp;lt;TAB&amp;gt;&lt;/code&gt; and I&#39;m all ready to add
a filename and a title and export this subtree to HTML!&lt;/p&gt;
&lt;p&gt;Have any bright ideas for new Org Mode structure templates? Leave them in the
comments below!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>agenda interactions primer</title>
       <link>http://example.org/post/2016/09/25t112859/0400/agenda-interactions-primer/</link>
       <pubDate>Sun, 25 Sep 2016 11:28:59 -0400</pubDate>
       
       <guid>http://example.org/post/2016/09/25t112859/0400/agenda-interactions-primer/</guid>
       <description>&lt;p&gt;Now that you have read [An Agenda for Life with Org Mode][agenda-4l], you know
how to build the perfect agenda for managing the tasks in your life. But, I ask
you, what good is a task that you cannot complete?&lt;/p&gt;
&lt;p&gt;[agenda-4l]: {% post_url 2016-09-24-an-agenda-for-life-with-org-mode %})&lt;/p&gt;
&lt;p&gt;Fortunately, Org Mode provides a rich set of interactive commands for
manipulating your task entries directly from the agenda view and, in fine Emacs
style, the commands relevant to each type of view will apply only to the
appropriate section of a composite view.&lt;/p&gt;
&lt;p&gt;I&#39;ve tweaked and customized my interface to the agenda and so I want to share
with you the most useful commands and a couple of the things I have
added.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;moving-around&#34;&gt;Moving Around&lt;/h2&gt;
&lt;p&gt;As usual, the most important commands you can learn are the navigation
commands. It would be impossible to apply the others without an ability to move
the cursor around within the agenda.&lt;/p&gt;
&lt;p&gt;As you all know, I am an Evil Mode user, so I have bound the &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; keys to
move up and down, respectively.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(define-key org-agenda-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-next-item&lt;/span&gt;)
(define-key org-agenda-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-previous-item&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;moving-in-a-composite-view&#34;&gt;Moving in a Composite View&lt;/h3&gt;
&lt;p&gt;Within a composite agenda view, you will have a heading of some kind at the
beginning of each section. I was surprised that Org Mode lacked navigation
commands for jumping directly to the headings, so I wrote one.&lt;/p&gt;
&lt;p&gt;This is probably not an ideal approach, but it works. I use the fact that the
headings possess specific text properties to locate them in the buffer and it&#39;s
not the most elegant code to read, but it has been working great for me.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-agenda-next-header ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jump to the next header in an agenda series.&amp;#34;&lt;/span&gt;
  (interactive)
  (air--org-agenda-goto-header))

(defun air-org-agenda-previous-header ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jump to the previous header in an agenda series.&amp;#34;&lt;/span&gt;
  (interactive)
  (air--org-agenda-goto-header &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))

(defun air--org-agenda-goto-header (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; backwards)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Find the next agenda series header forwards or BACKWARDS.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((pos (save-excursion
               (goto-char (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; backwards
                              (line-beginning-position)
                            (line-end-position)))
               (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((find-func (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; backwards
                                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;previous-single-property-change&lt;/span&gt;
                                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next-single-property-change&lt;/span&gt;))
                      (end-func (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; backwards
                                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;max&lt;/span&gt;
                                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;min&lt;/span&gt;))
                      (all-pos-raw (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; find-func (point) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-structural-header&lt;/span&gt;)
                                         (&lt;span style=&#34;color:#a6e22e&#34;&gt;funcall&lt;/span&gt; find-func (point) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-agenda-date-header&lt;/span&gt;)))
                      (all-pos (cl-remove-if-not &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;numberp&lt;/span&gt; all-pos-raw))
                      (prop-pos (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; all-pos (&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt; end-func all-pos) &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))
                 prop-pos))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pos (goto-char pos))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; backwards (goto-char (line-beginning-position)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;air-&lt;/code&gt; prefixes are simply namespace separators to avoid possible
function collisions.&lt;/li&gt;
&lt;li&gt;The main function uses the &lt;code&gt;cl&lt;/code&gt; library, which I believe is now part of
Emacs, but you may want to err on the side of safety and include a
&lt;code&gt;(eval-when-compile (require &#39;cl))&lt;/code&gt; in the file this function lives in.&lt;/li&gt;
&lt;li&gt;It might be a cleaner design to have the main function return &lt;code&gt;nil&lt;/code&gt; or a
buffer position and let the interactive functions call &lt;code&gt;goto-char&lt;/code&gt;, but I&#39;m
too lazy to change it now and couldn&#39;t think of a use case for knowing the
position without jumping to it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have bound these to the capitalized versions of my usual &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; motions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(define-key org-agenda-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-org-agenda-next-header&lt;/span&gt;)
(define-key org-agenda-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-org-agenda-previous-header&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now you&#39;re jumping around all over the place&amp;hellip; But what can you do to change
the entries themselves?&lt;/p&gt;
&lt;h2 id=&#34;task-management&#34;&gt;Task Management&lt;/h2&gt;
&lt;p&gt;The main keys you will need to know to manage the tasks in your agenda are the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;: Cycle the TODO state of the current item.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt;: Apply a specific priority (you&#39;ll be prompted in the minibuffer).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt;: Increase or decrease priority, respectively.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S-Left&lt;/code&gt; and &lt;code&gt;S-Right&lt;/code&gt;: Shift date or time of item at point forward or backward.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: Save all agenda buffers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt;: Rebuild all agenda views in the current buffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These should be self-explanatory. The date/time shifting keys will affect
&lt;code&gt;SCHEDULED&lt;/code&gt; or &lt;code&gt;DEADLINE&lt;/code&gt; items, but you have to press &lt;code&gt;g&lt;/code&gt; to rebuild the buffer
after making the change to see any effect it has on color-coding, etc.&lt;/p&gt;
&lt;p&gt;{% infobox %}
&lt;strong&gt;Important!&lt;/strong&gt; Making changes to items in the agenda buffer edits the
underlying buffers where the agenda items live, but it &lt;strong&gt;does not&lt;/strong&gt; save those
buffers! Get in the habit of pressing &lt;code&gt;s&lt;/code&gt; to save all modified agenda buffers
after making changes directly in the agenda view. I press &lt;code&gt;sg&lt;/code&gt; after most edits
to save and recompute the agenda.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;In addition, I wanted an easy way to add things to my task list from this view,
so I also bound &lt;code&gt;c&lt;/code&gt; to my default capture command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-agenda-capture (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; vanilla)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Capture a task in agenda mode, using the date at point.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;If VANILLA is non-nil, run the standard `org-capture&amp;#39;.&amp;#34;&lt;/span&gt;
  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; vanilla
      (org-capture)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((org-overriding-default-time (org-get-cursor-date)))
      (org-capture &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;))))

(define-key org-agenda-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-org-agenda-capture&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What this does, essentially, is let me press &lt;code&gt;c&lt;/code&gt; by itself to open my default
capture command, which is a TODO entry (the shortcut key is &amp;ldquo;a&amp;rdquo; and that is
passed to &lt;code&gt;org-capture&lt;/code&gt;). If I use a prefix (by pressing &lt;code&gt;C-u c&lt;/code&gt;), it will open
the default (&amp;ldquo;vanilla&amp;rdquo;) Org Mode capture dialog, prompting me to pick a capture
type, where I can choose my &amp;ldquo;note&amp;rdquo; type or others I have developed.&lt;/p&gt;
&lt;p&gt;After changing TODO state, priority, or adding a new item, you will need to
press &lt;code&gt;g&lt;/code&gt; to rebuild the buffer and display the changes.&lt;/p&gt;
&lt;h2 id=&#34;drilling-down&#34;&gt;Drilling Down&lt;/h2&gt;
&lt;p&gt;The agenda view is, ultimately, a time- and status-sensitive summary of the
content in your agenda files, which might be files dedicated to storing tasks
(as some of mine are) or note-taking files that happen to have tasks sprinkled
into them (the original reason for Org Mode&#39;s creation).&lt;/p&gt;
&lt;p&gt;So as you are navigating your agenda, you will often need to get to the
underlying entry to edit it. Quite often, I will have a task that requires some
further note-taking or data collection, and I will use that entry itself to
gather the information.&lt;/p&gt;
&lt;p&gt;There are four major ways in which to access the underlying task entries, and
those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RET&lt;/code&gt;: Switch to the current entry in this window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TAB&lt;/code&gt;: Switch to the current entry in a new split window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SPC&lt;/code&gt;: Show the current entry in a new split window with highlighting.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt;: Follow mode (persist the effect of &lt;code&gt;SPC&lt;/code&gt; as point moves).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;RET&lt;/code&gt; and &lt;code&gt;TAB&lt;/code&gt; are equivalent save for the behavior of the window splitting. If
you want to jump to an item to edit it exclusively, use &lt;code&gt;RET&lt;/code&gt;; if you want to
continue to see the agenda while you do it, use &lt;code&gt;TAB&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I don&#39;t use &lt;code&gt;SPC&lt;/code&gt; as often as maybe I should. It and the &amp;ldquo;follow mode&amp;rdquo; are very
useful for understanding the location and context of an entry in a read-only
manner. I haven&#39;t found a great use for &amp;ldquo;follow mode&amp;rdquo; other than showing it off.&lt;/p&gt;
&lt;h2 id=&#34;launching-the-agenda&#34;&gt;Launching the Agenda&lt;/h2&gt;
&lt;p&gt;Finally, as you may have picked up, I live and die by my agenda, so I either
have it open all the time or I jump back to it between any other tasks I might
use Emacs for. I quickly tired of pressing &lt;code&gt;C-c t A d&lt;/code&gt; to launch my agenda
custom command, so I created a quick function and global key definition.&lt;/p&gt;
&lt;p&gt;After experimenting with a few global keys, I landed on &lt;code&gt;S-SPC&lt;/code&gt; (shift +
spacebar), which is not used by anything else I&#39;m aware of and is the easiest
thing to press that I could find. I probably press it 900 times a day.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-pop-to-org-agenda (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;optional&lt;/span&gt; split)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visit the org agenda, in the current window or a SPLIT.&amp;#34;&lt;/span&gt;
  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
  (org-agenda &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;)
  (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; split)
    (delete-other-windows)))
    
(define-key evil-normal-state-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S-SPC&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-pop-to-org-agenda&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that I am defining this mapping in Evil&#39;s normal state, but you could just
as easily define it in Emacs&amp;rsquo; global map instead.&lt;/p&gt;
&lt;p&gt;The trick is calling &lt;code&gt;org-agenda&lt;/code&gt; with a &lt;code&gt;nil&lt;/code&gt; prefix argument and the &amp;ldquo;agenda
key&amp;rdquo; corresponding to the dispatch menu key you would press to open the agenda
view you want. Mine is &amp;ldquo;d&amp;rdquo; for my custom daily agenda.&lt;/p&gt;
&lt;p&gt;Launching the agenda view will split the window. 99% of the time, I want to blow
away all other windows and see the agenda by itself, so that&#39;s the default
behavior, but I provided a prefix argument to leave the splits in the very few
cases where I want that.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>an agenda for life with org mode</title>
       <link>http://example.org/post/2016/09/24t124659/0400/an-agenda-for-life-with-org-mode/</link>
       <pubDate>Sat, 24 Sep 2016 12:46:59 -0400</pubDate>
       
       <guid>http://example.org/post/2016/09/24t124659/0400/an-agenda-for-life-with-org-mode/</guid>
       <description>&lt;p&gt;I&#39;ve been promising the Twitterverse that I would write more about how I use Org
Mode to &lt;em&gt;get stuff done&lt;/em&gt; and how I use it to &lt;em&gt;be a better manager&lt;/em&gt;. Upon careful
reflection, there is too much to cover in just one post, so this is the first of
what will likely be several posts on these topics.&lt;/p&gt;
&lt;p&gt;Today I would like to focus on the &amp;ldquo;agenda view&amp;rdquo; and how I&#39;ve configured it to
give me a window into what I need to do now, what is on the horizon, and manage
which things I should do first.&lt;/p&gt;
&lt;p&gt;This is what we&#39;ll build:&lt;/p&gt;
&lt;p&gt;{% img noborder /images/uploads/an-agenda-for-life-with-org-mode/composite-agenda-view.png %}&lt;/p&gt;
&lt;p&gt;&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;I classify all of my activities into one of four buckets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Things I need to do, eventually;&lt;/li&gt;
&lt;li&gt;Things I need to complete by a specific date;&lt;/li&gt;
&lt;li&gt;Things I cannot (or won&#39;t) start until a specific date; and&lt;/li&gt;
&lt;li&gt;Things I should do with some loose frequency.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these use cases aligns with an Org Mode feature, and those features are,
respectively:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A plain TODO entry,&lt;/li&gt;
&lt;li&gt;An entry with a SCHEDULED time stamp,&lt;/li&gt;
&lt;li&gt;An entry with a DEADLINE time stamp, and&lt;/li&gt;
&lt;li&gt;An entry with a STYLE property of &amp;ldquo;habit.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;building-the-agenda&#34;&gt;Building the Agenda&lt;/h2&gt;
&lt;p&gt;I very briefly introduced the agenda in my previous post,
[Dig into Org Mode][dig-in]. The &amp;ldquo;agenda&amp;rdquo; is a time-aware, filtered view of all
of the entries in some set of Org files, which you can specify. To make proper
use of the agenda, you must first tell Org which files to read by configuring
the &lt;code&gt;org-agenda-files&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;As I noted in [Dig into Org Mode][dig-in], I build my agenda from all of the Org
files in my &amp;ldquo;org&amp;rdquo; directory in Dropbox. Specifying a single directory is the
easiest thing you can do:&lt;/p&gt;
&lt;p&gt;[dig-in]: {% post_url 2016-01-30-dig-into-org-mode %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/org/&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also select individual files or specify a file that &lt;em&gt;contains&lt;/em&gt; a list of
files to read. See the variable&#39;s documentation for specifics.&lt;/p&gt;
&lt;p&gt;Once Org knows where to look to build up the agenda view, you can populate it
with your tasks. I&#39;m assuming that you already use Org for note-taking or task
management in some way, but if you don&#39;t, here is the bare minimum you should
place into a file to see how this works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#+TODO: TODO IN-PROGRESS | DONE

* TODO Complete this task eventually

* TODO Complete this task by September 30th
  DEADLINE: &amp;lt;2016-09-30 Fri&amp;gt;

* TODO Start this task on September 30th.
  SCHEDULED: &amp;lt;2016-09-30 Fri&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With a file like this saved as something like &lt;code&gt;todo.org&lt;/code&gt; in the directory
specified in &lt;code&gt;org-agenda-files&lt;/code&gt;, you can now press &lt;code&gt;M-x org-agenda RET&lt;/code&gt; to
display the &amp;ldquo;agenda dispatch&amp;rdquo; menu. The first option, &amp;ldquo;a,&amp;rdquo; is the most common as
it will display a weekly view with entries sorted into their respective dates.&lt;/p&gt;
&lt;p&gt;You may have noticed that the &amp;ldquo;agenda dispatch&amp;rdquo; menu contains options for
displaying views based on dates, views of pure TODO items, and even views
filtered by search criteria. These are extremely useful features that I use all
the time, but it&#39;s hard to face a busy day with all of your activities sorted
into separate lists with separate commands, so let&#39;s combine them.&lt;/p&gt;
&lt;p&gt;To do this, we will use an &amp;ldquo;agenda custom command.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;agenda-custom-commands&#34;&gt;Agenda Custom Commands&lt;/h2&gt;
&lt;p&gt;An &amp;ldquo;agenda custom command&amp;rdquo; allows you to add your own entries to the dispatch
menu and, in effect, define your own agenda view that you can trigger easily. To
define custom agenda commands, you customize the variable
&lt;code&gt;org-agenda-custom-commands&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In its simplest form, an agenda command looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-custom-commands
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt; agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that &lt;code&gt;org-agenda-custom-commands&lt;/code&gt; is itself a list, so its value here is a
list with one element, which is also a list. That inner list is our custom
command; it has a single letter key that will appear in the menu (&amp;ldquo;c&amp;rdquo;), a
description that will also appear, and then a type.&lt;/p&gt;
&lt;p&gt;There are many types available and some can accept arguments. Types and their
arguments are given one after another. In this case, the &amp;ldquo;agenda&amp;rdquo; type takes no
arguments and the documentation specifies that the empty string must be given.&lt;/p&gt;
&lt;p&gt;OK, so this is great and all, but all we&#39;ve actually done is recreate the &amp;ldquo;a&amp;rdquo;
option with the letter &amp;ldquo;c&amp;rdquo; instead. That isn&#39;t very helpful.&lt;/p&gt;
&lt;p&gt;The goal is to be able to see our scheduled items &lt;strong&gt;and&lt;/strong&gt; our unscheduled items
in the same view. Fortunately, there is a feature for this (of course), and it
is called a &amp;ldquo;composite agenda&amp;rdquo; or &amp;ldquo;agenda block view.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Essentially, by supplying a &lt;em&gt;list&lt;/em&gt; of types, the agenda view will generate each
one in turn and display them in the same buffer together! This is one of the
greatest things I&#39;ve ever discovered. I lived for months scheduling things to
start &amp;ldquo;today&amp;rdquo; just so they would show up in the agenda, even though dates were
irrelevant. Since discovering this view, I now have a much more nuanced
perspective on my priorities.&lt;/p&gt;
&lt;h3 id=&#34;building-the-composite-agenda-view&#34;&gt;Building the Composite Agenda View&lt;/h3&gt;
&lt;p&gt;As I mentioned above, all you need to do is build a list of types within your
custom agenda command. Here is a simple one that will display your scheduled
items followed by all of your TODO items:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-custom-commands
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt;
         ((agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
          (alltodo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A couple of things are going on here that deserve some explanation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you build a composite agenda, the types are a list and each type becomes
its own list, so you will note that &lt;code&gt;(agenda &amp;quot;&amp;quot;)&lt;/code&gt; and &lt;code&gt;(alltodo &amp;quot;&amp;quot;)&lt;/code&gt; now have
parentheses around them. That is a requirement and will not work otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alltodo&lt;/code&gt; is a type that is only available in a composite agenda; it will not
work in a single custom agenda command, instead you should use &lt;code&gt;todo&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you run this, you will see your scheduled items at the top, a divider line
made up of equal signs, and all of your other TODO items at the bottom, like this:&lt;/p&gt;
&lt;p&gt;{% img noborder /images/uploads/an-agenda-for-life-with-org-mode/composite-1.png %}&lt;/p&gt;
&lt;p&gt;We are already much closer now to our goal of visualizing all of our activities
in one place. This covers scheduled items, deadline items, and &amp;ldquo;eventually&amp;rdquo;
items, but it doesn&#39;t help us to see what we should do next. For that, I use
prioritization.&lt;/p&gt;
&lt;h3 id=&#34;priorities-and-focusing-your-day&#34;&gt;Priorities, and Focusing Your Day&lt;/h3&gt;
&lt;p&gt;Org Mode already has a notion of &amp;ldquo;priority,&amp;rdquo; and you can mark each item with a
priority &amp;ldquo;cookie&amp;rdquo; by calling &lt;code&gt;org-priority&lt;/code&gt;, &lt;code&gt;org-priority-up&lt;/code&gt;, or
&lt;code&gt;org-priority-down&lt;/code&gt;. It is possible to sort TODO lists by priority, so it may be
enough for you to see the higher priority items at the top of your &amp;ldquo;eventually&amp;rdquo;
list, and to pick away at those, perhaps re-prioritizing other things as you go
along.&lt;/p&gt;
&lt;p&gt;I do continuously re-prioritize, but I also subscribe to a GTD approach that
Netscape co-founder Marc Andreessen wrote about, which is to take some time at
the end of the day to pick the three things you will do the following day. I
really liked that idea, so I wanted to make it more formal in my agenda view.&lt;/p&gt;
&lt;p&gt;I decided to use priority &amp;ldquo;A&amp;rdquo; items as &amp;ldquo;things I must do today,&amp;rdquo; and let the
other priorities act as simple differentiators for the remaining &amp;ldquo;eventually&amp;rdquo;
items so that I can at least pay closer attention to things I determined to care
more about (and ignore things that are not as important, which is what I use
priority &amp;ldquo;C&amp;rdquo; for).&lt;/p&gt;
&lt;p&gt;To achieve this, I did two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I placed a TODO section at the top of my composite agenda view that displays
&lt;strong&gt;only&lt;/strong&gt; priority &amp;ldquo;A&amp;rdquo; items, and&lt;/li&gt;
&lt;li&gt;I filtered priority &amp;ldquo;A&amp;rdquo; items out of the &amp;ldquo;eventually&amp;rdquo; list so that I see them
only once.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is occasionally duplication across the scheduled section of the view, but
I haven&#39;t come up with the best way to handle that yet. My goal is to keep the
scheduled section as short as possible, and very few of my activities are
actually time-sensitive in a formal sense, but when I tell someone I will get
back to them by X date, I use that function to ensure that I will remember to do
so.&lt;/p&gt;
&lt;p&gt;The first part of the solution is easy, the second part was not so easy.&lt;/p&gt;
&lt;h4 id=&#34;the-top-priority-section&#34;&gt;The Top Priority Section&lt;/h4&gt;
&lt;p&gt;As it turns out, certain properties of Org entries can be treated as special
&amp;ldquo;tags&amp;rdquo; and filtered using the tags filtering options in the agenda custom
commands and composite view types. In this case, we want to see only items with
a priority of &amp;ldquo;A&amp;rdquo;, and so we can use the tag &lt;code&gt;PRIORITY=&amp;quot;A&amp;quot;&lt;/code&gt; to achieve that.&lt;/p&gt;
&lt;p&gt;Here is what that configuration looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-custom-commands
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt;
         ((tags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PRIORITY=\&amp;#34;A\&amp;#34;&amp;#34;&lt;/span&gt;
                ((org-agenda-skip-function &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-agenda-skip-entry-if &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;todo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done&lt;/span&gt;))
                 (org-agenda-overriding-header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;High-priority unfinished tasks:&amp;#34;&lt;/span&gt;)))
          (agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
          (alltodo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A few things to note here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You actually have to quote the value of the priority tag, but the tag
selector is quoted itself so you wind up with some yucky escaping
backslashes. Such is life. It won&#39;t work if you don&#39;t quote the value.&lt;/li&gt;
&lt;li&gt;This example introduces the &lt;em&gt;local settings list&lt;/em&gt;, which is a &lt;code&gt;let&lt;/code&gt;-style
list of Org configuration variables and their values that will be applied
only during the generation of that section of the composite view. In this
case, I am setting the value of &lt;code&gt;org-agenda-skip-function&lt;/code&gt; and
&lt;code&gt;org-agenda-overriding-header&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;org-agenda-skip-function&lt;/code&gt; is one of the coolest ideas; it allows you to
specify a function that will be called on each entry and the function can either
return &lt;code&gt;nil&lt;/code&gt; to display that entry, or return a character location to skip
to. This allows you to skip a single entry or even an entire subtree if some
criteria applies.&lt;/p&gt;
&lt;p&gt;I am using it here to skip all entries that are already marked DONE, because
once something is DONE, I don&#39;t need to work on it anymore and I don&#39;t want to
see it in my list. &lt;code&gt;org-agenda-skip-entry-if&lt;/code&gt; is a function provided for use in
these kinds of cases and I recommend reading its documentation for more details.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;org-agenda-overriding-header&lt;/code&gt; does what it sounds like: it changes the
header line of this agenda section to the string specified. Here&#39;s what it all
looks like together:&lt;/p&gt;
&lt;p&gt;{% img noborder /images/uploads/an-agenda-for-life-with-org-mode/composite-2.png %}&lt;/p&gt;
&lt;h4 id=&#34;filtering-the-eventually-list&#34;&gt;Filtering the &amp;ldquo;Eventually&amp;rdquo; List&lt;/h4&gt;
&lt;p&gt;Great, so now you have a section at the top for the stuff you want to do
immediately, a section showing a time-based view of what you need to accomplish
soon, and a list of all the other items on your TODO list (your &amp;ldquo;eventually&amp;rdquo;
items).&lt;/p&gt;
&lt;p&gt;Unfortunately, your &amp;ldquo;eventually&amp;rdquo; list now also contains the high-priority items
shown at the top, which is redundant and distracting. Let&#39;s filter priority &amp;ldquo;A&amp;rdquo;
items out of this list.&lt;/p&gt;
&lt;p&gt;I was optimistic that Org shipped with some skip function to skip over
priorities, but it doesn&#39;t. Oh well, time to write some elisp. Here&#39;s what I
came up with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-skip-subtree-if-priority (priority)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skip an agenda subtree if it has a priority of PRIORITY.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;PRIORITY may be one of the characters ?A, ?B, or ?C.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((subtree-end (save-excursion (org-end-of-subtree &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))
        (pri-value (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;line&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;=&lt;/span&gt; pri-value pri-current)
        subtree-end
      &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% infobox %}
As always, note that &lt;code&gt;air&lt;/code&gt; is simply a &amp;ldquo;namespace prefix&amp;rdquo; to ensure uniqueness
of the function name.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;The way priorities work internally is clever; the &amp;ldquo;lowest priority&amp;rdquo; is the upper
bounding ASCII value of the letters used, such that the difference of that value
and the entry&#39;s priority letter value multiplied by 1,000 is the numeric
priority.&lt;/p&gt;
&lt;p&gt;The default &amp;ldquo;lowest priority&amp;rdquo; value is 67, and the ASCII value of &amp;ldquo;A&amp;rdquo; is 65, so
the numeric value of priority &amp;ldquo;A&amp;rdquo; is 2,000, &amp;ldquo;B&amp;rdquo; (ASCII value 66) is 1,000, and
&amp;ldquo;C&amp;rdquo; (ASCII value 67) is 0.&lt;/p&gt;
&lt;p&gt;For whatever reason, there are no internal Org functions to easily extract just
the priority letter, but I wanted my function to accept the letter rather than
the numeric value so I just convert that to its corresponding number and use
&lt;code&gt;org-get-priority&lt;/code&gt; to compare the entry&#39;s value to the given one.&lt;/p&gt;
&lt;p&gt;For this one, I always skip the whole subtree. It hasn&#39;t bitten me yet, but it
is pretty easy to pivot it to skip only the current entry, or even provide an
option, so I might do that if I find out I&#39;m missing something.&lt;/p&gt;
&lt;p&gt;Let&#39;s apply this to our configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-custom-commands
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Simple agenda view&amp;#34;&lt;/span&gt;
         ((tags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PRIORITY=\&amp;#34;A\&amp;#34;&amp;#34;&lt;/span&gt;
                ((org-agenda-skip-function &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-agenda-skip-entry-if &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;todo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done&lt;/span&gt;))
                 (org-agenda-overriding-header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;High-priority unfinished tasks:&amp;#34;&lt;/span&gt;)))
          (agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
          (alltodo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
                   ((org-agenda-skip-function
                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(or (air-org-skip-subtree-if-priority ?A)
                          (org-agenda-skip-if &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(scheduled deadline))))))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two changes here. First, I&#39;m calling my new function to skip priority
&amp;ldquo;A&amp;rdquo; items. I also noticed that the &amp;ldquo;eventually&amp;rdquo; list contained items with
scheduled or deadline dates, which should appear in the middle section when
appropriate, so I filtered those out as well. Here&#39;s what it looks like:&lt;/p&gt;
&lt;p&gt;{% img noborder /images/uploads/an-agenda-for-life-with-org-mode/composite-3.png %}&lt;/p&gt;
&lt;p&gt;Note here that the skip function is a whole quoted lisp form that is evaluated
for each entry; it is not limited to a single function name. For this reason, it
is straightforward to create more complex logical rules without having to write
a function to encapsulate them. Here, I am using an &lt;code&gt;or&lt;/code&gt; to check both criteria.&lt;/p&gt;
&lt;h3 id=&#34;finally-habits&#34;&gt;Finally, Habits&lt;/h3&gt;
&lt;p&gt;You may already know that Org Mode supports TODO items that repeat. There are a
few ways that repeating schedules can be specified, so I recommend
&lt;a href=&#34;http://orgmode.org/manual/Repeated-tasks.html&#34;&gt;reading the full documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the most powerful ways of tracking repeated tasks is by using
&lt;strong&gt;habits&lt;/strong&gt;. A habit is something that you want to do on a regular basis, but
where you have flexibility in how regular the schedule is.&lt;/p&gt;
&lt;p&gt;Here, again, you may want to review the
&lt;a href=&#34;http://orgmode.org/manual/Tracking-your-habits.html&#34;&gt;full habits documentation&lt;/a&gt;. The example used in the documentation
is remembering to shave. It is not critical that you shave on any single, exact
day, but it may be important to you to shave within a loose cadence with a
couple of days of leeway.&lt;/p&gt;
&lt;p&gt;I use habits to track scheduling appointments like one-on-ones with my direct
reports. While it is very important that one-on-ones happen regularly, it is not
critical that they take place at exactly X days apart, and this gives me
flexibility to schedule more frequently with people who need more attention and
to work around my other appointments.&lt;/p&gt;
&lt;p&gt;To create a habit, you need two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;SCHEDULED&lt;/code&gt; tag with a repeat specification (like &lt;code&gt;.+&lt;/code&gt; or &lt;code&gt;++&lt;/code&gt;), and&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;STYLE&lt;/code&gt; property set to the value &lt;code&gt;habit&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the example from the documentation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;** TODO Shave
   SCHEDULED: &amp;lt;2009-10-17 Sat .+2d/4d&amp;gt;
   :PROPERTIES:
   :STYLE:    habit
   :LAST_REPEAT: [2009-10-19 Mon 00:36]
   :END:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The repeat specification, &lt;code&gt;.+2d/4d&lt;/code&gt; means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repeat as frequently as every two days, but&lt;/li&gt;
&lt;li&gt;Never less frequently than every four days, and&lt;/li&gt;
&lt;li&gt;When completed, start counting again from &lt;strong&gt;today&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you use &lt;code&gt;++&lt;/code&gt; instead of &lt;code&gt;.+&lt;/code&gt; it means &amp;ldquo;from the last date completed, count as
many 2-day intervals as necessary to find a date in the future.&amp;rdquo; This is useful
if you want something to always fall on the same days of the week, for example.&lt;/p&gt;
&lt;p&gt;You can use a plain &lt;code&gt;+&lt;/code&gt; repeat, which is unusual for a habit, because if you
fall quite behind you will need to complete the task as many times as it takes
for the next occurrence to get into the future. This would be useful for
something like paying your rent where you cannot skip any instances, but that
isn&#39;t really a habit, now is it?&lt;/p&gt;
&lt;p&gt;I love habits, but now we have another problem&amp;hellip; Habits appear with the
blue/green/red bar as shown in the screenshot at the top of this post when they
are listed in a daily or weekly agenda view, but because they are also regular
scheduled items, they appear in our &amp;ldquo;eventually&amp;rdquo; list with a lot less useful
detail.&lt;/p&gt;
&lt;p&gt;You know what time it is. Filtering time.&lt;/p&gt;
&lt;h4 id=&#34;filtering-habits&#34;&gt;Filtering Habits&lt;/h4&gt;
&lt;p&gt;Again I was really optimistic that Org provided some built-in function for
filtering by style or property&amp;hellip; But it doesn&#39;t. So here&#39;s my implementation of
a habit-skipping function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-skip-subtree-if-habit ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skip an agenda entry if it has a STYLE property equal to \&amp;#34;habit\&amp;#34;.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((subtree-end (save-excursion (org-end-of-subtree &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))))
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;string=&lt;/span&gt; (org-entry-get &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STYLE&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;habit&amp;#34;&lt;/span&gt;)
        subtree-end
      &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Org does provide helper functions for extracting property values and finding
locations relative to entries, so it was straightforward to write this. It would
be easy enough to parameterize the property value if you wanted to skip
different types of properties, but I don&#39;t have that use case (yet).&lt;/p&gt;
&lt;h2 id=&#34;the-final-agenda&#34;&gt;The Final Agenda&lt;/h2&gt;
&lt;p&gt;I&#39;ve covered almost everything, so finally here is the complete agenda composite
view command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-custom-commands
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Daily agenda and all TODOs&amp;#34;&lt;/span&gt;
         ((tags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PRIORITY=\&amp;#34;A\&amp;#34;&amp;#34;&lt;/span&gt;
                ((org-agenda-skip-function &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(org-agenda-skip-entry-if &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;todo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;done&lt;/span&gt;))
                 (org-agenda-overriding-header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;High-priority unfinished tasks:&amp;#34;&lt;/span&gt;)))
          (agenda &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; ((org-agenda-ndays &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
          (alltodo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
                   ((org-agenda-skip-function &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(scheduled deadline))))
                    (org-agenda-overriding-header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ALL normal priority tasks:&amp;#34;&lt;/span&gt;))))
         ((org-agenda-compact-blocks &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are just a couple of things in here that I haven&#39;t mentioned specifically,
so let me do that.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Both TODO sections use &lt;code&gt;org-agenda-overriding-header&lt;/code&gt;, which I previously
described.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;agenda&amp;rdquo; section in the middle also specifies &lt;code&gt;org-agenda-ndays&lt;/code&gt; with a
value of 1, because I only want to see one day at a time. If you have been
coding along with this you might have wondered how to get rid of all the
other days of the week&amp;hellip; This is how.&lt;/li&gt;
&lt;li&gt;There is a final settings list at the end containing
&lt;code&gt;org-agenda-compact-blocks&lt;/code&gt;. Settings in this list apply to the entire
composite view, and this setting removes the equal sign dividers between the
sections, because I think they&#39;re a waste of space.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congratulations, you now probably know more about building Org Mode agenda
commands and composite views than most people. I hope that these tools give you
the ability to confidently tackle the tasks in your life and give you a sense of
peace.&lt;/p&gt;
&lt;h2 id=&#34;navigating-your-agenda&#34;&gt;Navigating Your Agenda&lt;/h2&gt;
&lt;p&gt;The agenda view is pretty amazing, and it&#39;s very useful as a read-only overview
of what you need to get done, but the journey doesn&#39;t stop there because the
agenda is also &lt;em&gt;completely interactive&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ve tweaked my configuration to make the agenda view easy to navigate and
interact with, optimized for my common use cases, and I&#39;m going to get into that
in depth in my next post, so stay tuned!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>getting started with emacs lisp</title>
       <link>http://example.org/post/2016/08/07t154738/0400/getting-started-with-emacs-lisp/</link>
       <pubDate>Sun, 07 Aug 2016 15:47:38 -0400</pubDate>
       
       <guid>http://example.org/post/2016/08/07t154738/0400/getting-started-with-emacs-lisp/</guid>
       <description>&lt;p&gt;As you certainly know by now, I was an outspoken and enthusiastic Vim user for
about 15 years. During that time, I tried Emacs a couple of times, but it didn&#39;t
really stick until last year. One of the reasons Emacs makes me so happy is its
Lisp-based extension language (Emacs Lisp, or just Elisp for short).&lt;/p&gt;
&lt;p&gt;I do not have a formal background in computer science, so I never had the
experience of being forced to do exercises in Scheme or Lisp; Elisp is the first
(and only) Lisp I&#39;ve ever learned. For that reason, I&#39;m sure I went about it all
wrong, but I think I know it pretty well now and I want to share with you some
of the tricks and concepts I&#39;ve learned so you can hopefully have an easier time
than I did.&lt;/p&gt;
&lt;p&gt;Introductory Lisp articles abound, so I will try to focus on the Emacs features
and functions that make Elisp development unique.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;lisp-interaction-mode&#34;&gt;Lisp Interaction Mode&lt;/h2&gt;
&lt;p&gt;The best way I&#39;ve found to start playing with Elisp or to experiment with
creating new functions is to use the aptly named &amp;ldquo;scratch buffer.&amp;rdquo; When you
start Emacs, a scratch buffer is always created for you, and its name is,
appropriately, &lt;code&gt;*scratch*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The scratch buffer is set to Lisp Interaction Mode, which is derived from Emacs
Lisp Mode, which itself is derived from Prog Mode (the parent of all
&amp;ldquo;programming&amp;rdquo; modes). Lisp Interaction Mode changes only a couple of things from
Emacs Lisp Mode, but its intent is to make it easier to type in and actually
interact with Emacs Lisp code.&lt;/p&gt;
&lt;p&gt;This mode will become your best friend as you begin to find your way around the
expansive world of the Emacs Lisp language.&lt;/p&gt;
&lt;h2 id=&#34;essential-bindings&#34;&gt;Essential Bindings&lt;/h2&gt;
&lt;p&gt;There are a few massively useful functions available in Lisp Interaction Mode
that you really need easy key bindings for, because you will use them all the
time. The first is &lt;code&gt;eval-last-sexp&lt;/code&gt;, which evaluates the S-expression (or
&amp;ldquo;sexp&amp;rdquo;) right before the cursor. I have two bindings for this one, which I&#39;ll
talk a little bit about.&lt;/p&gt;
&lt;p&gt;First, for any Emacs user, I think that &lt;code&gt;&amp;lt;C-return&amp;gt;&lt;/code&gt; is a nice key combo for
this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(define-key lisp-interaction-mode-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;C-return&amp;gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eval-last-sexp&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Evil Mode users out there, it is important to note that &lt;code&gt;eval-last-sexp&lt;/code&gt;
evaluates the expression immediately &lt;em&gt;behind&lt;/em&gt; point, which means it only works
predictably while in insert mode (when the cursor is a pipe style and you can
see which character is immediately behind it).&lt;/p&gt;
&lt;p&gt;For that reason, I have an insert mode binding to run &lt;code&gt;eval-last-sexp&lt;/code&gt;, but I
use the same key in normal mode to run &lt;code&gt;eval-defun&lt;/code&gt;, which evaluates the entire
function definition that point is within the bounds of.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(evil-define-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;insert&lt;/span&gt; global-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s-d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eval-last-sexp&lt;/span&gt;)
(evil-define-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;normal&lt;/span&gt; global-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s-d&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eval-defun&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, Lisp Interaction Mode by default binds &lt;code&gt;C-j&lt;/code&gt; to another useful
function, &lt;code&gt;eval-print-last-sexp&lt;/code&gt;, which evaluates the S-expression behind point
and then &lt;em&gt;prints its return value into the buffer&lt;/em&gt;. This is really handy for
debugging things.&lt;/p&gt;
&lt;h2 id=&#34;a-contrived-example&#34;&gt;A Contrived Example&lt;/h2&gt;
&lt;p&gt;Often, before I even set about writing a new function, I want to prove that I
can accomplish some task or that I can find existing functions to glue together
that will do what I need. Lisp Interaction Mode is a perfect platform for this
exploration.&lt;/p&gt;
&lt;p&gt;As an example, let&#39;s pretend that we want to write a function to count the
frequency of words used in a buffer. The result of the function should be an
&lt;em&gt;association list&lt;/em&gt; (&amp;ldquo;alist&amp;rdquo; for short) where the keys are the words in the
buffer and the values are the counts of how many times each word appears.&lt;/p&gt;
&lt;p&gt;The basic approach that I think I want to use, without writing any code yet, is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an empty alist, then&lt;/li&gt;
&lt;li&gt;From the beginning of the buffer,&lt;/li&gt;
&lt;li&gt;Search forward for a word using a regular expression search, and&lt;/li&gt;
&lt;li&gt;If the word is already in our alist, increment the count, otherwise&lt;/li&gt;
&lt;li&gt;Add the word to the alist with a count of 1.&lt;/li&gt;
&lt;li&gt;Finally, return the alist sorted in descending order by frequency.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To do this, I know I need a few functions based on my prior experience. At a
minimum, I probably need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;save-excursion&lt;/code&gt; to let me move around in the buffer without leaving point or
mark in different locations after I&#39;m done. This isn&#39;t critical for the
function to work, but it&#39;s polite to use it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; to bind some local variables to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;re-search-forward&lt;/code&gt; to perform the regular expression search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;push&lt;/code&gt; to build up an association list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt; to do the sorting at the end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I remember most of these function names because I&#39;ve used them before, but I
usually don&#39;t remember the exact arguments they take. That&#39;s OK, though, because
Emacs Lisp is self-documenting and all of the standard library functions are
extremely well-documented.&lt;/p&gt;
&lt;p&gt;A good example here is &lt;code&gt;re-search-forward&lt;/code&gt;, which takes several arguments, and I
can&#39;t remember the order. Look up the function by typing &lt;code&gt;C-h f re-search-forward RET&lt;/code&gt;. Your eyes will rapidly glaze over with a layer of real
human tears as you behold a split window containing a practical explanation of
how this function operates.&lt;/p&gt;
&lt;p&gt;OK, let&#39;s start with a very rough little expression that we can use to prove
that this idea works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(save-excursion
  (goto-char &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
  (re-search-forward &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\w+&amp;#34;&lt;/span&gt; (point-max) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
  (match-string-no-properties &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This expression saves the location of point, moves to the very beginning of the
buffer, searches forward for a &amp;ldquo;word&amp;rdquo; (using a naive pattern matching any
sequence of one or more word characters), and then returns the matched string
with no text properties.&lt;/p&gt;
&lt;p&gt;Just a few minor points here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I mess around with the contents of &lt;code&gt;*scratch*&lt;/code&gt; all the time while
testing. It&#39;s probably a good idea to go ahead and make the buffer start with
a single word before running this code.&lt;/li&gt;
&lt;li&gt;I didn&#39;t describe all of the arguments to &lt;code&gt;re-search-forward&lt;/code&gt;, but I showed
you how to look up functions. Hint hint.&lt;/li&gt;
&lt;li&gt;The same goes for &lt;code&gt;match-string-no-properties&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can now run this code in two ways. First, you can position point at the end
of the expression (at the end of the last line), (if you&#39;re an Evil user,
make sure you&#39;re in &lt;strong&gt;insert mode&lt;/strong&gt;), and press &lt;code&gt;C-&amp;lt;return&amp;gt;&lt;/code&gt; (using my binding
from up above). The result will be printed in the minibuffer.&lt;/p&gt;
&lt;p&gt;Second, you can press &lt;code&gt;C-j&lt;/code&gt; and the result will be printed into the buffer
itself. This is useful if you want to grab that value and actually use it for
something else. Most of the time, I use &lt;code&gt;C-&amp;lt;return&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you evaluate this expression with &lt;code&gt;C-&amp;lt;return&amp;gt;&lt;/code&gt;, the first word in the buffer
should be printed in the &lt;em&gt;minibuffer&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;
&lt;p&gt;We now have a piece of code that can find the first word in the buffer, so the
next step is to see if we can find &lt;em&gt;all&lt;/em&gt; of the words in the buffer. To do this,
let&#39;s evaluate the search as part of a &lt;em&gt;while loop&lt;/em&gt;. I think this will work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(save-excursion
  (goto-char &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
  (while (re-search-forward &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\w+&amp;#34;&lt;/span&gt; (point-max) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
    (match-string-no-properties &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only problem is, if you run this piece of code, it will happily go about its
business matching words (hopefully) and give you no feedback at all. Well, if it
works perfectly, it will finally return the very last word matched, but there is
a lot of uncertainty there.&lt;/p&gt;
&lt;p&gt;Rather than being uncertain, I always prefer to be certain. The simplest way to
reach certainty with this loop is with &lt;em&gt;a crash course in the Elisp debugger&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can trigger the debugger by calling &lt;code&gt;debug&lt;/code&gt;, so let&#39;s do that within the
loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(save-excursion
  (goto-char &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
  (while (re-search-forward &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\w+&amp;#34;&lt;/span&gt; (point-max) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
    (debug)
    (match-string-no-properties &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you evaluate this statement, the debugger window will open
immediately. There are only a couple of keystrokes in the debugger that you need
to know, and those are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;: Step through&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;: Continue&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt;: Eval expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt;: Top level (debugger code word for &amp;ldquo;quit&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several other commands, and as always you can learn about them by
pressing &lt;code&gt;C-h m&lt;/code&gt; from the debugger window to open the help for the current
mode.&lt;/p&gt;
&lt;p&gt;When you enter the debugger, the &lt;code&gt;(while)&lt;/code&gt; expression is at the top of the stack
(because you broke within in). Press &lt;code&gt;d&lt;/code&gt; repeatedly to step through the code and
observe the return values of each expression.&lt;/p&gt;
&lt;p&gt;To prove that our code works, we can press &lt;code&gt;d&lt;/code&gt; to step into the
&lt;code&gt;match-string-no-properties&lt;/code&gt; call. Pressing &lt;code&gt;d&lt;/code&gt; again steps into
&lt;code&gt;buffer-substring-no-properties&lt;/code&gt;, which is used internally to get the text from
the buffer, and then pressing &lt;code&gt;d&lt;/code&gt; a third and final time reveals the return
value of the expression on the top line of the debugger. Hopefully that is the
first word in your scratch buffer!&lt;/p&gt;
&lt;p&gt;You can repeat this process a couple of times to see that the while loop is
matching subsequent words in the buffer. &lt;strong&gt;Certainty restored!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;building-the-association-list&#34;&gt;Building the Association List&lt;/h2&gt;
&lt;p&gt;The final piece of the puzzle is to accumulate the counts of these words in an
association list that we can ultimately sort and return. Elisp does have support
for a proper hash table data structure, but for this toy it seemed too heavy, so
I went with the association list approach.&lt;/p&gt;
&lt;p&gt;There are a couple of caveats that I&#39;ll try to explain, but the point of this
exercise is not to learn all of the ins and outs of Elisp, but rather to give
you the tools you need to figure things out for yourself.&lt;/p&gt;
&lt;p&gt;Before going any further, I&#39;d like to introduce you to a little guy called
&lt;code&gt;let&lt;/code&gt;. You will see &lt;code&gt;let&lt;/code&gt; used all the time in Elisp code and it&#39;s important to
understand what it does. The &lt;code&gt;let&lt;/code&gt; form allows you to bind variables that only
retain their values within that form. As an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((foo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
      (bar &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;World!&amp;#34;&lt;/span&gt;))
  (message &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s %s&amp;#34;&lt;/span&gt; foo bar))

(message foo)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Evaluating the first expression will print &amp;ldquo;Hello World!&amp;rdquo; in the minibuffer, but
if you evaluate that entire block, the second form will result in an error
because the symbol &lt;code&gt;foo&lt;/code&gt; is not bound to any value outside of the &lt;code&gt;let&lt;/code&gt;
form. This gives you a way to create, essentially, &amp;ldquo;local&amp;rdquo; variables. It is
polite to do this so that you don&#39;t clutter Emacs&amp;rsquo; symbol table with temporary
stuff.&lt;/p&gt;
&lt;p&gt;We&#39;ll use &lt;code&gt;let&lt;/code&gt; to create a variable to hold our return value (which we&#39;ll call
&lt;code&gt;words&lt;/code&gt;), and then in each loop we&#39;ll either increment the value of the word&#39;s
existing count or we&#39;ll push the new word onto the list.&lt;/p&gt;
&lt;p&gt;Here&#39;s what the final function looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((words))
  (save-excursion
    (goto-char &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    (while (re-search-forward &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\w+&amp;#34;&lt;/span&gt; (point-max) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((word (match-string-no-properties &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
        (cl-incf (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; (or (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; word words)
                          (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; (push (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; word &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) words)))))))
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;reverse&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt; words (lambda (a b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; b)))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are a couple of things worth explaining, but I&#39;ll leave the rest of the
code interpretation as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cl-incf&lt;/code&gt; is a &lt;em&gt;Lisp macro&lt;/em&gt; provided by a library called &lt;code&gt;cl-lib.el&lt;/code&gt;. This
library provides a ton of useful functions that are found in the more powerful
Common Lisp language and many Emacs packages depend on it. &lt;code&gt;cl-lib.el&lt;/code&gt; is now
part of Emacs, so you can freely use these macros and functions.&lt;/p&gt;
&lt;p&gt;{% infobox %}
Many of the functions and macros in &lt;code&gt;cl-lib.el&lt;/code&gt; are also aliased to their names
without the &lt;code&gt;cl-&lt;/code&gt; prefix (e.g. &lt;code&gt;incf&lt;/code&gt;). &lt;em&gt;You are strongly encouraged&lt;/em&gt; to use the
&lt;code&gt;cl-&lt;/code&gt; prefixed versions! Some day the aliases may be deprecated, so heed my
warning.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;Congratulations, you just built an Elisp expression that returns a sorted word
frequency for the current buffer. This is useful, but you&#39;ll probably want to be
able to run this code on demand, either by pressing a key or through a menu. To
do that, we should put it into a function.&lt;/p&gt;
&lt;h2 id=&#34;creating-functions&#34;&gt;Creating Functions&lt;/h2&gt;
&lt;p&gt;Creating a function is very easy with the &lt;code&gt;defun&lt;/code&gt; macro; you simply wrap up your
S-expression and provide a list of arguments and a documentation string and
you&#39;re off to the races.&lt;/p&gt;
&lt;p&gt;Here is what ours might look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air--get-word-frequency ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Return an alist with counts for all words in the current buffer.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((words))
    (save-excursion
      (goto-char &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
      (while (re-search-forward &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\w+&amp;#34;&lt;/span&gt; (point-max) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
        (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((word (match-string-no-properties &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))
          (cl-incf (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; (or (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; word words)
                            (&lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; (push (&lt;span style=&#34;color:#a6e22e&#34;&gt;cons&lt;/span&gt; word &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) words)))))))
      (&lt;span style=&#34;color:#a6e22e&#34;&gt;reverse&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt; words (lambda (a b) (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; a) (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; b))))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you evaluate this expression, the function &lt;code&gt;air--get-word-frequency&lt;/code&gt; will be
created, and you&#39;ll be able to look up its definition with &lt;code&gt;C-h f air--get-word-frequency RET&lt;/code&gt; just like any other function.&lt;/p&gt;
&lt;p&gt;There is no &amp;ldquo;return&amp;rdquo; statement in Elisp; functions return the last value
evaluated, so in this case the result of evaluating &lt;code&gt;reverse&lt;/code&gt; becomes the
function&#39;s return value.&lt;/p&gt;
&lt;p&gt;Note that I have used my typical &lt;code&gt;air&lt;/code&gt; prefix, which helps keep my functions
separate from those of Emacs itself and all of my installed packages. If you&#39;re
writing code to share, it&#39;s polite to use a unique prefix string of some kind.&lt;/p&gt;
&lt;p&gt;You&#39;ll also notice that I have used two hyphens after my unique prefix. This is
an Elisp convention that indicates that this function is not meant to be used
outside of its package. I have done this because this function returns a raw
alist; it isn&#39;t very useful to call on its own, and Emacs will truncate that
data when displaying it to you.&lt;/p&gt;
&lt;p&gt;To make this function more useful, let&#39;s make a separate function that we can
call from a key binding that will display the results in a human-readable
way. This will also introduce some other wonderful Elisp helpers.&lt;/p&gt;
&lt;h2 id=&#34;interactive-functions&#34;&gt;Interactive Functions&lt;/h2&gt;
&lt;p&gt;This is what our callable function looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-show-word-frequency ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Display a word frequency analysis for the current buffer.&amp;#34;&lt;/span&gt;
  (interactive)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((buf (get-buffer-create &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*Word Frequency*&amp;#34;&lt;/span&gt;))
         (word-freq (air--get-word-frequency))
         (text (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Word\t\tCount\n----\t\t-----\n&amp;#34;&lt;/span&gt;
                       (mapconcat (lambda (word)
                                    (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s\t\t%s&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; word) (&lt;span style=&#34;color:#a6e22e&#34;&gt;cdr&lt;/span&gt; word)))
                                  word-freq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;))))
    (with-current-buffer buf
      (erase-buffer)
      (insert text)
      (goto-char &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
    (pop-to-buffer buf)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are some new and interesting things going on here, and I invite you to
explore and experiment, but I will explain the most important ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;interactive&lt;/code&gt; call immediately after the docstring is &lt;strong&gt;required&lt;/strong&gt; if
you wish to call this function from a key binding. For more information about
this interesting and useful function, press &lt;code&gt;C-h f interactive RET&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am using a modified form of &lt;code&gt;let&lt;/code&gt; called &lt;code&gt;let*&lt;/code&gt;. The star version forces
each symbol assignment to occur &lt;em&gt;in the order written&lt;/em&gt;. Note that the value of
&lt;code&gt;text&lt;/code&gt; refers to the value of &lt;code&gt;word-freq&lt;/code&gt;; if you do not use a &lt;code&gt;let*&lt;/code&gt; form,
you can (and likely will) get &amp;ldquo;unbound symbol&amp;rdquo; errors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will notice right away that I&#39;m creating a new buffer for this. Buffers are
like the national currency of Emacs; they are used for much more than simply
displaying information to the user, although that is one of their primary
functions.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;with-current-buffer&lt;/code&gt; form is a convenient way to evaluate expressions with
the named buffer temporarily &amp;ldquo;current.&amp;rdquo; Functions like &lt;code&gt;insert&lt;/code&gt; operate on the
current buffer, so this gives you a way to say &amp;ldquo;go run all of these things
against the other buffer, then set everything back the way it was.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Now you can go ahead and bind a key to this function, if you want. You would
accomplish that using &lt;code&gt;define-key&lt;/code&gt;, for example, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(define-key global-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c w c&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-show-word-frequency&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can evaluate that expression and then press &lt;code&gt;C-c w c&lt;/code&gt; to show the word count
for the current buffer.&lt;/p&gt;
&lt;h2 id=&#34;congratulations&#34;&gt;Congratulations!&lt;/h2&gt;
&lt;p&gt;You&#39;ve made it through another &lt;strong&gt;2,900 words&lt;/strong&gt; about Emacs! Your dedication and
attention are literally awe-inspiring.&lt;/p&gt;
&lt;p&gt;If you have followed along closely, you now know how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interact with Elisp code live, within Emacs,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug Elisp code interactively using Debugger Mode, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define Elisp functions that you can call from other functions and
interactively from key bindings&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should also have learned some new Elisp tricks for working with alists,
buffers, and more! There are so many functions in the standard library that it
will take you some time to get comfortable. Always remember to use the &lt;code&gt;C-h f&lt;/code&gt;
menu to search for commands (this is easier if you&#39;re using Helm, &lt;em&gt;which you
really should be&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;If I&#39;ve left any stones un-turned, please leave a comment below. Do me a favor,
though, and explore on your own before asking for Elisp help; I&#39;m happy to
provide assistance, but try Google first!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>what is good software</title>
       <link>http://example.org/post/2016/08/06t100654/0400/what-is-good-software/</link>
       <pubDate>Sat, 06 Aug 2016 10:06:54 -0400</pubDate>
       
       <guid>http://example.org/post/2016/08/06t100654/0400/what-is-good-software/</guid>
       <description>&lt;p&gt;I&#39;m an opinionated software engineer. I have strongly held beliefs about what
makes a program good or bad (as I imagine most programmers do) but as a Vim user
for 15 years who changed camps to Emacs, I&#39;m on the front lines of a turf war
that shows no signs of calming.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I believe strongly that &amp;ldquo;good software&amp;rdquo; is that which is fit for its intended
purpose, and that has both benevolent maintainership and a strong
community. Because there is nuance of interpretation in these words, I decided
to write more.&lt;/p&gt;
&lt;p&gt;Fair warning: this post is long.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;When I say that Emacs is &amp;ldquo;better software&amp;rdquo; than Vim, I am not only remarking on
the well-known instances of &lt;a href=&#34;http://geoff.greer.fm/vim/&#34;&gt;total insanity&lt;/a&gt; in Vim&#39;s codebase, but
more importantly on the Vim project&#39;s reluctance to implement modern features
even in the face of broad and vehement user support and its uncertain future as
a project owing to its sole maintainer&#39;s neglect of organizational foresight.&lt;/p&gt;
&lt;p&gt;Let&#39;s examine the strongest concrete example in recent events.&lt;/p&gt;
&lt;h2 id=&#34;the-quest-for-background-processing&#34;&gt;The Quest for Background Processing&lt;/h2&gt;
&lt;p&gt;As a proxy for the concept of &amp;ldquo;fitness for a particular purpose,&amp;rdquo; I want to talk
about the ability of text editors to run background or asynchronous processes.&lt;/p&gt;
&lt;p&gt;Perhaps the most coveted feature that the Vim project refused to add is support
for some manner of asynchronous process handling, or an event loop, or job
management, or something like that. For many years I suffered as Vim&#39;s single
process froze up completely while the Syntastic plug-in was running a syntax
checker on the large file I was editing.&lt;/p&gt;
&lt;p&gt;Vim users begged for the ability to run a process in the background and receive
its output in a VimL callback function. A Yahoo engineer named Jonathan Palardy
wrote &lt;a href=&#34;https://github.com/jpalardy/vim-slime&#34;&gt;slime.vim&lt;/a&gt; to send commands or text from Vim to another
console or pane within GNU Screen (and someone else adapted it for
Tmux). Ironically, Jonathan&#39;s slime.vim is named for the
&lt;a href=&#34;https://en.wikipedia.org/wiki/SLIME&#34;&gt;Emacs package called SLIME&lt;/a&gt;, which provides an in-editor REPL for
Common Lisp languages.&lt;/p&gt;
&lt;p&gt;Intrepid Vim contributors even submitted patches to solve the problem. All
attempts to make this dream a reality were turned away by Vim&#39;s creator and sole
maintainer, Bram Moolenaar.&lt;/p&gt;
&lt;p&gt;Such was the state of affairs in the Vim world until January 31, 2014 when a
young man by the name of Thiago de Arruda (&lt;a href=&#34;https://github.com/tarruda&#34;&gt;tarruda&lt;/a&gt; on Github) boldly
forked Vim and set out on a project he named NeoVim. In the world of open source
software, a fork is either a compliment or an insult. I love it when people fork
my projects because they are small and mostly unimportant, and usually it means
that someone wants to contribute or cares enough that they want to play with
customizing it themselves.&lt;/p&gt;
&lt;p&gt;For Vim to be forked, though, in such an earnest manner, and with the intent not
to submit patches but to diverge into a separate project, was one of the first
real markers of bad project health.&lt;/p&gt;
&lt;p&gt;The NeoVim project has had several releases beginning in late 2014 and is now
considered to be quite stable, though it is still far from version 1.0. In the
short time that the project has existed, it not only removed legacy preprocessor
definitions and modernized the make system, but it added support for
asynchronous job control, Lua scripting, and all sorts of other features that
Vim users worldwide had only dreamed of.&lt;/p&gt;
&lt;p&gt;It was just as NeoVim was reaching usable stability and gaining traction as a
very real competitor to Vim that I began experimenting with Emacs and eventually
&lt;a href=&#34;https://www.youtube.com/watch?v=JWD1Fpdd4Pc&#34;&gt;gave the talk that made me (briefly) Internet famous&lt;/a&gt;. As a result, I
never actually tried NeoVim myself (and quite honestly I have no interest in
using it, though I&#39;m still interested in its success as a project).&lt;/p&gt;
&lt;p&gt;When I picked up Emacs, I discovered that it had all of the features that Vim
lacked. Though my first couple of attempts in years past had been fraught with
challenges that deterred me, I finally got Evil Mode working properly and
swiftly discovered an equilibrium between Vim&#39;s modal editing and Emacs&amp;rsquo;
peculiar modifier key karate.&lt;/p&gt;
&lt;p&gt;Finally, in July of this year, one and a half years after NeoVim&#39;s inception,
Bram Moolenaar &lt;a href=&#34;https://github.com/vim/vim/blob/master/runtime/doc/version8.txt&#34;&gt;announced Vim 8.0&lt;/a&gt;. It now includes jobs, timers,
partials (what I interpret to be a type of closure, sort of), lambdas, and
&lt;em&gt;actual package support&lt;/em&gt;. I can no longer say that Bram did not listen, but I
can still criticize his early unwillingness and his &amp;ldquo;father knows best&amp;rdquo; attitude
about code contributions.&lt;/p&gt;
&lt;h2 id=&#34;project-health&#34;&gt;Project Health&lt;/h2&gt;
&lt;p&gt;Emacs is great because it is at least as stable and mature as Vim, which it owes
to its age and equally massive worldwide deployment, but it is also responsive
to users&amp;rsquo; requests and welcoming of their patches (sort of), and is even
entering a bit of a renaissance as younger technologists discover that it is not
simply Richard Stallman&#39;s altar to the principled but often stifling philosophy
of the GNU project, but a very capable and modern program indeed.&lt;/p&gt;
&lt;p&gt;As a software project, Vim sucks because its creator and sole maintainer, Bram
Moolenaar, keeps a deadly strangle-hold on the project and reserves the right of
first refusal to incorporate enhancements or changes from the community. As I&#39;ve
cited many times in the past, Bram went as far as to say, in not as many words,
that the best way to keep the Vim project alive is &lt;em&gt;to keep him alive&lt;/em&gt;, which
implies that he has no interest in sharing that responsibility with the vibrant
community that grew around his project.&lt;/p&gt;
&lt;p&gt;In contrast, the Emacs project has changed maintainers no fewer than two times
since Richard Stallman wrote the program originally. Not only is this a
testament to the breadth of the Emacs community, that we could find not one, and
not even two, but three qualified and motivated individuals to steer the project
toward its community&#39;s common goals, but indeed a sign of the project&#39;s
health. We can sleep easily knowing that the Emacs project possesses the ability
to pass the baton quite effectively should it become necessary.&lt;/p&gt;
&lt;p&gt;When Bram Moolenaar is no longer maintaining Vim, for whatever reason, who will
step up to the plate? Who will vet them? How will the community organize itself?
Bram has not taken any steps to build a community ecosystem around his project
and when the day comes that he is no longer in control, we can only guess at
what may happen.&lt;/p&gt;
&lt;p&gt;My prediction is that Vim development will slow to a crawl, ultimately doing
nothing more than keeping up with security and stability patches, and that
NeoVim will become the &lt;em&gt;de facto&lt;/em&gt; standard for the general public.&lt;/p&gt;
&lt;h2 id=&#34;extensibility-wins-the-day&#34;&gt;Extensibility Wins the Day&lt;/h2&gt;
&lt;p&gt;The final point I will make in my now extremely long-winded treatise on the
shape of great software, which has since devolved into yet another diatribe
pitting Vim against Emacs on a playing field of personal opinion, is that
extensibility is the single most important mechanism for solving most, if not
all, of the disparities between these projects.&lt;/p&gt;
&lt;p&gt;Vim is extensible through modification of its C code and through scripting in
its built-in programming language called, officially or unofficially,
VimL. Emacs is extensible through modification of its C code and through
scripting in its built-in programming language called Emacs Lisp, a slimmer
variant of Common Lisp.&lt;/p&gt;
&lt;p&gt;Comparing VimL to Emacs Lisp is hardly fair; one is essentially an eccentric and
fairly limited DSL with demonstrable performance concerns, and the other is a
complete programming language in which approximately 3/4 of the stock program&#39;s
functionality is implemented. You can do a lot in both of them, but VimL is
limited in its usefulness because the majority of the way the program itself
functions is below the VimL level, in the C code. Emacs, on the other hand,
implements most of its editor behavior in Emacs Lisp and has a rich array of
event hooks and a sort of &amp;ldquo;mix-in&amp;rdquo; system for hooking user-defined functions
onto or around existing ones. The net effect is that nearly anything in Emacs
can be changed, easily.&lt;/p&gt;
&lt;p&gt;Of course this rings true to anyone familiar with the pejorative expression
claiming that &amp;ldquo;Emacs is a great operating system, lacking only a decent editor.&amp;rdquo;
It&#39;s fair to say that it is possible to change Emacs in such dramatic ways that
its flexibility can be almost comical when wielded without reason, but you only
need to struggle with the desire to change some simple key mapping behavior or
margin drawing functionality in Vim for a few hours before you start to
appreciate the judicious application of hooks into lower-level functions.&lt;/p&gt;
&lt;p&gt;The net effect of this is that the core maintainers of Emacs can refuse to
implement certain features and, for the most part, the community can step in and
do it themselves. Because VimL&#39;s capabilities are much more limited, features
like job management have taken years to make it into the hands of users.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;What Michael says above is true, but the difference is that Evil Mode is
implemented in pure Emacs Lisp and did not need the blessing of the project&#39;s
maintainers to get into the hands of its users. The timeline is coincidental;
Evil Mode could have been created at any time. Vim 8&#39;s new features had to wait
until Bram could see far enough beyond his crippling hubris to descent from
Mount Olympus with a patch in his hands.&lt;/p&gt;
&lt;p&gt;In conclusion, great software is defined by more than its objective code
quality; I would even go so far as to say that code quality is one of the least
important characteristics of software. Especially in open source, the greatness
of software lies in its ability to meet the needs of its users, and in its
leadership and community to adapt to the changing landscape around it.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>org navigation revisited</title>
       <link>http://example.org/post/2016/07/31t115616/0400/org-navigation-revisited/</link>
       <pubDate>Sun, 31 Jul 2016 11:56:16 -0400</pubDate>
       
       <guid>http://example.org/post/2016/07/31t115616/0400/org-navigation-revisited/</guid>
       <description>&lt;p&gt;In my previous post, [Playing Tag in Org Mode][tag], I talked about leveraging
Org Mode&#39;s powerful tag system to help you find the notes or references you&#39;re
looking for.&lt;/p&gt;
&lt;p&gt;Since then, I&#39;ve refined my use of tags and begun making better use of Org
Mode&#39;s custom ID abilities. In this post, I&#39;ll share the new navigation code
I&#39;ve written and show you how you can use custom IDs to link or jump directly to
a specific item in your notes.&lt;/p&gt;
&lt;p&gt;Also, as a special treat, I will debut my latest Emacs package,
[Tiny Menu][tiny-menu] (available right now on MELPA).&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;custom-ids&#34;&gt;Custom IDs&lt;/h2&gt;
&lt;p&gt;Org Mode understands the notion of IDs, though by default I believe it only uses
the primary &lt;code&gt;ID&lt;/code&gt; property for synchronizing items with Mobile Org, a facility
that to my mind is sorely lacking in functionality and that I abandoned long
ago.&lt;/p&gt;
&lt;p&gt;Fortunately, there is also a property called &lt;code&gt;CUSTOM_ID&lt;/code&gt;. Now, for the purposes
of this exercise it actually doesn&#39;t matter what the property field is called;
since I had to write a function to enumerate the property values myself, you
could just as easily use a property with a different name.&lt;/p&gt;
&lt;p&gt;The goal is to give certain Org headings &lt;strong&gt;unique&lt;/strong&gt; IDs and then create functions
for easily:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jumping to the item with that ID, and&lt;/li&gt;
&lt;li&gt;Dropping an Org link at point to a selected ID.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&#39;s start at the very beginning.&lt;/p&gt;
&lt;h3 id=&#34;applying-custom-ids&#34;&gt;Applying Custom IDs&lt;/h3&gt;
&lt;p&gt;To apply a custom ID to an item, simply call &lt;code&gt;org-set-property&lt;/code&gt; with point on
the item&#39;s heading or within its content area. I have that function bound to
&lt;code&gt;&amp;lt;leader&amp;gt;p&lt;/code&gt; using Evil Leader, but to each their own.&lt;/p&gt;
&lt;p&gt;If you are using Helm (&lt;em&gt;which you really should be&lt;/em&gt;), you will be presented with
a list of possible properties, and among them is &lt;code&gt;CUSTOM_ID&lt;/code&gt;. Select that
property and you will then be prompted for its value. It&#39;s up to you to keep the
ID properties unique. If you are using Helm (&lt;em&gt;which you really should be&lt;/em&gt;), you
will see a narrowing list of values for this property and you&#39;ll know that your
new value is unique because it will narrow to &lt;strong&gt;nothing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once applied, your new property should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;* First item
  :PROPERTIES:
  :CUSTOM_ID: note-first-item
  :END:
  
  The first item&amp;#39;s content appears here.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Congratulations, you can now apply &lt;code&gt;CUSTOM_ID&lt;/code&gt; properties to your notes! That&#39;s
swell, but how does this help you?&lt;/p&gt;
&lt;h2 id=&#34;jumping-to-custom-ids&#34;&gt;Jumping to Custom IDs&lt;/h2&gt;
&lt;p&gt;The most useful thing about unique custom IDs, for me, is jumping directly to a
specific ID. I am an engineering manager and I have many people reporting to me,
about whom I keep notes of our one-on-ones, reminders about their vacations, and
so forth. Each person has a heading in my Org notes file and their &lt;code&gt;CUSTOM_ID&lt;/code&gt;
value is their Active Directory username (e.g. email name) preceded with &lt;code&gt;@&lt;/code&gt;. By
means of example, my custom ID would be &lt;code&gt;@abieber&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a perfect use of custom IDs because our Active Directory usernames must
be unique across the organization and through time (AD names are not, at this
point, ever recycled), so I don&#39;t need to worry about the uniqueness myself.&lt;/p&gt;
&lt;p&gt;To jump to a custom ID, you need two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A catalog of all of the custom IDs that exist in all of your agenda files,
and&lt;/li&gt;
&lt;li&gt;A function for selecting the ID and then jumping to it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Don&#39;t worry, I&#39;ve already written them for you.&lt;/p&gt;
&lt;h3 id=&#34;enumerate-all-custom-id-properties&#34;&gt;Enumerate All Custom ID Properties&lt;/h3&gt;
&lt;p&gt;Based heavily upon an existing Org Mode function for enumerating &lt;code&gt;ID&lt;/code&gt;
properties, I&#39;ve created a &amp;ldquo;global custom IDs&amp;rdquo; function, shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air--org-global-custom-ids ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Find custom ID fields in all org agenda files.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((files (org-agenda-files))
        file
        air-all-org-custom-ids)
    (while (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; file (pop files))
      (with-current-buffer (org-get-agenda-file-buffer file)
        (save-excursion
          (save-restriction
            (widen)
            (goto-char (point-min))
            (while (re-search-forward &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^[ \t]*:CUSTOM_ID:[ \t]+\\(\\S-+\\)[ \t]*$&amp;#34;&lt;/span&gt;
                                      &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
              (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-all-org-custom-ids&lt;/span&gt;
                           &lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;(match-string-no-properties &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                             &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;(concat file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; (number-to-string (line-number-at-pos))))))))))
    air-all-org-custom-ids))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;{% infobox %}
As always, note that &lt;code&gt;air&lt;/code&gt; is simply a &amp;ldquo;namespace prefix&amp;rdquo; to ensure uniqueness
and that the double hyphen is a convention for indicating that the function is
&amp;ldquo;private&amp;rdquo; to its package and isn&#39;t intended to be a part of the public API.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;Calling this function will scan all of the Org files in &lt;code&gt;org-agenda-files&lt;/code&gt; and
return an alist that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;note-first-item&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/org/notes.org:1234&amp;#34;&lt;/span&gt;)
 (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;note-second-item&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/org/notes.org:1245&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The keys in the resulting alist are the IDs themselves and the values are
strings containing the Org filename and the line on which the ID appears
separated by a colon.&lt;/p&gt;
&lt;p&gt;I thought about abstracting this function to parameterize the &amp;ldquo;CUSTOM_ID&amp;rdquo;
property name, but it is written specifically to handle only unique values and I
couldn&#39;t think of any other use cases, so I left it as-is for now. Org Mode
already has facilities for searching for non-unique values and they work quite
well.&lt;/p&gt;
&lt;h3 id=&#34;making-the-jump&#34;&gt;Making the Jump&lt;/h3&gt;
&lt;p&gt;Now that we can build up an enumeration of all of the available custom ID
values, we can very easily present a narrowing list to aid selection and jump
directly to the selected item. Again, fear not, I have written this for you
already.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-goto-custom-id ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Go to the location of a custom ID, selected interactively.&amp;#34;&lt;/span&gt;
  (interactive)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((all-custom-ids (air--org-global-custom-ids))
         (custom-id (completing-read
                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Custom ID: &amp;#34;&lt;/span&gt;
                     all-custom-ids)))
    (when custom-id
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((val (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; custom-id all-custom-ids)))
             (id-parts (split-string val &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;))
             (file (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; id-parts))
             (line (string-to-int (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; id-parts))))
        (pop-to-buffer (org-get-agenda-file-buffer file))
        (goto-char (point-min))
        (forward-line line)
        (org-reveal)
        (org-up-element)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function is simple enough that it should be self-explanatory. We use the
previous function to get an alist of all IDs, prompt for the desired ID using a
&lt;code&gt;completing-read&lt;/code&gt;, and then jump to the location indicated in the original
alist, finally calling &lt;code&gt;org-up-element&lt;/code&gt; so that point rests on the heading of
the ID rather than on the property itself.&lt;/p&gt;
&lt;p&gt;I use this &lt;strong&gt;all the time&lt;/strong&gt; to jump to the notes for big topics that I&#39;m always
revisiting or to the notes for each of my employees. Thanks to
&lt;code&gt;completing-read&lt;/code&gt; and Helm (&lt;em&gt;which you really should be using&lt;/em&gt;), I don&#39;t even
have to remember what they are or type them in their entirety.&lt;/p&gt;
&lt;h2 id=&#34;linking-to-custom-ids&#34;&gt;Linking to Custom IDs&lt;/h2&gt;
&lt;p&gt;Finally, I also sometimes like to reference one of those big topics or a
specific employee in another TODO item, and it is very helpful to have an Org
native link within that item so that I can jump to the reference quickly to
refer to it or edit it.&lt;/p&gt;
&lt;p&gt;If you are unfamiliar with Org links, they are extremely powerful and the
breadth of their capabilities is far beyond the scope of this post. Suffice it
to say, &lt;a href=&#34;http://orgmode.org/guide/Hyperlinks.html&#34;&gt;RTFM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A link to a custom ID could be an &amp;ldquo;internal link&amp;rdquo; (a link to a location in the
same Org file), or an &amp;ldquo;external link&amp;rdquo; (a link to a location in a different Org
file). For our purposes, we will assume that all links are external so that it
doesn&#39;t matter which agenda file the ID is in nor where the link appears.&lt;/p&gt;
&lt;p&gt;The format of such a link is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[[file:/path/to/file.org::#id-value][Description]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A link destination can take a number of forms, but Org Mode provides a format
specifically for &lt;code&gt;ID&lt;/code&gt; or &lt;code&gt;CUSTOM_ID&lt;/code&gt; values, as shown above. If you elect to use
a different property for this, you can use the format
&lt;code&gt;file:/path/to/file.org::1234&lt;/code&gt;, where &amp;ldquo;1234&amp;rdquo; is the line number to link to.&lt;/p&gt;
&lt;p&gt;Building and inserting the link is very similar to jumping to it, except that we
will use the ID&#39;s actual value in the link destination and description. Here is
the function itself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-insert-custom-id-link ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Insert an Org link to a custom ID selected interactively.&amp;#34;&lt;/span&gt;
  (interactive)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((all-custom-ids (air--org-global-custom-ids))
         (custom-id (completing-read
                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Custom ID: &amp;#34;&lt;/span&gt;
                     all-custom-ids)))
    (when custom-id
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((val (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;assoc&lt;/span&gt; custom-id all-custom-ids)))
             (id-parts (split-string val &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;))
             (file (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; id-parts))
             (line (string-to-int (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; id-parts))))
        (org-insert-link &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; (concat file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::#&amp;#34;&lt;/span&gt; custom-id) custom-id)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can bind this function to a key and press it whenever you want to drop a
link to an item that has a custom ID associated with it. Very handy! I don&#39;t use
this as often as jumping to IDs, but when I do use it, it saves me boatloads of
time.&lt;/p&gt;
&lt;h2 id=&#34;binding-it-all-together&#34;&gt;Binding It All Together&lt;/h2&gt;
&lt;p&gt;In my previous post, [Playing Tag in Org Mode][tag], I mentioned in passing that
I&#39;m running out of useful mnemonics to remember all of my related key
bindings. I have what I consider to be an above-average ability to memorize new
keystrokes for things, but functions that I use less often just don&#39;t get the
benefit of muscle memory and without some kind of mnemonic device I just won&#39;t
be able to recall.&lt;/p&gt;
&lt;p&gt;I have started to run into this with some of these Org Mode helpers, especially
considering I&#39;m now carrying the weight of all of Evil Mode (which after all
these years feels as natural as typing straight QWERTY) as well as a lot of
Emacs (I now press &lt;code&gt;C-c C-c&lt;/code&gt; compulsively in other programs).&lt;/p&gt;
&lt;p&gt;Tools already exist to solve this in very innovative ways, and one such solution
is the amazing &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Hydra&lt;/a&gt; package. Hydra allows
you to create chains of key commands with shared prefixes, branching off in
different directions (hence the reference to the hydra, the multi-headed sea
monster of Greek lore), and now you can even define visual menus similar to what
you may be familiar with from Magit.&lt;/p&gt;
&lt;p&gt;Other packages rely on Hydra to provide that interface, and it is of interest to
me, but I have not yet used Hydra for anything else and I wanted a very
lightweight solution&amp;hellip; So I wrote one.&lt;/p&gt;
&lt;h3 id=&#34;introducing-tiny-menu&#34;&gt;Introducing Tiny Menu&lt;/h3&gt;
&lt;p&gt;{% img noborder &lt;a href=&#34;https://camo.githubusercontent.com/247cb7707c2dd5fb7b09cfabed6bf5200c71be58/687474703a2f2f6161726f6e6269656265722e636f6d2f6173736574732f696d616765732f74696e792d6d656e752d73637265656e73686f742e706e67&#34;&gt;https://camo.githubusercontent.com/247cb7707c2dd5fb7b09cfabed6bf5200c71be58/687474703a2f2f6161726f6e6269656265722e636f6d2f6173736574732f696d616765732f74696e792d6d656e752d73637265656e73686f742e706e67&lt;/a&gt; %}&lt;/p&gt;
&lt;p&gt;As its name implies, [Tiny Menu][tiny-menu]
is&amp;hellip; Tiny. Hydra weighs in at about 1,100 lines of code excluding preamble,
which considering everything it does is impressive in its own right. Tiny Menu
is 110 lines of code, and at least 15-20 of that is verbose function
descriptions.&lt;/p&gt;
&lt;p&gt;The reason Tiny Menu is so small is because it can only display a series of
single-letter options in the minibuffer. It doesn&#39;t pretend to be able to do
even a quarter of the things that Hydra can do, but if you just want to chain a
couple of key presses together and have a visual reminder of what&#39;s what, it
could be a good option.&lt;/p&gt;
&lt;p&gt;Thanks to help from &lt;a href=&#34;https://github.com/tslilc&#34;&gt;Tslil Clingman on Github&lt;/a&gt;, Tiny
Menu natively supports chaining menus together (menu items that point to other
menus), as well as menus that repeat (selecting a menu item executes that
command and re-displays the same menu).&lt;/p&gt;
&lt;p&gt;Menus are defined declaratively with a relatively straightforward data
structure, and there is a helper function for use in key bindings to keep them
concise and readable. Read the documentation on
[Tiny Menu&#39;s Github page][tiny-menu].&lt;/p&gt;
&lt;h3 id=&#34;using-tiny-menu-in-org-mode&#34;&gt;Using Tiny Menu in Org Mode&lt;/h3&gt;
&lt;p&gt;I have used Tiny Menu to set up a couple of useful menus to call some of my Org
Mode jump and link functions. Here is a portion of my Tiny Menu setup focusing
on the things I&#39;ve talked about in this post:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; tiny-menu-items
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org-things&amp;#34;&lt;/span&gt;   (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Things&amp;#34;&lt;/span&gt;
                         ((?t &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tag&amp;#34;&lt;/span&gt;     org-tags-view)
                          (?i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;      air-org-goto-custom-id)
                          (?k &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Keyword&amp;#34;&lt;/span&gt; org-search-view))))
        (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org-links&amp;#34;&lt;/span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Links&amp;#34;&lt;/span&gt;
                         ((?c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Capture&amp;#34;&lt;/span&gt;   org-store-link)
                          (?l &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Insert&amp;#34;&lt;/span&gt;    org-insert-link)
                          (?i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Custom ID&amp;#34;&lt;/span&gt; air-org-insert-custom-id-link))))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have used global Evil normal mode maps as prefixes for these menus. The nice
thing about Evil bindings is that they can automatically use non-prefix keys as
prefixes; Evil negotiates that bit of Emacs errata for you. Here are the
bindings for these menus:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(evil-define-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;normal&lt;/span&gt; global-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\ t&amp;#34;&lt;/span&gt;) (tiny-menu-run-item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org-things&amp;#34;&lt;/span&gt;))
(evil-define-key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;normal&lt;/span&gt; global-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\ l&amp;#34;&lt;/span&gt;) (tiny-menu-run-item &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org-links&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now by pressing &lt;code&gt;\t&lt;/code&gt;, I am presented with the &lt;code&gt;org-things&lt;/code&gt; menu. To jump to a
tag, I press &lt;code&gt;\t t&lt;/code&gt;; to an ID, &lt;code&gt;\t i&lt;/code&gt;; and to a keyword, &lt;code&gt;\t k&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ve also overridden Org Mode&#39;s default &lt;code&gt;C-c C-l&lt;/code&gt; binding, which normally runs
&lt;code&gt;org-insert-link&lt;/code&gt;, to instead display the &lt;code&gt;org-links&lt;/code&gt; menu. Thus, to insert a
link, I press &lt;code&gt;C-c C-l l&lt;/code&gt;, or, or insert a link to a custom ID by lookup I can
instead press &lt;code&gt;C-c C-l i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Tiny Menu is so small and fast that if you have finally memorized the next key
in the sequence, you need not slow down to wait for a menu to appear, just press
the keys at your normal speed. Nevertheless, the menu is there should you like
to use one of its other less memorable options.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;In this post, I&#39;ve talked about creating and using Custom IDs as global
bookmarks and as links, and how to chain together related commands using
[Tiny Menu][tiny-menu] to make navigating your Org files a breeze.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions or feedback on anything here, leave a
comment below! I have received many requests to dive deeper into my use of Org
Mode and I expect this to be one in a series of posts where I dissect certain
bits of it.&lt;/p&gt;
&lt;p&gt;[tag]: {% post_url 2016-03-05-playing-tag-in-org-mode %}
[tiny-menu]: &lt;a href=&#34;https://github.com/aaronbieber/tiny-menu.el&#34;&gt;https://github.com/aaronbieber/tiny-menu.el&lt;/a&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>escaping the tar pit</title>
       <link>http://example.org/post/2016/04/07t064259/0400/escaping-the-tar-pit/</link>
       <pubDate>Thu, 07 Apr 2016 06:42:59 -0400</pubDate>
       
       <guid>http://example.org/post/2016/04/07t064259/0400/escaping-the-tar-pit/</guid>
       <description>&lt;p&gt;If you don&#39;t know by now, I&#39;m sort of a personal efficiency maven. I don&#39;t like
to waste keystrokes, I&#39;m always experimenting with different key bindings and
shortcuts, and I feel almost personally offended when I see someone reach for
their mouse to click a button that I know has a keyboard equivalent.&lt;/p&gt;
&lt;p&gt;But this isn&#39;t about my pet peeves; this is about tuning yourself in to the
improvements you can make on a daily basis that will increase your lifetime
efficiency dramatically.&lt;/p&gt;
&lt;p&gt;I had the opportunity to give a &amp;ldquo;lightning talk&amp;rdquo; at the Boston PHP meetup, so I
spoke on this topic. It went OK, so I gave it again at Wayfair and I let them
record it. The recording quality is not the best, but I think the point comes
across just fine.&lt;/p&gt;
&lt;p&gt;The talk is called &amp;ldquo;Escaping the Tar Pit: Principles of Continuous Improvement.&amp;rdquo;
Video and full slides after the break.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;You can &lt;a href=&#34;http://aaronbieber.com/www/escaping-the-tar-pit/#/&#34;&gt;view the whole slide deck here&lt;/a&gt;, and as always, please share any
of your thoughts in the comments below.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>playing tag in org mode</title>
       <link>http://example.org/post/2016/03/05t163507/0500/playing-tag-in-org-mode/</link>
       <pubDate>Sat, 05 Mar 2016 16:35:07 -0500</pubDate>
       
       <guid>http://example.org/post/2016/03/05t163507/0500/playing-tag-in-org-mode/</guid>
       <description>&lt;p&gt;Once you have achieved &lt;em&gt;Org Mode Nirvana&lt;/em&gt; (hopefully with the help of my
previous post, [Dig into Org Mode]({% post_url 2016-01-30-dig-into-org-mode %}))
and you have over 2,500 lines of Org notes and TODO lists as I do (I&#39;m serious;
see the screenshot below), you&#39;ll want to seriously up your agenda game so that
you can find stuff quickly.&lt;/p&gt;
&lt;p&gt;{% img noborder /images/uploads/playing-tag-in-org-mode/2500-org-files.png %}&lt;/p&gt;
&lt;p&gt;One way to collate related information across Org files is by using tags. I&#39;m
not a tagging expert, but I&#39;ll tell you what I know.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Tags are not a new concept so I won&#39;t bother to explain the fundamental concept
of the tag. I use tags to classify certain important items in my notes and TODO
lists so that I can later pull up a list of all of those items together when I
need to find one (or when I want to see a cross-section of data).&lt;/p&gt;
&lt;p&gt;A tag in Org Mode is just a word surrounded by colons, appearing on the same
line as the item&#39;s headline. Multiple tags are separated by colons, and tags
can only contain letters, numbers, underscores, and &amp;ldquo;at&amp;rdquo; symbols (no spaces!)
Tags look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Ideas for office parties              :party:brainstorm:
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;applying-tags&#34;&gt;Applying Tags&lt;/h2&gt;
&lt;p&gt;To apply tags to an Org item interactively, call &lt;code&gt;org-set-tags-command&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you use Helm (which you &lt;em&gt;really should&lt;/em&gt;), you&#39;ll get a lovely completing read
window containing tags you&#39;ve already used so that you can be consistent in your
tagging (that&#39;s really the most important thing).&lt;/p&gt;
&lt;p&gt;What you&#39;ll notice when you start using &lt;code&gt;org-set-tags-command&lt;/code&gt; is that you don&#39;t
get a great completion menu after the first tag, because the tags string is
treated as a single value and Helm wants to complete based on the full value. In
other words, with the tag &lt;code&gt;:party:&lt;/code&gt; already assigned, triggering
&lt;code&gt;org-set-tags-command&lt;/code&gt; gives you a tag prompt pre-populated with &lt;code&gt;:party:&lt;/code&gt;
rather than letting you choose another separate tag to add.&lt;/p&gt;
&lt;p&gt;That just won&#39;t do, so let&#39;s fix it. I created these small functions that will
allow you to choose a tag from all available tags and if that tag is not applied
to the current headline, it will add it, otherwise (if the tag you select is
already there), it will remove it.&lt;/p&gt;
&lt;p&gt;This first function is meant for internal use only (note the double hyphen after
my &amp;ldquo;air&amp;rdquo; namespace prefix). Calling this function while point is resting on an
Org headline will replace the headline&#39;s tags with the tags string given. If
&lt;code&gt;nil&lt;/code&gt; is passed, any tags will be removed.&lt;/p&gt;
&lt;p&gt;Right at the end I call &lt;code&gt;(org-set-tags t)&lt;/code&gt; to re-align the tags based on your
configuration. The &lt;code&gt;t&lt;/code&gt; argument means &amp;ldquo;align only.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air--org-swap-tags (tags)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Replace any tags on the current headline with TAGS.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The assumption is that TAGS will be a string conforming to Org Mode&amp;#39;s
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tag format specifications, or nil to remove all tags.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((old-tags (org-get-tags-string))
        (tags (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tags
                  (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; tags)
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)))
    (save-excursion
      (beginning-of-line)
      (re-search-forward
       (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ \t]*&amp;#34;&lt;/span&gt; (regexp-quote old-tags) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ \t]*$&amp;#34;&lt;/span&gt;)
       (line-end-position) &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
      (replace-match tags)
      (org-set-tags &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function is the real meat and potatoes; it gives you a completing read of
all tags in the global tags table (which it also updates) and adds or removes
the tag as necessary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-set-tags (tag)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add TAG if it is not in the list of tags, remove it otherwise.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TAG is chosen interactively from the global tags completion table.&amp;#34;&lt;/span&gt;
  (interactive
   (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((org-last-tags-completion-table
                (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (derived-mode-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode&lt;/span&gt;)
                    (org-uniquify
                     (delq &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; (org-get-buffer-tags)
                                       (org-global-tags-completion-table))))
                  (org-global-tags-completion-table))))
           (org-icompleting-read
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tag: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-tags-completion-function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-tags-history&lt;/span&gt;))))
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((cur-list (org-get-tags))
         (new-tags (mapconcat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&lt;/span&gt;
                              (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;member&lt;/span&gt; tag cur-list)
                                  (&lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt; tag cur-list)
                                (&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt; cur-list (&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; tag)))
                              &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;))
         (new (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; new-tags) &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (concat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; :&amp;#34;&lt;/span&gt; new-tags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)))
    (air--org-swap-tags new)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I use Evil Leader (naturally) and have mapped this to my &lt;code&gt;&amp;lt;leader&amp;gt;t&lt;/code&gt;, which, for
me, is &lt;code&gt;,t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have applied some tags to headlines in your Org files, you can take
advantage of the agenda&#39;s tag search capabilities.&lt;/p&gt;
&lt;h2 id=&#34;searching-for-tags&#34;&gt;Searching for Tags&lt;/h2&gt;
&lt;p&gt;Typically you would simply call &lt;code&gt;org-agenda&lt;/code&gt; and then press &lt;code&gt;m&lt;/code&gt; to select &amp;ldquo;Match
a TAGS/PROP/TODO query,&amp;rdquo; which is essentially a tag search. I search for tags
pretty often, so I created a binding directly to the underlying function, which
is &lt;code&gt;org-tags-view&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As I mentioned in my previous Org posts, I have a common prefix key of &lt;code&gt;C-c t&lt;/code&gt;
for all of my TODO-related activities. For searching I decided to create a new
base key, &lt;code&gt;C-c f&lt;/code&gt; (&amp;ldquo;f&amp;rdquo; for &amp;ldquo;find&amp;rdquo;). Admittedly I&#39;m running out of great
mnemonics that aren&#39;t already used by other functions, but such is life in the
fast lane of Emacs customization.&lt;/p&gt;
&lt;p&gt;I also search by keyword frequently so I&#39;ve assigned &lt;code&gt;C-c f t&lt;/code&gt; to search for
tags and &lt;code&gt;C-c f k&lt;/code&gt; to search for keywords. I&#39;m not in love with &lt;code&gt;C-c f t&lt;/code&gt;
because on the QWERTY keyboard they&#39;re all in a row, but until I come up with
something different that I can remember I&#39;m rolling with it.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Tags are a convenient and powerful way to link pieces of information together in
Org Mode; by applying tags carefully you can &amp;ldquo;slice and dice&amp;rdquo; your notes in
useful ways to get an overview of individual topics or keep track of how often
you think about certain things. The sky&#39;s the limit.&lt;/p&gt;
&lt;p&gt;Full disclosure: it wasn&#39;t until I sat down to write this that I realized how
much adding and removing tags sucks and wrote the functions shown above. They&#39;re
probably buggy as hell, so let me know if you use them and run into trouble. I&#39;d
also accept pull requests if you feel saucy.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-org.el&#34;&gt;view my full Org Mode configuration file here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always, drop a comment below if you have questions or wish to praise me
endlessly.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>advanced window management with slate</title>
       <link>http://example.org/post/2016/01/31t181237/0500/advanced-window-management-with-slate/</link>
       <pubDate>Sun, 31 Jan 2016 18:12:37 -0500</pubDate>
       
       <guid>http://example.org/post/2016/01/31t181237/0500/advanced-window-management-with-slate/</guid>
       <description>&lt;p&gt;I am mildly obsessed with window management. When I ran Linux full-time, I tried
nearly every window management system I could find and ultimately fell in love
with &amp;ldquo;tiling&amp;rdquo; window managers. I used Xmonad for more than a year and then
switched to i3.&lt;/p&gt;
&lt;p&gt;I have used a Mac at home for a long time and previously tried Slate and
Spectacle for moving windows around quickly. When I was finally able to get a
Mac at work I refocused my efforts into finding just the right solution.&lt;/p&gt;
&lt;p&gt;I was quite happy with Spectacle until a colleague showed me that Slate now
supports Javascript configuration, which makes it possible to do very
sophisticated things. I used that facility to re-implement my favorite feature
of Spectacle: the ability to cycle a window through three different sizes along
one screen edge.&lt;/p&gt;
&lt;p&gt;Here I&#39;ll show you how it&#39;s done. If you don&#39;t desperately want to code up your
own Slate system after reading this, I&#39;ve done something terribly wrong.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-goal&#34;&gt;The Goal&lt;/h2&gt;
&lt;p&gt;The idea is to have a key binding that, when pressed, will snap the current
window to the left half of the screen. When pressed again, it should resize the
window to one third of the width of the screen, and when pressed a third time,
to two thirds of the width of the screen.&lt;/p&gt;
&lt;p&gt;We should also have a key binding that does the same thing for the right side of
the screen.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;First, you&#39;ll need to [download Slate][slate], of course. Create a &lt;code&gt;~/.slate.js&lt;/code&gt;
configuration file and you&#39;re off to the races.
[slate]: &lt;a href=&#34;https://github.com/jigish/slate/&#34;&gt;https://github.com/jigish/slate/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, Slate already supports the resizing operations that we want to do, which
they call &amp;ldquo;bar resize&amp;rdquo; (because the window is shaped like a &amp;ldquo;bar&amp;rdquo; that covers
the screen&#39;s entire width or height depending on the requested direction). So
what we need to do is write a function that will cycle a window through each of
them.&lt;/p&gt;
&lt;p&gt;How we&#39;ll do this is by creating an object in Javascript that maps the process
IDs of windows to a string describing their latest &amp;ldquo;resize state.&amp;rdquo; When the key
is pressed to trigger a resize, we&#39;ll either add a new attribute to that object
or cycle the attribute&#39;s value to the next state in the sequence.&lt;/p&gt;
&lt;p&gt;If the saved state isn&#39;t in the sequence associated with the key (e.g. the
window was last resized to the left half but the key pressed is for a right edge
resize), we&#39;ll just act as though the key isn&#39;t set.&lt;/p&gt;
&lt;p&gt;You might want to skim through Slate&#39;s [Javascript documentation][slate-js] to
learn how these functions actually work.
[slate-js]: &lt;a href=&#34;https://github.com/jigish/slate/wiki/JavaScript-Configs&#34;&gt;https://github.com/jigish/slate/wiki/JavaScript-Configs&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;saving-the-state&#34;&gt;Saving the State&lt;/h3&gt;
&lt;p&gt;We&#39;ll save the state of each window in a Javascript object. So, first things
first, create an empty object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Store current window states.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-the-operations&#34;&gt;Create the Operations&lt;/h3&gt;
&lt;p&gt;Now we&#39;ll create an operation for each of the resize types that we want to
use. Here are the three left edge operations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Left screen edge operations.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftBarThird&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push&amp;#34;&lt;/span&gt;,
                        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;direction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;,
                         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar-resize:screenSizeX/3&amp;#34;&lt;/span&gt;});
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftBarHalf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push&amp;#34;&lt;/span&gt;,
                       {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;direction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar-resize:screenSizeX/2&amp;#34;&lt;/span&gt;});
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftBarTwoThirds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;op&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push&amp;#34;&lt;/span&gt;,
                            {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;direction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;,
                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar-resize:screenSizeX/3*2&amp;#34;&lt;/span&gt;});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-a-cycle-function&#34;&gt;Create a Cycle Function&lt;/h3&gt;
&lt;p&gt;Because the left and right cycles are identical, save for the operations and
their names, we&#39;ll create a generator function that returns a closure for any
sequence of states.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCycleStates&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;states&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;states&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 
           ) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextIndex&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;states&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextState&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;states&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;nextIndex&lt;/span&gt;];
            &lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextState&lt;/span&gt;;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;states&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
        }

        eval(&lt;span style=&#34;color:#a6e22e&#34;&gt;windowStates&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;win&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pid&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.run()&amp;#39;&lt;/span&gt;);
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function is passed an array of states and returns a function that will
cycle through those states when the key it is bound to is pressed. A function
bound to a key must accept one argument, the &lt;em&gt;window object&lt;/em&gt; for the focused
window, so the returned closure accepts that argument.&lt;/p&gt;
&lt;p&gt;Each string representing the current state will also correspond to one of the
Slate operations, which can be triggered by calling the &lt;code&gt;run()&lt;/code&gt; method on
them. In spite of its general evilness, we&#39;ll use &lt;code&gt;eval()&lt;/code&gt; to do that.&lt;/p&gt;
&lt;h3 id=&#34;create-the-bindable-cycle-functions&#34;&gt;Create the Bindable Cycle Functions&lt;/h3&gt;
&lt;p&gt;Now we can call &lt;code&gt;getCycleStates()&lt;/code&gt; to generate a bindable function for the left
edge and the right edge sequences of states:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Window cycling functions.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftCycleOp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCycleStates&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leftBarHalf&amp;#39;&lt;/span&gt;,
                                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leftBarThird&amp;#39;&lt;/span&gt;,
                                  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;leftBarTwoThirds&amp;#39;&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rightCycleOp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCycleStates&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rightBarHalf&amp;#39;&lt;/span&gt;,
                                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rightBarThird&amp;#39;&lt;/span&gt;,
                                   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rightBarTwoThirds&amp;#39;&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note, of course, that I didn&#39;t include the right edge operations at the
beginning of the post. I&#39;m sure you can extrapolate those for yourself. After
all, that&#39;s half the fun of it.&lt;/p&gt;
&lt;h3 id=&#34;bind-everything&#34;&gt;Bind Everything&lt;/h3&gt;
&lt;p&gt;Finally, bind those cycle operations to the keys we want to use. For me, I like
to try to use Vim-like keys when I can, so I&#39;ve bound these to &lt;code&gt;Command-Shift-h&lt;/code&gt;
for the left edge and &lt;code&gt;Command-Shift-l&lt;/code&gt; for the right edge.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Bind the window cycling functions.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h:cmd,shift&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;leftCycleOp&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;S&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;l:cmd,shift&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rightCycleOp&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ta-daa&#34;&gt;Ta Daa!&lt;/h2&gt;
&lt;p&gt;That&#39;s all there is to it! You could easily expand this to cycle through any
Slate operations you like (screen quarters, different attached monitors, etc.)
or use the principles illustrated here to build other dynamic configurations do
any number of things.&lt;/p&gt;
&lt;p&gt;If you do come up with some awesome application for these ideas, please share
it with me!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>dig into org mode</title>
       <link>http://example.org/post/2016/01/30t155904/0500/dig-into-org-mode/</link>
       <pubDate>Sat, 30 Jan 2016 15:59:04 -0500</pubDate>
       
       <guid>http://example.org/post/2016/01/30t155904/0500/dig-into-org-mode/</guid>
       <description>&lt;p&gt;{% img noborder /images/uploads/dig-into-org-mode/screenshot.png %}&lt;/p&gt;
&lt;p&gt;Org mode was one of the main reasons I tried Emacs (and left behind 15 years of
Vim), and now it is a central part of how I organize my work. Org mode can help
you take notes, track tasks, build agendas, process tabular data, and more. It&#39;s
so flexible that everyone uses it differently.&lt;/p&gt;
&lt;p&gt;I use Org mode primarily to capture tasks and keep track of their progress. I
sometimes take notes in Org mode, but I haven&#39;t completely fleshed out my
note-taking and searching workflow, so I&#39;ll talk mostly about task management
here.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;org-setup-essentials&#34;&gt;Org Setup Essentials&lt;/h2&gt;
&lt;p&gt;Before you can start building a refined Org workflow, you need to set up some
basics.&lt;/p&gt;
&lt;h3 id=&#34;define-your-todo-states&#34;&gt;Define Your Todo States&lt;/h3&gt;
&lt;p&gt;Org mode keeps track of the state that a task is in by applying a keyword to it,
usually something like &amp;ldquo;TODO&amp;rdquo; or &amp;ldquo;DONE.&amp;rdquo; The keyword appears at the beginning of
every task and Org lets you cycle through them easily to track task
progress. When you use a list of keywords that describe a progression of states,
Org calls that a &amp;ldquo;sequence.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You can also configure multiple sequences of task states and use key bindings to
toggle between the sequences, but I haven&#39;t found a use for that feature
myself&amp;hellip; Yet.&lt;/p&gt;
&lt;p&gt;The easiest way to set your default task sequence is by setting
&lt;code&gt;org-todo-keywords&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-todo-keywords
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;sequence&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TODO&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IN-PROGRESS&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WAITING&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DONE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The observant among you will notice three things about this configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is a list of lists. This supports the multiple sequences I mentioned above.&lt;/li&gt;
&lt;li&gt;My sequence starts with the symbol &amp;ldquo;sequence.&amp;rdquo; That tells Org that the
following items are a sequence of states rather than a list of task types.&lt;/li&gt;
&lt;li&gt;One of the items is a pipe. The pipe is optional, but if it is present, the
task states following it will all be considered by Org to mean &amp;ldquo;complete.&amp;rdquo; I
use it to mark tasks as DONE or CANCELED.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you wish to configure your task states differently in each Org file, you can
use a line like this at the top (the syntax, including the pipe, is the same):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;#+TODO: TODO IN-PROGRESS WAITING | DONE CANCELED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Even more about Org states is covered in &lt;a href=&#34;(http://orgmode.org/manual/Workflow-states.html#Workflow-states)&#34;&gt;Workflow states&lt;/a&gt; in the Org
manual.&lt;/p&gt;
&lt;h3 id=&#34;define-your-agenda-files&#34;&gt;Define Your Agenda Files&lt;/h3&gt;
&lt;p&gt;I keep all of my Org files in a single directory in my Dropbox
(&lt;code&gt;~/Dropbox/org&lt;/code&gt;). I like to keep a single file for tasks and a single file for
notes, but you can absolutely break it up into as many files as you wish, or
create a new file for each meeting or set of notes.&lt;/p&gt;
&lt;p&gt;For pure task management, Org&#39;s agenda features are so rich that it almost
doesn&#39;t make sense to edit the task file itself, so I keep all tasks in a single
file, &lt;code&gt;~/Dropbox/org/tasks.org&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;agenda&amp;rdquo; is a specific feature of Org that lets you view summaries of the
data in your task files, manipulate their parameters, and even use search and
tags to build your own custom views. Before you can do any of that, you need to
teach Org where to look for all of the files you wish to include in your
agenda.&lt;/p&gt;
&lt;p&gt;You can do that by setting &lt;code&gt;org-agenda-files&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/Dropbox/org/&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you know a little Elisp you may notice that the variable is set to a list. If
you store your task files in more than one location, you can supply each of
those locations in the list (like &lt;code&gt;&#39;(&amp;quot;/dir/one&amp;quot; &amp;quot;/dir/two&amp;quot;)&lt;/code&gt; and so on).&lt;/p&gt;
&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;
&lt;p&gt;Now that you&#39;ve set all this stuff up, how do you actually use it?&lt;/p&gt;
&lt;p&gt;I use two major entry points into the Org system: &amp;ldquo;agenda,&amp;rdquo; and &amp;ldquo;capture.&amp;rdquo; Let&#39;s
talk about them one at a time.&lt;/p&gt;
&lt;h3 id=&#34;using-the-agenda&#34;&gt;Using the Agenda&lt;/h3&gt;
&lt;p&gt;The agenda is a ridiculously powerful feature of Org Mode. In addition to being
a dynamic daily or weekly interactive task list, it is also a front-end for
searching and generating other types of customized reports. You can think of it
as a way to summarize Org data.&lt;/p&gt;
&lt;p&gt;I use the agenda chiefly to display my weekly tasks. When you have
&lt;code&gt;org-agenda-files&lt;/code&gt; configured, you can simply call &lt;code&gt;org-agenda-list&lt;/code&gt; to generate
an agenda, which, by default, will be the weekly display. Because I use the
agenda as my primary interface to a lot of my work, I prefer to open the agenda
by itself in the current frame. To do that, I wrote a small function and
assigned it to a key binding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-pop-to-org-agenda (split)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Visit the org agenda, in the current window or a SPLIT.&amp;#34;&lt;/span&gt;
  (interactive &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;)
  (org-agenda-list)
  (when (&lt;span style=&#34;color:#a6e22e&#34;&gt;not&lt;/span&gt; split)
    (delete-other-windows)))

(define-key global-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c t a&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-pop-to-org-agenda&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;ldquo;air&amp;rdquo; part is just a namespace prefix that I use for all of my custom
functions for historical reasons I won&#39;t go into; the important part is the
&lt;code&gt;split&lt;/code&gt; argument, which allows me to optionally allow the window to split as it
does normally by specifying a prefix.&lt;/p&gt;
&lt;p&gt;{% infobox %}
When the &lt;code&gt;interactive&lt;/code&gt; call specifies &amp;ldquo;P&amp;rdquo;, the function will be passed an
argument with a &amp;ldquo;truthy&amp;rdquo; or &amp;ldquo;falsy&amp;rdquo; value depending on whether the &lt;em&gt;prefix key&lt;/em&gt;
was pressed. In practice what that means is if you invoke the function by
pressing &lt;code&gt;C-u&lt;/code&gt; followed by the key the function is bound to, &lt;code&gt;prefix&lt;/code&gt; will be
true, otherwise it will be false.&lt;/p&gt;
&lt;p&gt;In the example above, &lt;code&gt;C-c t a&lt;/code&gt; opens the agenda list and deletes all other
windows, whereas &lt;code&gt;C-u C-c t a&lt;/code&gt; (which I use much less often), allows the other
windows to remain open.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;My mnemonic for these key bindings is &lt;code&gt;t&lt;/code&gt; for &amp;ldquo;todo&amp;rdquo; and &lt;code&gt;a&lt;/code&gt; for &amp;ldquo;agenda.&amp;rdquo; My
other Org-related bindings all start the same way.&lt;/p&gt;
&lt;p&gt;The agenda view is only useful if you have saved tasks with either &lt;code&gt;DEADLINE&lt;/code&gt; or
&lt;code&gt;SCHEDULED&lt;/code&gt; dates. Without dates associated with the tasks, Org wouldn&#39;t know
where to place them in the agenda. I&#39;ll talk more about scheduling in the
following section.&lt;/p&gt;
&lt;h4 id=&#34;essential-agenda-keys&#34;&gt;Essential Agenda Keys&lt;/h4&gt;
&lt;p&gt;The agenda list is interactive. To see all of the keys available, just invoke
the mode help with &lt;code&gt;C-h m&lt;/code&gt; from within the agenda list. Here are the most
critical ones that I use all the time:&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;TAB&lt;/code&gt; to reveal the Org file that the item at point comes from. I use
this when I need to get in there and edit the notes within that item or make
more involved changes. I also bound &lt;code&gt;RET&lt;/code&gt; to the function
&lt;code&gt;org-agenda-switch-to&lt;/code&gt;, which does the same thing but doesn&#39;t use a split.&lt;/p&gt;
&lt;p&gt;I have re-bound my motion keys because I use Evil, but the arrow keys move among
items by default, and &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; will move between headings (like days of the
week).&lt;/p&gt;
&lt;p&gt;Pressing &lt;code&gt;S-Left&lt;/code&gt; or &lt;code&gt;S-Right&lt;/code&gt; while on a task will change the task&#39;s scheduled
or deadline date by one day in either direction. I use this mostly to push out
stuff I know I&#39;m not going to get to today.&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;t&lt;/code&gt; on a task to cycle its current state (e.g. from &amp;ldquo;TODO&amp;rdquo; to
&amp;ldquo;IN-PROGRESS,&amp;rdquo; etc.)&lt;/p&gt;
&lt;p&gt;Following the pattern used by many other Emacs packages, pressing &lt;code&gt;g&lt;/code&gt; anywhere
in the agenda will redraw it (recomputing days, statuses, etc.) I use this right
after I&#39;ve changed a date or cycled the state of a task so that things are
displayed where they should be.&lt;/p&gt;
&lt;p&gt;Finally, and perhaps most importantly, press &lt;code&gt;s&lt;/code&gt; anywhere in the agenda view to
save all Org buffers that provide data to the agenda. When you make changes to
task states, dates, and so on, Org edits the buffers containing those items, but
won&#39;t save them automatically. Press &lt;code&gt;s&lt;/code&gt; to make sure everything&#39;s saved, once
you&#39;re happy with your changes.&lt;/p&gt;
&lt;p&gt;As with all systems in Emacs, use the mode help to see what other keys are
available and re-bind the ones that don&#39;t feel right.&lt;/p&gt;
&lt;h3 id=&#34;using-capture&#34;&gt;Using Capture&lt;/h3&gt;
&lt;p&gt;Once you&#39;re funneling all of your tasks through Org Mode, you&#39;ll need a way to
very quickly add new tasks no matter what else you&#39;re doing. The Org mechanism
for this is called &amp;ldquo;capture,&amp;rdquo; and it allows you to add items to Org files from
anywhere in Emacs.&lt;/p&gt;
&lt;p&gt;You can actually add any type of item to any file, but I use it simply to add
task items to my task list. The simplest way to invoke capture is to simply call
&lt;code&gt;org-capture&lt;/code&gt;, typically via a binding. When you call that function, a split
will open prompting you to select a &amp;ldquo;template,&amp;rdquo; and you probably won&#39;t have any
so you&#39;ll only be given the option to &amp;ldquo;C,&amp;rdquo; customize, or &amp;ldquo;q,&amp;rdquo; abort.&lt;/p&gt;
&lt;p&gt;So let&#39;s create a template. You can do this by setting the variable
&lt;code&gt;org-capture-templates&lt;/code&gt; and the format of the data is more straightforward than
it looks at first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-capture-templates
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My TODO task format.&amp;#34;&lt;/span&gt; entry
         (file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;todo.org&amp;#34;&lt;/span&gt;)
         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;* TODO %?
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SCHEDULED: %t&amp;#34;&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The value of &lt;code&gt;org-capture-templates&lt;/code&gt; is a list of template entries where each
entry contains a single letter key for selecting or identifying the template
(&amp;ldquo;a&amp;rdquo; above), a descriptive name, a type (&amp;ldquo;entry&amp;rdquo; above), the target for the
entry (above I have used a filename, which will be relative to &lt;code&gt;org-directory&lt;/code&gt;),
and finally the template text itself.&lt;/p&gt;
&lt;p&gt;A large number of variables are available within your template text, and targets
other than a filename are also possible. All of that is documented in the manual
for &lt;code&gt;org-capture-templates&lt;/code&gt; (&lt;code&gt;C-h v org-capture-templates RET&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In my template I have used &lt;code&gt;%t&lt;/code&gt; to insert a timestamp, and I&#39;ve specified &lt;code&gt;%?&lt;/code&gt;
to place the cursor right after the &amp;ldquo;TODO&amp;rdquo; keyword when the template is
shown. You are under no obligation to follow my, or anyone&#39;s, format here. I
always want my new tasks to be scheduled so that they appear in my agenda, so
I&#39;ve added that bit of metadata to my capture template.&lt;/p&gt;
&lt;p&gt;Now that you have a capture template, calling &lt;code&gt;org-capture&lt;/code&gt; will show its name
along with its key in the menu, and pressing that key (&amp;ldquo;a&amp;rdquo; in my example above),
opens a split with the template contents so you can edit it as necessary, then
of course press &lt;code&gt;C-c C-c&lt;/code&gt; to save and close the capture or &lt;code&gt;C-c C-k&lt;/code&gt; to abort
(that is noted in the window itself as well).&lt;/p&gt;
&lt;p&gt;I only have one template and I don&#39;t want to have to press two keys to capture
it, so I&#39;ve wrapped my own function around it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun air-org-task-capture ()
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Capture a task with my default template.&amp;#34;&lt;/span&gt;
  (interactive)
  (org-capture &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All that does is call &lt;code&gt;org-capture&lt;/code&gt; with its optional template key argument. Now
you can bind that to a global key and you&#39;re off to the races!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(define-key global-map (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c c&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;air-org-task-capture&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When I press &lt;code&gt;C-c c&lt;/code&gt;, a split opens with my scheduled task template and I can
just type in the subject line and press &lt;code&gt;C-c C-c&lt;/code&gt; to save it. This has saved me
hours and allowed me to enter tasks quickly into my agenda without having to
navigate buffers or think too much.&lt;/p&gt;
&lt;h2 id=&#34;useful-tweaks&#34;&gt;Useful Tweaks&lt;/h2&gt;
&lt;p&gt;After using this system for a while you inevitably find ways in which it could
work better for you, and since Org is such a monster, there is almost always
some configuration you can tweak to fix it. These are the tweaks I have found
that work for me and their descriptions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-agenda-text-search-extra-files &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(agenda-archives))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you perform a text search (the &amp;ldquo;s&amp;rdquo; selection from the &lt;code&gt;org-agenda&lt;/code&gt; pop-up),
include the archives for all of the files in Org&#39;s agenda files list. If you
archive things regularly, which I do, this helps you dig stuff out of there when
you&#39;re looking for it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-blank-before-new-entry (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote&lt;/span&gt; ((heading) (plain-list-item))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I tend to leave a blank line at the end of the content of each task entry. This
causes Org to automatically place a blank line before a new heading or plain
text list item, just the way I like it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-enforce-todo-dependencies &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This one is pretty awesome; it forces you to mark all child tasks as &amp;ldquo;DONE&amp;rdquo;
before you can mark the parent as &amp;ldquo;DONE.&amp;rdquo; The agenda view already has the notion
of &amp;ldquo;blocked&amp;rdquo; tasks (those with incomplete child tasks), which should appear
dimmed (that, of course, is also customizable). This makes it even harder to
slack off on your work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-log-done (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote&lt;/span&gt; time))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I like to know when tasks have changed status. Setting this option causes Org to
insert an annotation in a task when it is marked as done including a timestamp
of when exactly that happened.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-log-redeadline (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote&lt;/span&gt; time))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Adding yet further auditing, this option causes Org to insert annotations when
you change the deadline of a task, which will note the previous deadline date
and when it was changed. Very useful for figuring out how many times you &amp;ldquo;kicked
the can down the road.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; org-log-reschedule (&lt;span style=&#34;color:#66d9ef&#34;&gt;quote&lt;/span&gt; time))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This does the same as above, but for the scheduled dates, which I use more often.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Org Mode is much more vast than one blog post could describe, but hopefully this
will give you a jumping-off point for starting a delightful and effective task
management workflow using Org!&lt;/p&gt;
&lt;p&gt;As always, if you have questions about any of this or want to sing my praises,
drop a comment down below.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>introducing octopress el</title>
       <link>http://example.org/post/2016/01/23t174134/0500/introducing-octopress-el/</link>
       <pubDate>Sat, 23 Jan 2016 17:41:34 -0500</pubDate>
       
       <guid>http://example.org/post/2016/01/23t174134/0500/introducing-octopress-el/</guid>
       <description>&lt;p&gt;If you&#39;ve ever scrolled all the way to the bottom of this blog, you&#39;ll know that
I use Octopress (a Jekyll-powered blogging system written in Ruby) to build
it. What I like about Octopress is a subject for a different post, but I like it
a lot.&lt;/p&gt;
&lt;p&gt;Of course, as an Emacs user, it pains me to drop to a command line to do
something that should be part of a fluid text editing workflow, and blogging is
a great example of such a scenario.&lt;/p&gt;
&lt;p&gt;To solve that problem, I wrote Octopress.el, an Emacs package for blogging with
Octopress. Using Octopress.el, you can view your drafts and posts, publish,
unpublish, build, preview, and even deploy your Octopress blog right from within
Emacs!&lt;/p&gt;
&lt;p&gt;Octopress.el can be installed &lt;strong&gt;right now&lt;/strong&gt; from MELPA (package name:
&lt;a href=&#34;http://melpa.org/#/octopress&#34;&gt;octopress&lt;/a&gt;), or downloaded from my Github (repository:
&lt;a href=&#34;https://github.com/aaronbieber/octopress.el&#34;&gt;octopress.el&lt;/a&gt;). Go get it, give it a try, send me issues or pull requests,
and get blogging!&lt;/p&gt;
&lt;p&gt;If you want to go on more of a detailed tour, continue reading!&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-octopress&#34;&gt;How To Octopress&lt;/h2&gt;
&lt;p&gt;Naturally you need to have Octopress. I won&#39;t cover how to get started with it;
if you want to begin using Octopress,
&lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;follow the instructions here&lt;/a&gt;. Note that Octopress.el will &lt;em&gt;only&lt;/em&gt; work
with Octopress 3.0, the gem distribution of Octopress.&lt;/p&gt;
&lt;p&gt;It&#39;s recommended that you use Bundler to install Octopress. If you have done so,
and a Gemfile is present, all Octopress commands will be prefixed with &lt;code&gt;bundler exec&lt;/code&gt; automatically so that your project local gems are used.&lt;/p&gt;
&lt;p&gt;The only configuration that Octopress.el requires is the location of your
blog. At this time, it only supports working on a single blog. If you begin to
use Octopress.el without configuring your blog location, you will be prompted to
enter it.&lt;/p&gt;
&lt;p&gt;You can preconfigure your blog location by setting the custom value
&lt;code&gt;octopress-blog-root&lt;/code&gt; through the &lt;code&gt;customize&lt;/code&gt; facility, or by setting the
variable in your init files somewhere. If you have only one blog, this is
convenient because you can run Octopress.el from anywhere within Emacs and begin
working on that blog.&lt;/p&gt;
&lt;h3 id=&#34;starting-octopressel&#34;&gt;Starting Octopress.el&lt;/h3&gt;
&lt;p&gt;The main entry point into Octopress.el is the interactive function
&lt;code&gt;octopress-status&lt;/code&gt;. Similar to Magit and others, that function will pop to a
status buffer displaying statistics about your blog and file lists that you can
use to interact with your posts and drafts.&lt;/p&gt;
&lt;p&gt;Several key bindings are available and you can view a menu of them by pressing
&lt;code&gt;?&lt;/code&gt;. The &amp;ldquo;Drafts&amp;rdquo; and &amp;ldquo;Posts&amp;rdquo; headings can be expanded or collapsed by pressing
&lt;code&gt;TAB&lt;/code&gt;, and pressing &lt;code&gt;RET&lt;/code&gt; on a file item will open it for editing.&lt;/p&gt;
&lt;h3 id=&#34;creating-and-previewing&#34;&gt;Creating and Previewing&lt;/h3&gt;
&lt;p&gt;Most of the commands should be self-explanatory, but I will go into a little bit
of detail on the &amp;ldquo;build&amp;rdquo; and &amp;ldquo;server&amp;rdquo; functions because they are slightly more
complicated.&lt;/p&gt;
&lt;p&gt;Some commands have sub-selections or flags. For example, when you press &lt;code&gt;c&lt;/code&gt; to
create a new item, you will be prompted to choose whether you want to create a
&amp;ldquo;draft,&amp;rdquo; &amp;ldquo;post,&amp;rdquo; or &amp;ldquo;page.&amp;rdquo; Press the letter in brackets to indicate your
selection.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;build&amp;rdquo; and &amp;ldquo;server&amp;rdquo; commands have flags, which configure which objects are
included in your build or served by the local preview server. By pressing the
letters in brackets, the color of the item will change to indicate whether the
flag is on or off. To accommodate sight disabilities, the faces used for enabled
and disabled flags is customizable through the &lt;code&gt;customize&lt;/code&gt; facility. In
addition, the default flag settings can also be customized.&lt;/p&gt;
&lt;h3 id=&#34;publishing-and-unpublishing&#34;&gt;Publishing and Unpublishing&lt;/h3&gt;
&lt;p&gt;Once you are happy with a draft and you&#39;re ready to publish, select the draft in
the list and press &lt;code&gt;P&lt;/code&gt;. Octopress will convert your draft into a published post
and, if that draft is open in some window, Octopress.el will swap the window
contents to display the post. If you elect to unpublish a post, the opposite
will happen.&lt;/p&gt;
&lt;p&gt;Note that if you remove the &amp;ldquo;date&amp;rdquo; metadata from a post &lt;em&gt;before&lt;/em&gt; unpublishing
it, Octopress will throw a confusing nil error and fail. This is just an
Octopress thing, so don&#39;t mess with the posted date until it&#39;s converted back to
a draft.&lt;/p&gt;
&lt;h3 id=&#34;happy-blogging&#34;&gt;Happy Blogging&lt;/h3&gt;
&lt;p&gt;So that&#39;s it, a crash course on Octopress.el. I hope you enjoy using it as much
as I do, and if you find issues please open them on the Github repository so I
can dig in, or better yet, send a pull request with your fix!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>living in evil</title>
       <link>http://example.org/post/2016/01/23t143411/0500/living-in-evil/</link>
       <pubDate>Sat, 23 Jan 2016 14:34:11 -0500</pubDate>
       
       <guid>http://example.org/post/2016/01/23t143411/0500/living-in-evil/</guid>
       <description>&lt;p&gt;Evil Mode is a phenomenal tool; it&#39;s a better Vim than Vim. The only problem is,
there are a lot of other great tools available in Emacs that don&#39;t get along
well with Evil Mode, and if you don&#39;t set things up just right you can wind up
with jumbled key bindings and unexpected behaviors.&lt;/p&gt;
&lt;p&gt;In this post I&#39;ll explain how I set up my configuration to use Evil Mode in all
of the places where I want it, but none of the places where it gets in the
way.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-configuration&#34;&gt;Basic Configuration&lt;/h2&gt;
&lt;p&gt;{% infobox %}
If you already have Evil working and you don&#39;t care how I load it into my Emacs,
you can jump down to &amp;ldquo;Brass Tacks.&amp;rdquo;
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;First, I use John Wiegley&#39;s great
&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt; system for importing
packages into my Emacs. This simplifies my configuration by defining the
packages I want, downloading them from MELPA or other repositories when they
don&#39;t exist, and defining the configurations that should be applied both before
and after the package has been loaded, all in one place.&lt;/p&gt;
&lt;p&gt;My Evil Mode configuration is pretty big, and you can read the whole thing &lt;a href=&#34;https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-evil.el&#34;&gt;in my
Github repository here&lt;/a&gt;, but for the sake of illustration I will use an
abbreviated version in this post. Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;use-package&lt;/span&gt; evil
  &lt;span style=&#34;color:#e6db74&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;:config&lt;/span&gt;
  (evil-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
  &lt;span style=&#34;color:#75715e&#34;&gt;;; More configuration goes here&lt;/span&gt;
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a crash course in &lt;code&gt;use-package&lt;/code&gt;: first you name the package you want to
load (obviously); &lt;code&gt;:ensure t&lt;/code&gt; means &amp;ldquo;make sure this package is installed,&amp;rdquo; which
will try to install it from MELPA if it isn&#39;t found; and then everything in the
&lt;code&gt;:config&lt;/code&gt; section is evaluated right after &lt;code&gt;evil&lt;/code&gt; is loaded.&lt;/p&gt;
&lt;p&gt;Here I&#39;m just calling &lt;code&gt;evil-mode&lt;/code&gt; to activate it, because I want it to be
turned on globally, all the time.&lt;/p&gt;
&lt;p&gt;So the first thing I do in my own configuration is load four more packages that
rely on Evil: &lt;code&gt;evil-leader&lt;/code&gt;, &lt;code&gt;evil-surround&lt;/code&gt;, and
&lt;code&gt;evil-indent-textobject&lt;/code&gt;. Because there is no sense in loading these if Evil
isn&#39;t loaded, I nest their &lt;code&gt;use-package&lt;/code&gt; calls within Evil&#39;s &lt;code&gt;:config&lt;/code&gt;
section. So now we have something like this:&lt;/p&gt;
&lt;p&gt;(NB: &lt;code&gt;evil-jumper&lt;/code&gt; was merged into &lt;code&gt;evil-mode&lt;/code&gt; itself in 2016, so you don&#39;t need
to install that package any longer.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;use-package&lt;/span&gt; evil
  &lt;span style=&#34;color:#e6db74&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;:config&lt;/span&gt;
  (evil-mode &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;use-package&lt;/span&gt; evil-leader
    &lt;span style=&#34;color:#e6db74&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;:config&lt;/span&gt;
    (global-evil-leader-mode))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;use-package&lt;/span&gt; evil-surround
    &lt;span style=&#34;color:#e6db74&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;:config&lt;/span&gt;
    (global-evil-surround-mode))

  (&lt;span style=&#34;color:#a6e22e&#34;&gt;use-package&lt;/span&gt; evil-indent-textobject
    &lt;span style=&#34;color:#e6db74&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It might occur to you, especially if you&#39;ve already skimmed my real
configuration, that this is too short. Where are all the key bindings and the
special sauces and magical fairy dust that makes Evil behave itself?&lt;/p&gt;
&lt;p&gt;For whatever reason, I like terse &lt;code&gt;use-package&lt;/code&gt; calls, so when a configuration
gets to be the size of my Evil setup, I put all of it into a custom function and
just call that function from the &lt;code&gt;:config&lt;/code&gt; section of the &lt;code&gt;use-package&lt;/code&gt;
declaration. I have one for Evil and another one for Evil Leader, because both
are pretty long.&lt;/p&gt;
&lt;p&gt;It&#39;s completely up to you whether you want to do that or not. My recommendation
is to keep piling stuff into &lt;code&gt;:config&lt;/code&gt; until you feel like it&#39;s too long to
remain quite organized, or too hard to read, then start breaking it up into
separate functions.&lt;/p&gt;
&lt;h2 id=&#34;brass-tacks&#34;&gt;Brass Tacks&lt;/h2&gt;
&lt;p&gt;Great, you&#39;ve got Evil set up and now you&#39;re ready to make it play nice with
other modes. The Evil package actually ships with some sensible default
configuration for commonly used packages, like Magit (the Git porcelain inside
Emacs; one of my favorite tools in the world).&lt;/p&gt;
&lt;p&gt;Because Magit itself provides a full complement of non-modified key bindings
(that is, you don&#39;t hold &amp;ldquo;control,&amp;rdquo; &amp;ldquo;meta,&amp;rdquo; or &amp;ldquo;shift&amp;rdquo; for any of them), it
doesn&#39;t make sense to let Evil assert its bindings in any of the Magit
modes. To do this, Evil uses a special state. First, a recap of Vim
states: Vim can be in one of five states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Normal&lt;/li&gt;
&lt;li&gt;Insert&lt;/li&gt;
&lt;li&gt;Visual&lt;/li&gt;
&lt;li&gt;Operator&lt;/li&gt;
&lt;li&gt;Replace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also call those &amp;ldquo;modes&amp;rdquo; in Vim parlance, but because &amp;ldquo;mode&amp;rdquo; has a very
special meaning in the Emacs world, here we call them &amp;ldquo;states.&amp;rdquo; Evil adds two
more states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motion&lt;/li&gt;
&lt;li&gt;Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Motion state is only the movement keys and functions without any other normal
mode capabilities (like entering the other states, deleting, etc.) The motion
state is used for pure read-only scenarios, like the Info reader (&lt;code&gt;C-h i&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Emacs state is the important one. In Emacs state, all Evil key bindings are
suspended and Emacs behaves as though Evil is not there at all. You can
temporarily toggle Emacs state yourself by pressing &lt;code&gt;C-z&lt;/code&gt;, and this can come in
handy when a mode you don&#39;t use often has some key binding you want to access
that Evil is overriding (you can figure that out by viewing the mode information
in &lt;code&gt;C-h m&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;forcing-emacs-state&#34;&gt;Forcing Emacs State&lt;/h3&gt;
&lt;p&gt;What we want is to automatically place certain modes into Emacs state by default
so that we can use their native key bindings without turning Evil off and on,
which would be super annoying. Fortunately, Evil has a built-in facility to do
this in the form of a variable called &lt;code&gt;evil-emacs-state-modes&lt;/code&gt;. The value of
that variable is a list of mode names. If you enter a mode whose name is in that
list, Evil will toggle to Emacs state automatically.&lt;/p&gt;
&lt;p&gt;It bears mentioning that there are also variables like
&lt;code&gt;evil-insert-state-modes&lt;/code&gt;, &lt;code&gt;evil-visual-state-modes&lt;/code&gt;, and so on, if you wish to
have some mode start in any of the available Evil states.&lt;/p&gt;
&lt;p&gt;As an example, there are three modes where I want to use Emacs state by default:
&lt;code&gt;ag-mode&lt;/code&gt;, &lt;code&gt;flycheck-error-list-mode&lt;/code&gt;, and &lt;code&gt;git-rebase-mode&lt;/code&gt;. To achieve this,
all you have to do is call the built-in function &lt;code&gt;add-to-list&lt;/code&gt; and add these
values to the appropriate list variable. That looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-emacs-state-modes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ag-mode&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-emacs-state-modes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flycheck-error-list-mode&lt;/span&gt;)
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-emacs-state-modes&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git-rebase-mode&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The apostrophes are Elisp shorthand for the &amp;ldquo;quote&amp;rdquo; function, which returns the
given argument without evaluating it. In this case, we want to pass the
variables and mode names themselves to &lt;code&gt;add-to-list&lt;/code&gt;, not their values (the
value of &lt;code&gt;evil-emacs-state-modes&lt;/code&gt; is the list of those modes, and the value of
the various mode functions are the functions themselves).&lt;/p&gt;
&lt;p&gt;Cool, so now these modes start in Emacs state right away, but it&#39;s kind of
repetitive to type or paste &lt;code&gt;add-to-list&lt;/code&gt; over and over, especially if you have
many such modes. Elisp is a full programming language, so we can simplify it a
bit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;  (dolist (mode &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(ag-mode
                  flycheck-error-list-mode
                  git-rebase-mode))
    (add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-emacs-state-modes&lt;/span&gt; mode))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Figuring out how this works is left as an exercise for the reader, but the one
thing I will mention here is the clever use of &lt;code&gt;&#39;(foo bar baz)&lt;/code&gt; to quote the
whole list at once. You&#39;ll see that convention used all over the place in Elisp
code.&lt;/p&gt;
&lt;h3 id=&#34;adding-hjkl-bindings&#34;&gt;Adding h/j/k/l Bindings&lt;/h3&gt;
&lt;p&gt;Emacs state is fabulous for modes like Magit, which have their own mature and
sensible key bindings that you&#39;ll just love using and that almost feel a lot
like Vim on their own. There are other modes, though, where you want to keep
most of their bindings for special functions, but moving around with arrow keys
makes you feel like a Visual Studio developer (and we can&#39;t have that).&lt;/p&gt;
&lt;p&gt;One such mode is &lt;code&gt;occur-mode&lt;/code&gt;, which lets you see a summary of search results,
similar to editors like Sublime Text. Occur has a bunch of default key bindings
that overlap Evil&#39;s, such as &lt;code&gt;e&lt;/code&gt;, which puts Occur into editing mode so that you
can actually edit the results right there and the source file is changed
simultaneously. It&#39;s a very powerful feature.&lt;/p&gt;
&lt;p&gt;What I want, though, is to be able to move around with h, j, k, and l as I do in
Vim, but leave the rest of Occur&#39;s bindings alone. That is possible with a
really nice Evil function called, sensibly, &lt;code&gt;evil-add-hjkl-bindings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This function is quite versatile. It expects to receive a keymap (which is a
special Emacs data structure), a state name to apply bindings to, and optionally
a series of additional keys and functions they should call. More on that later.&lt;/p&gt;
&lt;p&gt;Here is my configuration for Occur:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(evil-add-hjkl-bindings occur-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emacs&lt;/span&gt;
  (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-search-forward&lt;/span&gt;
  (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;)       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-search-next&lt;/span&gt;
  (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;)       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-search-previous&lt;/span&gt;
  (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-d&amp;#34;&lt;/span&gt;)     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-scroll-down&lt;/span&gt;
  (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-u&amp;#34;&lt;/span&gt;)     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-scroll-up&lt;/span&gt;
  (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-w C-w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;other-window&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This automatically applies the Evil h, j, k, and l bindings to &lt;code&gt;occur-mode-map&lt;/code&gt;
when I&#39;m in Emacs state. Additionally, it defines some keys for a couple of
other common Vim shortcuts that I often use in Occur and maps them to existing
Evil functions.&lt;/p&gt;
&lt;p&gt;{% infobox %}
&lt;strong&gt;A crash course on keymaps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every major and minor mode has a keymap, even if it isn&#39;t used. When built-in
functions are called to define new modes, default map variables are created
using the name of the mode with &lt;code&gt;-map&lt;/code&gt; added to the end.&lt;/p&gt;
&lt;p&gt;If you want to confirm that a certain keymap exists, first make sure the mode
it&#39;s associated with is loaded, and then use &lt;code&gt;C-m v&lt;/code&gt; to call the &amp;ldquo;Describe
variable&amp;rdquo; function and enter the name of the map. If you have Helm installed,
you will also see a narrowing list of variable names, which I use all the time
to hunt down variables.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;Sometimes you can get into a situation where one configuration relies on another
piece of code to be loaded first. In the above example, I am assuming that Occur
has been loaded and its keymap exists. Because Occur is part of the Emacs core,
it&#39;s pretty much always loaded first, but this is sloppy coding on my part. A
much more reliable way to make sure things run in order is to use hooks.&lt;/p&gt;
&lt;h3 id=&#34;bonus-how-to-use-hooks&#34;&gt;Bonus: How to Use Hooks&lt;/h3&gt;
&lt;p&gt;This isn&#39;t strictly related to Evil, but it&#39;s good to know as you build up your
Emacs configuration. Hooks are just functions called at certain points in
time. Much like keymaps, each major and minor mode will have hook variables
defined automatically for it. The hook for a mode is called immediately after
that mode is activated, so it&#39;s a great place to put any customization that
relies on that mode being loaded.&lt;/p&gt;
&lt;p&gt;It&#39;s very common to make adjustments to a mode&#39;s keymap within the hook for that
mode (because the keymap variable won&#39;t be defined until the mode is
loaded). This also makes your configuration more efficient because you only run
code in the situations where it&#39;s actually used.&lt;/p&gt;
&lt;p&gt;Emacs provides convenience functions for working with hooks, and the main one to
know is &lt;code&gt;add-hook&lt;/code&gt;. A hook is actually a list of functions that, when a mode is
activated, are called in turn. Just like keymaps, hooks are automatically
defined as the name of the mode with &lt;code&gt;-hook&lt;/code&gt; appended.&lt;/p&gt;
&lt;p&gt;To set up the hjkl bindings in Occur mode only when Occur starts, you could
write it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;occur-mode-hook&lt;/span&gt;
          (lambda ()
            (evil-add-hjkl-bindings occur-mode-map &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;emacs&lt;/span&gt;
              (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-search-forward&lt;/span&gt;
              (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;)       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-search-next&lt;/span&gt;
              (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;)       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-search-previous&lt;/span&gt;
              (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-d&amp;#34;&lt;/span&gt;)     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-scroll-down&lt;/span&gt;
              (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-u&amp;#34;&lt;/span&gt;)     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil-scroll-up&lt;/span&gt;
              (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-w C-w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;other-window&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;add-hook&lt;/code&gt; function prepends the given function to the &lt;code&gt;occur-mode-hook&lt;/code&gt;
variable. In this case, I&#39;m passing an anonymous function (or lambda) to
&lt;code&gt;add-hook&lt;/code&gt; because if I just put the &lt;code&gt;(evil-add-hjkl-bindings ...)&lt;/code&gt; call there
by itself, the result of calling that function would be passed to &lt;code&gt;add-hook&lt;/code&gt; and
it would complain about receiving the wrong variable type.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;So that&#39;s how I make Evil play nice with the various other modes that I use
often. Of course there is a lot more in my configuration, which you&#39;re welcome
to browse on Github, or if you have specific questions feel free to drop a
comment below.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>authoring emacs packages</title>
       <link>http://example.org/post/2015/08/04t104548/0400/authoring-emacs-packages/</link>
       <pubDate>Tue, 04 Aug 2015 10:45:48 -0400</pubDate>
       
       <guid>http://example.org/post/2015/08/04t104548/0400/authoring-emacs-packages/</guid>
       <description>&lt;p&gt;Have you extended Emacs in a novel way? Do you want to share your creation with
the wide world of Emacs users? Well then, you will need to learn how to create a
proper Emacs package.&lt;/p&gt;
&lt;p&gt;Packaging for Emacs is generally pretty easy and there is a lot of help
available, both within Emacs itself and obviously on the Internet. There are a
few things, though, that are conspicuously and annoyingly hard to find help with
so I decided to document them for you.&lt;/p&gt;
&lt;p&gt;Come with me and learn how to create an Emacs Package from scratch.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;An Emacs package, at its most basic level, is just an Elisp file. For a long
time, authors simply distributed &amp;ldquo;.el&amp;rdquo; files via their own websites or FTP sites
and you were on your own to download them, put them somewhere on your local
drive, and make sure that Emacs could find them.&lt;/p&gt;
&lt;p&gt;As you probably know, this isn&#39;t how it&#39;s done today. Now we have interactive
package management built right into Emacs. Thanks to Tom Tromey, who originally
wrote &lt;code&gt;package.el&lt;/code&gt;, there is a standard and it has been broadly adopted. Which
brings me to&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;package-repositories&#34;&gt;Package Repositories&lt;/h2&gt;
&lt;p&gt;If you already know about repositories and want to get down to it, skip over
this section.&lt;/p&gt;
&lt;p&gt;If you want to build a package for Emacs right now, you probably want to target
a popular Emacs package repository. The &amp;ldquo;official&amp;rdquo; repository is ELPA (Emacs
Lisp Package Archive), but contributing to ELPA requires that you complete a
Free Software Foundation copyright assignment document and also requires your
software to comply with FSF copyright and licensing rules. If you wind up
writing something that is amazingly popular and could end up being packaged
within Emacs, you will have to cross that bridge. Until then, there are
alternatives.&lt;/p&gt;
&lt;p&gt;The two other most popular repositories are MELPA and Marmalade. I will very
briefly explain the difference.&lt;/p&gt;
&lt;p&gt;MELPA, or &amp;ldquo;Milkypostman&#39;s Emacs Lisp Package Archive,&amp;rdquo; was started by Donald
Curtis (milkypostman on Github and elsewhere) but is also maintained by Steve
Purcell. The great benefit of MELPA is that all submissions are reviewed by
Steve or Donald and must meet some bare minimum of packaging standards before
being merged. I&#39;ve submitted two packages to MELPA and found the experience
helpful and even pleasurable.&lt;/p&gt;
&lt;p&gt;Marmalade was started by Nic Ferrier and is a bit more like the wild west; you
can get an account on the site, which then gives you access to upload
packages. Provided that you meet some formatting requirements (which I&#39;ll
explain below), your package is in.&lt;/p&gt;
&lt;p&gt;I suppose you could think of Marmalade as a self-service repository and MELPA as
a bit more of a curated collection. MELPA strives to offer packages that don&#39;t
overlap and that provide meaningful and useful functionality to Emacs. Marmalade
is an infrastructure for centralizing the distribution of packages for authors
who don&#39;t want to go through the ELPA legal process.&lt;/p&gt;
&lt;h2 id=&#34;anatomy-of-a-package&#34;&gt;Anatomy of a Package&lt;/h2&gt;
&lt;p&gt;As I said at the start, the bare minimum Emacs package is a single Elisp file,
ending in the file extension &lt;code&gt;.el&lt;/code&gt;. To distribute a single Elisp file, though,
is impolite in this modern world; you should probably have at least:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One or more Elisp files (both of my packages are single files).&lt;/li&gt;
&lt;li&gt;A README file; if you use Github, this is your Github landing page content.&lt;/li&gt;
&lt;li&gt;An Info manual.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, you may not need nor want a full Info manual if your package is quite
simple, but figuring out how to author and distribute my package documentation
in Info format was one of the most frustrating experiences that I encountered,
so I will explain how it can be done.&lt;/p&gt;
&lt;p&gt;Before I get to that, though, let&#39;s talk about basic packaging requirements.&lt;/p&gt;
&lt;h2 id=&#34;package-formatting&#34;&gt;Package Formatting&lt;/h2&gt;
&lt;p&gt;Elisp scripts included in a package have some annotation requirements. These
requirements, mostly concerning comments at the top of the files, are described
in the Packaging chapter of the Emacs Info documentation. You can find it by
pressing &lt;code&gt;C-h i&lt;/code&gt; to open the Info reader and navigating to the &amp;ldquo;Elisp&amp;rdquo; manual,
then the &amp;ldquo;Packaging&amp;rdquo; chapter within it. For the quite lazy, you can also
&lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging.html&#34;&gt;read the manual online&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the things that Emacs documentation isn&#39;t great at is providing
examples of real use. To save you a bit of time decrypting the standards, here
is the bare minimum annotation you should add to your script files, lifted from
my Octopress package:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;;; octopress.el --- A lightweight wrapper for Jekyll and Octopress.

;; Copyright (C) 2015 Aaron Bieber

;; Author: Aaron Bieber &amp;lt;aaron@aaronbieber.com&amp;gt;
;; Version: 1.0
;; Package-Requires ((cl-lib &amp;quot;0.5&amp;quot;))
;; Keywords: octopress, blog
;; URL: https://github.com/aaronbieber/octopress.el

;;; Commentary:

;; Octopress.el is a lightweight wrapper script to help you interact
;; with Octopress blog site and the related Jekyll programs. This
;; package is designed to be unobtrusive and to defer to Octopress and
;; Jekyll as often as possible.

;; This package was built with the assumption of Octopress 3.0 and
;; will probably not work with previous (non-gem) versions of
;; Octopress. Specifically, it expects to be able to use commands like
;; `octopress new post` rather than the old-style `rake new_post[]`.

;; Full documentation is available as an Info manual.

;;; Code:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Quite often, package authors include a license in this preamble. In this case, I
opted for the simple copyright statement and will add specific license text
later. If you submit your package to MELPA, the build system will lift a few
bits from this heading to create your package&#39;s landing page on melpa.org. The
URL and &amp;ldquo;Commentary&amp;rdquo; section are important in that respect.&lt;/p&gt;
&lt;p&gt;Here is what this looks like &lt;a href=&#34;http://melpa.org/#/octopress&#34;&gt;on melpa.org&lt;/a&gt;. (NB:
I might have changed the actual file since this post was written, but you can
always read the real source code.)&lt;/p&gt;
&lt;p&gt;Finally, the very last line of your file should be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;;; octopress.el ends here
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where the &amp;ldquo;octopress.el&amp;rdquo; piece matches the very first line, of course.&lt;/p&gt;
&lt;h3 id=&#34;getting-help&#34;&gt;Getting Help&lt;/h3&gt;
&lt;p&gt;There are many more style conventions that you should follow in your actual
Elisp code; too many to describe here. The easiest way to make sure your package
fits nicely within the Emacs ecosystem is to install both &amp;ldquo;flycheck,&amp;rdquo; the
on-the-fly syntax checker, and &amp;ldquo;flycheck-package,&amp;rdquo; a checker for Elisp package
authors. With &amp;ldquo;flycheck-mode&amp;rdquo; activated and &amp;ldquo;flycheck-package&amp;rdquo; configured, you
will get live warnings in your script files when you&#39;ve done things wrong.&lt;/p&gt;
&lt;h2 id=&#34;read-me&#34;&gt;Read Me&lt;/h2&gt;
&lt;p&gt;Though it&#39;s slightly irritating to keep several versions of documentation in
sync, each are important. The &amp;ldquo;Commentary&amp;rdquo; block is used by Emacs itself and the
packaging systems and repositories; the README file is used by Github, of
course; and the Info manual (described in the next section) is read by humans.&lt;/p&gt;
&lt;p&gt;It&#39;s polite to include a README file with any source code you distribute. The
README has become such an entrenched convention that Neal Stephenson even wrote
a book whose title, &amp;ldquo;Reamde,&amp;rdquo; parodies the concept. If you use Github, as it
seems safe to presume that you do, the README is parsed and displayed on the
landing page of your project.&lt;/p&gt;
&lt;p&gt;If you don&#39;t use Github, or don&#39;t care what your Github landing page looks like,
you can skip the README file if you like. Historically, Emacs packages are
documented solely within the &amp;ldquo;Commentary&amp;rdquo; sections of their source files, and
that seems perfectly adequate to me.&lt;/p&gt;
&lt;p&gt;Of course, if you do provide a README file for use by Github, you can hint its
format with a file extension like &amp;ldquo;.md&amp;rdquo; or &amp;ldquo;.markdown&amp;rdquo; so that Github parses the
file into rich HTML and give your visitors the pleasure of some actual formatting.&lt;/p&gt;
&lt;h2 id=&#34;building-documentation&#34;&gt;Building Documentation&lt;/h2&gt;
&lt;p&gt;The standard format for Emacs packages (and Emacs itself, and basically every
other GNU package) is Info. You can read about the Info format on the
&lt;a href=&#34;http://www.gnu.org/software/texinfo/manual/info-stnd/info-stnd.html#Top&#34;&gt;Stand-alone GNU Info&lt;/a&gt; manual page.&lt;/p&gt;
&lt;h3 id=&#34;what-is-info&#34;&gt;What Is Info?&lt;/h3&gt;
&lt;p&gt;Info itself is a text-based format providing cross-referencing, hierarchical
organization, and some other features. To create a manual in Info format, you
compose it in Texinfo format and use the &lt;code&gt;makeinfo&lt;/code&gt; program to convert it to
Info. Texinfo was designed to yield many formats, so an added benefit is that
you can use &lt;code&gt;makeinfo&lt;/code&gt; to make an HTML format manual as well.&lt;/p&gt;
&lt;p&gt;All of the GNU manual pages I&#39;ve linked to online are HTML versions of their
original Texinfo documents, and can be read directly within Emacs or with the
standalone &lt;code&gt;info&lt;/code&gt; reader in Info format.&lt;/p&gt;
&lt;h3 id=&#34;creating-your-first-manual&#34;&gt;Creating Your First Manual&lt;/h3&gt;
&lt;p&gt;As I explained above, manuals are distributed in Info format, but the best way
to get your manual into the hands of your end user is to insert a directory
entry in the main Emacs Info contents page (the page reached with &lt;code&gt;C-h i&lt;/code&gt;). To
do this requires a little fiddling, but the MELPA build system will take care of
it for you if you simply include your manual in Texinfo format.&lt;/p&gt;
&lt;p&gt;My recommendation is to target MELPA for distribution and include your manual in
Texinfo format. There are two major advantages here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For you, it makes the distribution easier; MELPA&#39;s build system will convert
your Texinfo manual to Info format and generate the directory stub file that
Emacs looks for when installing packages.&lt;/li&gt;
&lt;li&gt;For ambitious end users, it allows you to include only the original Texinfo
file in your source control repository; anyone could take that and build other
formats for themselves if they have preferences about how to read documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&#39;s also, in my opinion, bad practice to include generated files in source
control, especially when the distribution targets platforms that necessarily
have the build mechanisms. Emacs ships with &lt;code&gt;makeinfo&lt;/code&gt;, so there is really no
reason to go do that transformation yourself and bundle its output.&lt;/p&gt;
&lt;p&gt;OK, so how do you create this &amp;ldquo;.texi&amp;rdquo; file? Easy, just learn Texinfo format!
Don&#39;t worry, in spite of its familiar prefix, Texinfo is a lot simpler than
LaTeX, and you only need a few pieces of boilerplate to make a manual that
converts nicely into Info or HTML formats.&lt;/p&gt;
&lt;h3 id=&#34;texinfo-crash-course&#34;&gt;Texinfo Crash Course&lt;/h3&gt;
&lt;p&gt;Texinfo format provides special keywords that start with &amp;ldquo;@&amp;rdquo; symbols. These
keywords can be single identifiers, like &lt;code&gt;@settitle&lt;/code&gt;, which sets the title of
the document, or block pairs, like &lt;code&gt;@titlepage&lt;/code&gt; / &lt;code&gt;@end titlepage&lt;/code&gt;, where the
content between the start and end symbols has some special meaning.&lt;/p&gt;
&lt;p&gt;To get started writing a Texinfo manual for your package, create a new file in
the root of your package with the extension &amp;ldquo;.texi&amp;rdquo;. It&#39;s customary to give it
the same base name as your package. For example, if your package is called
&amp;ldquo;superfrobnicator,&amp;rdquo; your manual would be called &amp;ldquo;superfrobnicator.texi&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Great, so what do you put in this file? Texinfo format is described in detail in
&lt;a href=&#34;http://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html&#34;&gt;its online manual&lt;/a&gt;. Of particular importance is the section titled
&amp;ldquo;Beginning a Texinfo File.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you are authoring your Texinfo file in Emacs itself, which is certainly
recommended, you can make use of &amp;ldquo;Texinfo Mode,&amp;rdquo; which gives you some handy
shortcuts. Provided that you have &lt;code&gt;makeinfo&lt;/code&gt; in your path, which you should, you
can press &lt;code&gt;C-c C-m C-b&lt;/code&gt; to &amp;ldquo;make&amp;rdquo; the whole buffer. This will run the contents
of the current buffer through &lt;code&gt;makeinfo&lt;/code&gt; with an Info format target, and open
the resulting Info document in a new buffer within Emacs. You can proofread,
navigate, and see what your end-user&#39;s experience will be like.&lt;/p&gt;
&lt;p&gt;Once you&#39;re satisfied, just commit the &amp;ldquo;.texi&amp;rdquo; file into source control so that
it&#39;s included with the package destined for MELPA and let MELPA&#39;s build process
take care of the rest! Users who install your package from MELPA will have your
package&#39;s documentation linked from the main Emacs Info page.&lt;/p&gt;
&lt;p&gt;There are a few caveats to how this all comes together, so make sure to run a
local MELPA build as described in the &amp;ldquo;Contributing to MELPA&amp;rdquo; section of MELPA&#39;s
own README so that you can see any warnings or errors that might be thrown. In
particular, there are certain expected values for tags like &lt;code&gt;@dircategory&lt;/code&gt; and
&lt;code&gt;@direntry&lt;/code&gt; and certain acceptable formats. Everything is described in the
documentation for Texinfo.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>what ive learned from 20 000 php files</title>
       <link>http://example.org/post/2015/07/14t080519/0400/what-ive-learned-from-20-000-php-files/</link>
       <pubDate>Tue, 14 Jul 2015 08:05:19 -0400</pubDate>
       
       <guid>http://example.org/post/2015/07/14t080519/0400/what-ive-learned-from-20-000-php-files/</guid>
       <description>&lt;p&gt;{% img right /images/uploads/20-000-php-files/watch-mechanism.png %}&lt;/p&gt;
&lt;p&gt;Aside from the well-known considerations of the computer science discipline like
algorithmic efficiency, decoupling, cohesion, and so on, working on a huge
codebase with a large number of engineers brings its own challenges.&lt;/p&gt;
&lt;p&gt;Since joining Wayfair, I have had the opportunity to work on a larger system and
with a larger team than I ever have before.&lt;/p&gt;
&lt;p&gt;This is what that experience has taught me. &lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;First, a brief history.&lt;/p&gt;
&lt;p&gt;My career as a programmer began in earnest in 1999 when I was brought on
part-time at a tiny startup in Connecticut to revamp their website. The website
was straightforward; a sales site. I wrote it in PHP. It was PHP 3.x back then.&lt;/p&gt;
&lt;p&gt;The website grew into an application, allowing file uploads, tracking of account
statuses, and granular user security. My part-time job became a full-time
job. The company was acquired by a large consulting firm. Until the last six to
eight months of my time there I was the sole PHP developer. The codebase was, I
would guess, fewer than 100 files.&lt;/p&gt;
&lt;p&gt;The stress forced me out of that job and I took a position working in ColdFusion
(as this blog&#39;s title implies). The codebase was significantly larger, on the
order of hundreds of files, and the engineering team grew over six years from
two people to twelve on-shore and 100+ off-shore before I left the company.&lt;/p&gt;
&lt;p&gt;We undertook a PHP conversion, which was still incomplete when I joined Wayfair.&lt;/p&gt;
&lt;p&gt;Wayfair&#39;s codebase is over 20,000 PHP files and our engineering team is nearly
400 strong and growing. It is the largest system I&#39;ve ever worked on and the
largest engineering team I&#39;ve ever worked with. These are the principles I&#39;ve
learned to be important, which apply to systems and teams of any size, but that
become &lt;em&gt;essential&lt;/em&gt; when a system and team are as large as ours.&lt;/p&gt;
&lt;h2 id=&#34;legibility&#34;&gt;Legibility&lt;/h2&gt;
&lt;p&gt;Legibility trumps terseness and even efficiency in the majority of cases. Though
it is true that PHP might be intrinsically slower than a compiled language like
C# or Java, the difference between a FOR loop and a FOREACH loop, for
example, is trivial with normal workloads. There are few cases where minor
syntax choices affect performance dramatically.&lt;/p&gt;
&lt;p&gt;Minor syntax choices, however, can affect legibility dramatically. As an
example, a long-form IF/ELSE statement is much more readable than a
nested ternary.&lt;/p&gt;
&lt;p&gt;Compare this mess&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
$show_heading_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($global_heading_count) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
                      (&lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt;) $global_heading_count &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                      ((   &lt;span style=&#34;color:#a6e22e&#34;&gt;Heading_Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;can_show_local_headings&lt;/span&gt;()
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Heading_Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;local_headings&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
                      &lt;span style=&#34;color:#a6e22e&#34;&gt;Heading_Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;local_heading_total&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
$show_heading_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Default heading count.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;empty&lt;/span&gt;($global_heading_count)) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// Use the global heading count, if available.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  $show_heading_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;int&lt;/span&gt;) $global_heading_count
} &lt;span style=&#34;color:#66d9ef&#34;&gt;elseif&lt;/span&gt; (   &lt;span style=&#34;color:#a6e22e&#34;&gt;Heading_Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;can_show_local_headings&lt;/span&gt;()
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Heading_Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;local_headings&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// Use the local heading count, if more than one.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  $show_heading_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Heading_Model&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;local_heading_total&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&#39;s not even to mention that ternaries in PHP are inexplicably
left-associative, which causes them to do the opposite of what you expect
without carefully placed parentheses.&lt;/p&gt;
&lt;p&gt;When you work with a very large team, you have to remember that the code you
spent an hour composing will be read for tens of hours by many other
people. Think of them as you write it.&lt;/p&gt;
&lt;h2 id=&#34;standards-are-important&#34;&gt;Standards Are Important&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The nice thing about standards is that you have so many to choose from.&lt;/p&gt;
&lt;p&gt;&amp;mdash; Andrew S. Tanenbaum, &lt;em&gt;Computer Networks, 2nd ed., p. 254&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you contribute to more than one project written in the same language by
different teams, you may have had the experience of feeling a little bit &amp;ldquo;lost&amp;rdquo;
when switching between them if they use very different syntax conventions. Not
everyone is as sensitive to dramatic changes in format and style, but we humans
are excellent at pattern recognition and when patterns change unexpectedly, it
can be disorienting.&lt;/p&gt;
&lt;p&gt;For large teams, it is critical to agree on style guidelines and to stick to
them. When a single style standard is followed, the code is more legible and
predictable overall. This becomes especially important when someone needs to
work on code that they have never seen before, which may have been developed by
an entirely different group.&lt;/p&gt;
&lt;p&gt;We like to talk about this style issue as a matter of &amp;ldquo;cognitive load,&amp;rdquo; which
is the perceived mental effort to carry out a task. Certainly the act of
programming itself carries a significant cognitive load, but so does parsing the
format of the code. If that format is constantly changing, the cognitive load
remains at a higher level than it has to be, which slows everything down.&lt;/p&gt;
&lt;p&gt;Understanding what one block of code does is much easier if it is visually and
syntactically similar to other blocks of code that do similar things. This is
why a single standard is essential.&lt;/p&gt;
&lt;p&gt;At Wayfair, we use the popular &amp;ldquo;PHP Codesniffer&amp;rdquo; package to emit warnings and
errors when code deviates from the standard. The standard itself is relatively
organic and has evolved with our teams, but the benefit of using a system like
this is that we are always transforming the code to move &lt;em&gt;closer&lt;/em&gt; to a &lt;em&gt;single
standard&lt;/em&gt;, which can be well-understood because it is described by the PHP
Codesniffer rules themselves.&lt;/p&gt;
&lt;p&gt;Adhering to this style standard has, in no small way, made our large team more
productive.&lt;/p&gt;
&lt;h2 id=&#34;performance-is-not-a-destination&#34;&gt;Performance Is Not a Destination&amp;hellip;&lt;/h2&gt;
&lt;p&gt;&amp;hellip; It is a journey.&lt;/p&gt;
&lt;p&gt;Years ago, we tried giving one person the sole task of making performance
improvements on our website. That approach works in terms of delivering results,
but it creates a &lt;em&gt;moral hazard&lt;/em&gt; whereby engineers in general are sheltered from
the performance-related decisions they make in their regular work. &amp;ldquo;The
performance guy will clean it up&amp;rdquo; is what you might think.&lt;/p&gt;
&lt;p&gt;Eventually, one person isn&#39;t enough to clean up the performance issues that
creep into your code as hundreds of people make changes on a daily basis. At
that point, you can either commit to hiring more performance engineers or you
can distribute the work.&lt;/p&gt;
&lt;p&gt;We chose to distribute the work. It is still helpful to have subject matter
experts around who can coach and keep an eye on metrics, but when it is
everyone&#39;s job to think about performance as they write and review code it
slows the natural erosion of site speed.&lt;/p&gt;
&lt;p&gt;Even then, your job is never through. With hundreds of changes made daily,
performance is a constant battle that will never be fully won. It is necessary
to understand this and to structure teams and priorities around it.&lt;/p&gt;
&lt;h2 id=&#34;communication-is-critical&#34;&gt;Communication Is Critical&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[O]rganizations which design systems &amp;hellip; are constrained to produce designs which
are copies of the communication structures of these organizations.&lt;/p&gt;
&lt;p&gt;&amp;mdash; M. Conway&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As Melvin Conway implies by this quote, if your teams are fractured and don&#39;t
talk to one another and keep messy commit logs and don&#39;t write documentation and
can&#39;t understand when to comment their code, the system they&#39;ve written is going
to be fractured and generally a pain in the ass to maintain.&lt;/p&gt;
&lt;p&gt;There are five major ways that programmers communicate, and each one is essential:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Synchronously: face-to-face, chat, etc.&lt;/li&gt;
&lt;li&gt;Asynchronously: e-mail, mostly.&lt;/li&gt;
&lt;li&gt;In commit messages.&lt;/li&gt;
&lt;li&gt;By commenting the code itself.&lt;/li&gt;
&lt;li&gt;Through documentation separate from the code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some organizations may prioritize one type of communication over another due to
preference or necessity, but the thing to keep in mind is that when engineers
talk to one another, especially between cross-functional groups, they make the
product better. Never forget that &lt;strong&gt;commit messages&lt;/strong&gt; and &lt;strong&gt;comments&lt;/strong&gt; are
at least as important as chats and e-mails for sharing knowledge about a system.&lt;/p&gt;
&lt;p&gt;It strikes wrenching pain into my very core when I see &lt;em&gt;thoughtless commit
messages&lt;/em&gt;. Remember, these words are for posterity, so try to show a little bit
of pride.&lt;/p&gt;
&lt;p&gt;Personally, I think that e-mail is a scourge. The best way to explain how code
works is through comments. The best way to annotate changes to code through time
is through commit messages. The best way to document systems at a high level is
through a shared knowledge base.&lt;/p&gt;
&lt;p&gt;If you use some platform to make documentation available across your engineering
teams, make sure it has the ability to easily cross-reference, categorize, and
search content. An example of a platform that does this is MediaWiki, the
software that powers Wikipedia.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>a gentle introduction to emacs configuration</title>
       <link>http://example.org/post/2015/07/05t130622/0400/a-gentle-introduction-to-emacs-configuration/</link>
       <pubDate>Sun, 05 Jul 2015 13:06:22 -0400</pubDate>
       
       <guid>http://example.org/post/2015/07/05t130622/0400/a-gentle-introduction-to-emacs-configuration/</guid>
       <description>&lt;p&gt;Since giving my talk,
[Evil Mode, or, How I Learned to Stop Worrying and Love Emacs][evil-mode] at the
Boston Vim meetup group, I have been inundated with questions, both about how I
pulled off this transition and about Emacs itself and how it works.&lt;/p&gt;
&lt;p&gt;One question that comes up more than the others is how to &amp;ldquo;properly&amp;rdquo; configure
Emacs. Because Emacs is essentially a Lisp engine that just happens to ship with
text editing capabilities, configuring it requires writing or modifying some
Lisp expressions, which is quite different from how Vim is configured.&lt;/p&gt;
&lt;p&gt;Here, I will gently guide you through the very basics of Emacs configuration and
show you where to get help so that you can embark on your Emacs customization
and personalization journey with confidence.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;[evil-mode]: {% post_url 2015-06-03-evil-mode %}&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;There are three ways to extend and personalize your Emacs environment:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;By installing packages that change Emacs&amp;rsquo; behavior or add new features.&lt;/li&gt;
&lt;li&gt;Using the built-in &lt;code&gt;customize&lt;/code&gt; facility.&lt;/li&gt;
&lt;li&gt;By editing your Emacs configuration scripts by hand.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Installing packages may also require a bit of #3 depending on what the package
does, of course. I will walk you through each of these and drop a few hints
along the way.&lt;/p&gt;
&lt;h2 id=&#34;installing-packages&#34;&gt;Installing Packages&lt;/h2&gt;
&lt;p&gt;I covered this pretty thoroughly in my previous post,
[From Vim to Emacs in Fourteen Days][from-vim]. You&#39;ll want to follow the
instructions there to configure the correct package repositories. For more
information about the configuration files specifically, see the section below.&lt;/p&gt;
&lt;p&gt;The Emacs packaging system, &lt;code&gt;package.el&lt;/code&gt;, ships along with Emacs, so you can
start using it immediately. As long as you have the initialization command,
&lt;code&gt;(package-initialize)&lt;/code&gt;, in your configuration file, you can manage packages
interactively. Note that the parentheses around that term are required; all
expressions in Emacs Lisp are &lt;em&gt;lists&lt;/em&gt;, surrounded by parentheses. I&#39;ll talk more
about this later.&lt;/p&gt;
&lt;p&gt;To install a package, all you have to do is call the package list
function. Press &lt;code&gt;M-x&lt;/code&gt; (hold &amp;ldquo;alt&amp;rdquo; and press &amp;ldquo;x&amp;rdquo;), enter the command
&lt;code&gt;package-list-packages&lt;/code&gt;, and press return (or &lt;code&gt;RET&lt;/code&gt;, as it is commonly
written). The latest package lists will be downloaded from your configured
repositories and the list will appear on screen.&lt;/p&gt;
&lt;p&gt;Even if you are using Evil Mode, the package list will likely be using Emacs key
mappings. Here are some tips for getting around:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-v&lt;/code&gt; scrolls down one screen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-v&lt;/code&gt; scrolls up one screen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-s&lt;/code&gt; starts the incremental search function. Press &lt;code&gt;C-s&lt;/code&gt; repeatedly to move
to the next match, &lt;code&gt;RET&lt;/code&gt; to complete the search and stay where you are, &lt;code&gt;C-g&lt;/code&gt;
to cancel and go back to where you started. &lt;code&gt;C-g&lt;/code&gt; is the universal &amp;ldquo;get me out
of here&amp;rdquo; key in Emacs; learn it well.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; marks a package for installation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; marks a package for deletion.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; un-marks a package.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; executes the operations as marked (so mark things you want with &lt;code&gt;i&lt;/code&gt; and
then press &lt;code&gt;x&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; quits the package interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see a full list of available key mappings by asking Emacs for help with
the current mode (&amp;ldquo;Package Menu Mode&amp;rdquo;). Press &lt;code&gt;C-h&lt;/code&gt; followed by &lt;code&gt;m&lt;/code&gt;. You can get
help on a lot of things in Emacs by pressing &lt;code&gt;C-h&lt;/code&gt; followed by some key.&lt;/p&gt;
&lt;p&gt;A split window will open containing help on Package Menu Mode, but the window
won&#39;t have focus. To move the focus to the other window, you must use Emacs&amp;rsquo;
window commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-x o&lt;/code&gt; (press &lt;code&gt;C-x&lt;/code&gt; followed by &lt;code&gt;o&lt;/code&gt;) to move focus to the &amp;ldquo;other&amp;rdquo; window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 0&lt;/code&gt; to kill the current window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x 1&lt;/code&gt; to make the current window the &amp;ldquo;one and only&amp;rdquo; window (hide all other
windows). This does not &lt;em&gt;kill&lt;/em&gt; the other windows, it only hides them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should be enough to get you started. If you run into snags while installing
and configuring packages, you should turn to Google to find help on the specific
packages you&#39;re using or the scenarios you&#39;re encountering.&lt;/p&gt;
&lt;p&gt;[from-vim]: {% post_url 2015-05-24-from-vim-to-emacs-in-fourteen-days %}&lt;/p&gt;
&lt;h2 id=&#34;customize&#34;&gt;Customize&lt;/h2&gt;
&lt;p&gt;The Emacs &amp;ldquo;Easy Customization Interface&amp;rdquo; is a fully interactive system for
altering Emacs settings. But that&#39;s not all: Customize can also interactively
change settings for all installed packages, too!&lt;/p&gt;
&lt;p&gt;Package authors can call the function &lt;code&gt;defcustom&lt;/code&gt; to declare variables that can
be customized, and, using a rich set of attributes that define what values are
permitted, the Customize interface draws a GUI representation of that
setting. When you save the settings, the Customize system will write the Emacs
Lisp code for configuring the settings you&#39;ve changed and write that into your
configuration file for you. All of those values are stored together in a single
variable called &lt;code&gt;custom-set-variables&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are two main ways to start the Easy Customization Interface:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;M-x customize RET&lt;/code&gt;, or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x customize-group RET &amp;lt;group name&amp;gt; RET&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first will open the initial customization interface, which has links to the
general sub-sections of configuration, help on the interface itself, and a
search function.&lt;/p&gt;
&lt;p&gt;The second function will jump you directly into the customization settings for a
particular area, which is usually the name of a package itself, although some
larger packages expose multiple configuration &amp;ldquo;groups.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you aren&#39;t sure what you&#39;re looking for, start with &lt;code&gt;M-x customize RET&lt;/code&gt; and
use the search function. It&#39;s best to search for one or two words only; Emacs
searches the &lt;em&gt;human-readable names&lt;/em&gt; of customization options, which are
typically not incredibly verbose.&lt;/p&gt;
&lt;p&gt;There are certain keys you can press to follow links, expand and collapse
sections, and so on. You can find help on those within the customization
interface itself (by following the link to the manual page; just press &lt;code&gt;RET&lt;/code&gt;
with your cursor over it, as you can with most underlined text), or by viewing
the mode help as I explained in the previous section (&lt;code&gt;C-h m&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Once you have updated some settings, you can either &lt;em&gt;Apply&lt;/em&gt; the settings, which
sets the variables in your current session only, or &lt;em&gt;Apply and Save&lt;/em&gt;, which
writes them out into &lt;code&gt;custom-set-variables&lt;/code&gt; in your configuration file.&lt;/p&gt;
&lt;p&gt;You can always &lt;em&gt;Apply&lt;/em&gt; a setting, leave the customization interface and try it
out, then re-open customize and press &lt;em&gt;Apply and Save&lt;/em&gt;. If you have not yet
saved the settings, you can also press &lt;em&gt;Revert&amp;hellip;&lt;/em&gt; to reset things to the way
they were before.&lt;/p&gt;
&lt;h2 id=&#34;edit-configuration-files&#34;&gt;Edit Configuration Files&lt;/h2&gt;
&lt;p&gt;One of the first places to look for specific information about how Emacs works
is the Emacs manual itself. In the &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html&#34;&gt;&amp;ldquo;Init File&amp;rdquo;&lt;/a&gt; section, you will find
that Emacs searches for configuration in three places (in this order):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;~/.emacs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.emacs.el&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, just like in Vim, you can write some code to load other configuration
files and organize things however you like. Most people start with one
configuration file and take it from there.&lt;/p&gt;
&lt;p&gt;By now, you probably have a configuration file with at least the Emacs package
repositories settings that I outlined in the other post linked from the top of
this one, and maybe you have a &lt;code&gt;custom-set-variables&lt;/code&gt; declaration there, which
was written for you by the Easy Customization Interface. So, how do you know
what other variables you can set?&lt;/p&gt;
&lt;p&gt;Of course there is always Google; most settings in Emacs and its popular
packages are described in the official Emacs manual on gnu.org and in the
packages&amp;rsquo; README files, which are usually found on Github or another source code
hosting site. It&#39;s pretty easy to find the names of variables and what they do
on the Internet.&lt;/p&gt;
&lt;p&gt;Another thing you can do is use Emacs&amp;rsquo; variable documentation. Even variables
that are not available for customization are often documented within the source
code, and that documentation can be accessed interactively. To get help on a
variable, press &lt;code&gt;C-h v &amp;lt;variable name&amp;gt; RET&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you have the great &amp;ldquo;Helm&amp;rdquo; package installed, &lt;code&gt;C-h v&lt;/code&gt; will also open an
interactive &amp;ldquo;narrowing list&amp;rdquo; window displaying the names of variables that match
what you&#39;ve typed so far. I can&#39;t recommend Helm enough, it&#39;s a great way to
explore what values are available at most prompts.&lt;/p&gt;
&lt;p&gt;Let&#39;s say you want to change a setting in Python Mode. For example, you are a
rebellious sort and prefer to ignore PEP 8 and indent your code with two spaces
instead of four. Let&#39;s try to find the variable for this using Helm. First, you
must have Python Mode loaded or Emacs will not know about any of its declared
variables; if you have edited a Python file in your current session at any time,
Python Mode should be loaded already, but you can also set the current buffer to
Python Mode to load it. This is just an example, anyway.&lt;/p&gt;
&lt;p&gt;To see if there is an indent offset variable, press &lt;code&gt;C-h v&lt;/code&gt; and enter &amp;ldquo;python
offset&amp;rdquo;. In the Helm list you should see that the top match is a variable called
&lt;code&gt;python-indent-offset&lt;/code&gt;. That sounds like the right one! Press &lt;code&gt;RET&lt;/code&gt; to accept
that match and a split window will open with the documentation for that
variable. Amazing.&lt;/p&gt;
&lt;p&gt;It tells us that the variable is defined in a file that is part of the Python
Mode package (&lt;code&gt;python.el&lt;/code&gt;), and that its current value is 4. It also tells us
that this variable can be customized. You can press &lt;code&gt;RET&lt;/code&gt; over the &amp;ldquo;customize&amp;rdquo;
link to jump to this value in the Easy Customization Interface.&lt;/p&gt;
&lt;p&gt;If you wish to set this value yourself, you can add a declaration to your init
file. There&#39;s just one thing: it&#39;s best to set these mode-specific variables
only when we are using that mode. Otherwise, you will have all sorts of
variables floating around in memory and not being used. We can&#39;t have that.&lt;/p&gt;
&lt;p&gt;To set this variable only when Python Mode is invoked, we can use a &lt;em&gt;hook&lt;/em&gt;. This
is a very common pattern in Emacs configuration. Here is what our hook might
look like for setting this value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt;
          (lambda ()
            (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; python-indent-offset &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;add-hook&lt;/code&gt; function adds the provided function to the list of functions to
be called when Python Mode starts. All Emacs modes provide a variable called
&lt;code&gt;&amp;lt;mode-name&amp;gt;-hook&lt;/code&gt; that you can use to trigger your own stuff whenever that mode
is loaded up. Here, we have provided a simple lambda (anonymous function) to set
the &lt;code&gt;python-indent-offset&lt;/code&gt; variable to &lt;code&gt;2&lt;/code&gt; when Python Mode loads. That&#39;s it!&lt;/p&gt;
&lt;p&gt;Of course, you don&#39;t need to use a lambda. If you want to use a named function
you can simply pass that function to &lt;code&gt;add-hook&lt;/code&gt;. To pass a function without
evaluating it, you must quote it by prepending an apostrophe. This is what it
might look like if you structured it that way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun configure-python-mode
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; python-indent-offset &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))

(add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;python-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;configure-python-mode&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, you can evaluate Lisp expressions directly within Emacs, which can be
helpful when you want to test out new configuration options. Let&#39;s say you want
to set up this hook right now, to see if it works. Let&#39;s use the first example
with the lambda because it is a single statement. Place your cursor immediately
after the closing parenthesis of the expression. This is a little tricky; if you
are using Evil Mode you will need to be in insert mode so that the insertion
cursor is &lt;em&gt;after&lt;/em&gt; the closing parenthesis.&lt;/p&gt;
&lt;p&gt;Now, press &lt;code&gt;M-x eval-last-sexp RET&lt;/code&gt; (this is short for &amp;ldquo;evaluate last
S-expression&amp;rdquo;). The result of evaluating the expression will be printed on the
bottom line of the Emacs window (what we call the &amp;ldquo;minibuffer&amp;rdquo;). Because
&lt;code&gt;add-hook&lt;/code&gt; yields the value of the new hook function, it should print out the
lambda expression. Very often the result of evaluating Lisp expressions is
simply &lt;code&gt;nil&lt;/code&gt;, and that&#39;s OK.&lt;/p&gt;
&lt;p&gt;Now the value is set! You should be able to start Python Mode and see that the
offset is set to &lt;code&gt;2&lt;/code&gt; instead of &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more information about Emacs Lisp, check out Caio Rordrigues&amp;rsquo; amazingly
thorough &lt;a href=&#34;https://github.com/caiorss/Emacs-Elisp-Programming&#34;&gt;Emacs Lisp Programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Comments? I&#39;d love to hear them, just use the comments section below.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>shadow it is the canary in the coal mine</title>
       <link>http://example.org/post/2015/06/13t063526/0400/shadow-it-is-the-canary-in-the-coal-mine/</link>
       <pubDate>Sat, 13 Jun 2015 06:35:26 -0400</pubDate>
       
       <guid>http://example.org/post/2015/06/13t063526/0400/shadow-it-is-the-canary-in-the-coal-mine/</guid>
       <description>&lt;p&gt;In the early 20th century, long before &amp;ldquo;information technology&amp;rdquo; was a phrase
anyone had heard of, coal miners brought canaries into the mines with them
because the birds, being warm-blooded and more sensitive than humans to most
environmental effects, would become ill from carbon monoxide or other toxic
gases found in the mine long before the miners would, giving them a chance to
escape or take protective action.&lt;/p&gt;
&lt;p&gt;Such &amp;ldquo;animal sentinels&amp;rdquo; saved many lives by acting as an early warning system
for dangerous conditions that the humans could not sense themselves (carbon
monoxide in particular being entirely without scent), and the phrase &amp;ldquo;canary in
the coal mine&amp;rdquo; came to be used as a general term for something that provides a
signal of danger.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Shadow IT&amp;rdquo; is a term used to describe systems put in place within organizations
without explicit organizational approval. A very simple example would be some
team deciding to use their personal Google Docs accounts to track project data
in spreadsheets rather than Microsoft Office documents on an internal file
share. Shadow IT is generally perceived as a security or privacy risk because
the organization doesn&#39;t have the access and auditing controls built into
approved solutions.&lt;/p&gt;
&lt;p&gt;Nevertheless, Shadow IT &lt;em&gt;is&lt;/em&gt; a sign of danger. It&#39;s an indication that approved
solutions don&#39;t meet all of an organization&#39;s needs. It should be treated not
strictly as a departure from the acceptable path, but as a strong signal that
existing solutions are inadequate. &lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;For example, collaboration tools tend to be adopted as &amp;ldquo;shadow IT&amp;rdquo; resources
because so many free SaaS solutions exist and it&#39;s fall-down easy to sign up for
and start using them. When your organization already has an internal, approved,
secure collaboration solution, why would a team start using some &amp;ldquo;freemium&amp;rdquo;
external tool? Are they trying to sabotage the organization&#39;s success?&lt;/p&gt;
&lt;p&gt;Hopefully they are not, but &lt;em&gt;why would employees use a tool with less
integration&lt;/em&gt; is the correct question for the IT department to be asking. IT
departments should be treating other departments within the company as clients
and constantly re-evaluating whether they are providing the tools necessary for
those other teams to be as productive as possible.&lt;/p&gt;
&lt;p&gt;Here are a few specific questions that an IT department should consider asking:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What feature or features does this external tool have that existing internal
solutions do not?&lt;/li&gt;
&lt;li&gt;What is the cost basis of these external alternatives; would a hosted
solution be more or less expensive than existing internal solutions, taking
into account maintenance and operational costs?&lt;/li&gt;
&lt;li&gt;When the approved internal solution was put in place, were alternatives
evaluated and were key participants polled for their feedback?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Essentially, &amp;ldquo;shadow IT&amp;rdquo; can be a source of innovation and advancement within an
organization&#39;s IT infrastructure, but only if it is welcomed as a proof of
concept and used to start productive conversation among separate teams to
discover what their motivations are and how the organization can provide
approved solutions that make everyone more productive.&lt;/p&gt;
&lt;p&gt;After all is said and done, an approved solution is almost always preferable to
some third-party solution. With the full force of the organization&#39;s support
structure brought to bear on it, the integration with other tools, reliability
and availability, and adoption across teams will be superior. What IT leaders
need to understand is that the approved solution is not &lt;em&gt;automatically&lt;/em&gt; the
superior one.&lt;/p&gt;
&lt;p&gt;As another gratuitous example, just because your company uses Lotus Notes
doesn&#39;t mean it&#39;s automatically the best e-mail client or collaboration
platform. It will likely be the most broadly adopted, but I guarantee there will
be employees wishing they had Microsoft Exchange or Google Apps instead.&lt;/p&gt;
&lt;p&gt;Effective IT departments structure themselves as service organizations and
internalize instances of &amp;ldquo;shadow IT&amp;rdquo; as oversights to be remedied.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>evil mode</title>
       <link>http://example.org/post/2015/06/03t201647/0400/evil-mode/</link>
       <pubDate>Wed, 03 Jun 2015 20:16:47 -0400</pubDate>
       
       <guid>http://example.org/post/2015/06/03t201647/0400/evil-mode/</guid>
       <description>&lt;p&gt;&amp;ldquo;Evil Mode, or, How I Learned to Stop Worrying and Love Emacs&amp;rdquo;&lt;/p&gt;
&lt;p&gt;That was the title of the talk that I gave at the
&lt;a href=&#34;http://www.meetup.com/The-Boston-Vim-Meetup/&#34;&gt;Boston Vim Meetup&lt;/a&gt; group. As you
all may know, I was a Vim user for 15 years and I&#39;ve been attending the Boston
Vim meetups for quite a while, so this was an interesting experience for me.&lt;/p&gt;
&lt;p&gt;I think it might be an interesting experience for you, too, so I&#39;m posting the
video here so you can all enjoy it in the privacy of your own homes!&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;The goal of this talk was to explore some of the features that the Vim user
community at large seems to value (asynchronous operations, etc.) as
demonstrated by the NeoVim project (a self-described &amp;ldquo;ambitious fork&amp;rdquo; of Vim),
and how Emacs provides those features already.&lt;/p&gt;
&lt;p&gt;In the talk, I mention &amp;ldquo;Vim emulators&amp;rdquo; in an attempt to point out that even
vehement Vim users are happy to use &amp;ldquo;Vim-like&amp;rdquo; interfaces in other programs
because it is the modal approach and semantic key mappings that they love; not
Vim the program itself.&lt;/p&gt;
&lt;p&gt;That was, admittedly, not a rigorous exploration of Vim&#39;s heritage, and may have
given Vim more credit than it was due. In point of fact, interfaces such as bash
or zsh&#39;s &amp;ldquo;vi mode&amp;rdquo; are emulating vi more than they are Vim.&lt;/p&gt;
&lt;p&gt;Nevertheless, these UI conventions are powerful, and Evil Mode brings them to
you in as much completeness as I have seen anywhere outside of vi or Vim itself.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>dont be typecast by php</title>
       <link>http://example.org/post/2015/05/25t215817/0400/dont-be-typecast-by-php/</link>
       <pubDate>Mon, 25 May 2015 21:58:17 -0400</pubDate>
       
       <guid>http://example.org/post/2015/05/25t215817/0400/dont-be-typecast-by-php/</guid>
       <description>&lt;p&gt;When I tell people I meet that I am a PHP developer, it&#39;s not too unusual for
them to scoff or even laugh. In spite of PHP&#39;s enormous popularity, its
unflinching support by the unstoppable Facebook engineering machine, and its
continuous and impressive improvement as a language year after year, many people
in the software industry are openly derisive toward PHP.&lt;/p&gt;
&lt;p&gt;Don&#39;t let PHP&#39;s own reputation sully yours; don&#39;t let PHP itself typecast you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In television, film, and theatre, typecasting is the process by which a
particular actor becomes strongly identified with a specific character; one or
more particular roles; or, characters having the same traits or coming from
the same social or ethnic groups.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Typecasting_(acting)&#34;&gt;Wikipedia, &amp;ldquo;Typecasting (Acting)&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You are more than the language you use, or even prefer. Moreover, the language
you use usually has very little to do with your success as an engineer, or even
the success of any business using it. Let me give you some advice.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;First, PHP is not a bad language. It&#39;s a quirky language to be sure, but all
languages have quirks. The last few minor versions of PHP have dramatically
increased its capabilities, elegance, and performance, and the next major
version is positioned to make further leaps in all of those categories.&lt;/p&gt;
&lt;p&gt;I have had a twisted love affair with PHP for over 15 years; it wasn&#39;t the first
language I learned (that was BASIC, followed by Perl), nor is it the language I
like the most (which is probably Python at the moment), but it&#39;s still the first
thing I reach for when I want to put something dynamic on the web.&lt;/p&gt;
&lt;p&gt;The reason that the statement &amp;ldquo;I am a PHP developer&amp;rdquo; is broadly misunderstood is
because it is &lt;em&gt;meaningless&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;PHP is a victim of its own popularity. Kids fresh out of school writing
WordPress plug-ins or tweaking Drupal configurations are calling themselves &amp;ldquo;PHP
developers,&amp;rdquo; and there are &lt;em&gt;thousands&lt;/em&gt; of them. The reality is that the majority
of people who are reading and writing PHP on a daily basis, for money, wouldn&#39;t
make it through the first ten minutes of a Facebook engineering interview. Hell,
I probably wouldn&#39;t, either.&lt;/p&gt;
&lt;p&gt;If you are one of those people, I applaud you, especially if you love your
work. Being paid to do something you love should be everyone&#39;s goal in life. My
advice to you is: learn another language, too. Don&#39;t let PHP be the only window
you have into the amazing world of computer science.&lt;/p&gt;
&lt;p&gt;However, if you are doing really impressive or complicated things with PHP, like
scaling an e-commerce platform to over 2,500 impressions per second and over a
billion dollars a year, I have different advice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don&#39;t be ashamed of using PHP, but&lt;/li&gt;
&lt;li&gt;Don&#39;t let PHP &lt;em&gt;define&lt;/em&gt; your skills.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I was in college in the early 2000s, and even though the &amp;ldquo;millennium bug&amp;rdquo; had
already done whatever damage it was going to do, one of my computer science
professors told me that he received constant phone calls asking whether he had
students learning COBOL. If you were any good at COBOL between 1998 (when the
&amp;ldquo;Year 2000 Information and Readiness Disclosure Act&amp;rdquo; was passed) and 2001 or
so, you could literally write your own paycheck.&lt;/p&gt;
&lt;p&gt;For those folks, being a COBOL programmer defined their career, and probably
secured their retirement as well.&lt;/p&gt;
&lt;p&gt;Now, with technology driving virtually every industry, and with software at the
core of every business, there are no absolutes. The programming languages we
learn help us to refine our pattern recognition and to advance our own awareness
of the state of the art, but no single modern language is more or less equipped
to make a successful &lt;em&gt;product&lt;/em&gt;, in spite of all the anecdotal arguments to the
contrary.&lt;/p&gt;
&lt;p&gt;So, the next time you&#39;re editing your resume, don&#39;t hesitate to mention that
you&#39;re good at PHP, but make an effort to emphasize that you reach for the
hammer with the handle that feels good in your hands; every hammer can drive a
nail, but the carpenter is best with the tools he&#39;s most comfortable with. Don&#39;t
let people think of you as just &amp;ldquo;a PHP programmer.&amp;rdquo;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>from vim to emacs in fourteen days</title>
       <link>http://example.org/post/2015/05/24t170407/0400/from-vim-to-emacs-in-fourteen-days/</link>
       <pubDate>Sun, 24 May 2015 17:04:07 -0400</pubDate>
       
       <guid>http://example.org/post/2015/05/24t170407/0400/from-vim-to-emacs-in-fourteen-days/</guid>
       <description>&lt;p&gt;Yes, my friends, it is true. After more than fifteen years using Vim, teaching
Vim, proselytizing about Vim, all the while scoffing in the general direction of
Emacs, I&#39;ve seen the light. The light of Lisp&amp;hellip; Or something.&lt;/p&gt;
&lt;p&gt;If, like me, you&#39;re curious enough to give Emacs a try, this post should help
you get off the ground.&lt;/p&gt;
&lt;p&gt;It&#39;s taken me at least the fourteen days described in the title, but with my
help it should only take you two or three. There are some things to get used to,
some new paradigms, and you have to learn a bit of Lisp (Elisp, actually), but
don&#39;t be afraid, it&#39;s not that hard.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-1-get-emacs&#34;&gt;Step 1: Get Emacs&lt;/h2&gt;
&lt;p&gt;Emacs is available on all major platforms. For Linux OSes, you can get Emacs
from your package manager du jour, i.e. &lt;code&gt;apt-get install emacs&lt;/code&gt;. There are also
Linux and Windows builds available through a
&lt;a href=&#34;http://ftpmirror.gnu.org/emacs/&#34;&gt;local GNU mirror&lt;/a&gt; (this link will redirect to
a mirror close to you, in theory).&lt;/p&gt;
&lt;p&gt;For OS X (presumptuously the only reason you&#39;d read this section&amp;hellip;), you have
at least four choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://emacsformacosx.com/&#34;&gt;&amp;ldquo;GNU Emacs for Mac OS X&amp;rdquo;&lt;/a&gt;, which is a
pre-built binary in common OS X dng format, ready to go. I believe it is
version 24.5 at the time of this writing.&lt;/li&gt;
&lt;li&gt;The default Homebrew build, &lt;code&gt;brew install emacs&lt;/code&gt;, which of course is available
in both its trunk form and with &lt;code&gt;--use-git-head&lt;/code&gt; or &lt;code&gt;--HEAD&lt;/code&gt; to get a more
bleeding-edge version.&lt;/li&gt;
&lt;li&gt;Yamamoto Mitsuharu&#39;s experimental &amp;ldquo;Mac port&amp;rdquo; version, which adds (better)
native GUI support, from a custom tap. Run &lt;code&gt;brew tap railwaycat/emacsmacport&lt;/code&gt;
and then &lt;code&gt;brew install emacs-mac&lt;/code&gt; to get it; this one also has the typical
&lt;code&gt;--HEAD&lt;/code&gt; option available.&lt;/li&gt;
&lt;li&gt;Finally, there is &lt;a href=&#34;http://aquamacs.org/&#34;&gt;Aquamacs&lt;/a&gt;, which claims to bring more
of the Aqua-style chrome to Emacs. In spite of being a moderate OS X fanboy I
find this offensive and haven&#39;t tried it myself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each build will be a slightly different version of Emacs, with the pre-built
binaries tending toward stable trunk releases and the brew versions somewhat
newer. There are a few small differences in the way they handle key codes (the
Mac port version remaps &amp;ldquo;super&amp;rdquo; to &amp;ldquo;alt&amp;rdquo;, which means the Mac command key acts
as alt; you may or may not like that). You can install all of them and try them
out; they will all load your config seamlessly.&lt;/p&gt;
&lt;h2 id=&#34;learn-the-basics&#34;&gt;Learn the Basics&lt;/h2&gt;
&lt;p&gt;There are just a few essential keys you need to know to get started using Emacs
in its bare form. Most of the default key mappings in Emacs are a sequence of
control key presses, so, for example, &lt;code&gt;C-x C-c&lt;/code&gt; means to press &amp;ldquo;control&amp;rdquo; and
&amp;ldquo;x&amp;rdquo;, then press &amp;ldquo;control&amp;rdquo; and &amp;ldquo;c&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In Emacs notation, which I will use here, &lt;code&gt;RET&lt;/code&gt; means return (or &amp;ldquo;enter&amp;rdquo;), and
&lt;code&gt;M&lt;/code&gt; means &amp;ldquo;meta&amp;rdquo; or &amp;ldquo;alt&amp;rdquo;. Depending on the build of Emacs you are using and
what your keyboard layout is, the physical key may vary; try each potential key
until you get the expected result.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-x C-c&lt;/code&gt;: quit Emacs. As all new Vim users must first learn &lt;code&gt;:q&amp;lt;CR&amp;gt;&lt;/code&gt;, so must
new Emacs users learn this bizarre key chord.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-g&lt;/code&gt;: cancel. This is the one piece of muscle memory you really need to
acquire; even once you have re-mapped &lt;code&gt;escape&lt;/code&gt; to quit from 90% of
circumstances, there will remain some where only &lt;code&gt;C-g&lt;/code&gt; will get you out. Just
learn it, use it, love it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M-x&lt;/code&gt;: execute extended command. This is the gateway to a lot of the
sophisticated stuff you can accomplish interactively in Emacs; it allows you
to run any Elisp function by name. More on this later.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-h ?&lt;/code&gt;: help about help. This chord opens a list of potential help topics,
each of which has its own direct mapping accessible through e.g. &lt;code&gt;C-h t&lt;/code&gt;,
which opens the Emacs tutorial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those are the only native mappings you really need to know to get started. If
you press some chord and something crazy happens, you can try backing out of it
with &lt;code&gt;C-g&lt;/code&gt;, and to learn what the chord does you can ask Emacs for help about
the key by pressing &lt;code&gt;C-h k&lt;/code&gt; and then pressing the key or chord in question.&lt;/p&gt;
&lt;p&gt;One of the nicest things about Emacs is that it&#39;s self-documenting. If you want
to know what &lt;code&gt;C-x C-c&lt;/code&gt; does, you can simply press &lt;code&gt;C-h k&lt;/code&gt; to ask for help about
a key and then press &lt;code&gt;C-x C-c&lt;/code&gt;. Emacs will open the documentation for the
function that the key is mapped to, and 99% of Emacs functions are documented.
There are other ways to learn about mappings that we&#39;ll talk about later.&lt;/p&gt;
&lt;p&gt;All mappings, and by this I mean &lt;em&gt;all&lt;/em&gt; mappings, can be re-mapped. You may take
the time to re-map the ones you use a lot (for example, I created a &lt;code&gt;&amp;lt;leader&amp;gt;x&lt;/code&gt;
mapping for &lt;code&gt;M-x&lt;/code&gt;), or you may live with the Emacs defaults; that is a choice
each must make on their own.&lt;/p&gt;
&lt;h2 id=&#34;configure-your-environment&#34;&gt;Configure Your Environment&lt;/h2&gt;
&lt;p&gt;Configuring Emacs is easily as involved as configuring Vim, if not more
so. Unlike Vim, however, Emacs ships with an interactive configuration tool that
you can use as a beginner to configure basic settings without having to plumb
the depths of Emacs&amp;rsquo; numerous variables and functions. We&#39;ll get to that
later. First, get a barebones config started.&lt;/p&gt;
&lt;p&gt;Step one is to make yourself a home for your config, if your package of choice
didn&#39;t create one for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create the directory &lt;code&gt;~/.emacs.d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create the file &lt;code&gt;~/.emacs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Open &lt;code&gt;~/.emacs&lt;/code&gt; in your favorite editor and paste in this nonsense, which,
sooner or later, will seem quite simple and obvious to you:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package&lt;/span&gt;)
 
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://orgmode.org/elpa/&amp;#34;&lt;/span&gt;))
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://melpa.org/packages/&amp;#34;&lt;/span&gt;))
(add-to-list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;package-archives&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;melpa-stable&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://stable.melpa.org/packages/&amp;#34;&lt;/span&gt;))
 
(&lt;span style=&#34;color:#66d9ef&#34;&gt;setq&lt;/span&gt; package-enable-at-startup &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
(package-initialize)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code loads the built-in package manager (&amp;ldquo;package&amp;rdquo;) and adds a couple
of popular Emacs package repositories to the list of available repositories so
that we can install the latest and greatest versions of modern Emacs packages,
which are analogous to Vim plug-ins.&lt;/p&gt;
&lt;p&gt;Start Emacs. You should now be able to press &lt;code&gt;M-x&lt;/code&gt; to get a prompt at the bottom
of the frame. Type the command &lt;code&gt;package-list-packages RET&lt;/code&gt;. Tab completion
works in that prompt, so feel free to use it to confirm that Emacs can find the
function. Emacs will connect to the Internet to download package lists and open
a window listing the packages available.&lt;/p&gt;
&lt;p&gt;This part gets sticky because you need to use default Emacs key mappings to
navigate the package list, so let&#39;s just quit the buffer now that we have the
package lists updated. Press &lt;code&gt;q&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;install-evil-mode&#34;&gt;Install Evil Mode&lt;/h2&gt;
&lt;p&gt;Finally, install &lt;code&gt;evil-mode&lt;/code&gt;, the Vim emulation package for Emacs, by typing
&lt;code&gt;M-x package-install RET evil-mode RET&lt;/code&gt;. A second window will open and a lot of
stuff will happen in it as the package is downloaded and compiled into Emacs
bytecode. Emacs packages tend to emit a lot of compiler warnings, which you can
safely ignore. When it&#39;s through, &lt;code&gt;evil-mode&lt;/code&gt; should be installed. Let&#39;s turn it
on.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;M-x evil-mode RET&lt;/code&gt;. You can now type &lt;code&gt;:qa&lt;/code&gt; to quit all windows and close
Emacs.&lt;/p&gt;
&lt;p&gt;If all of that works, you&#39;re ready to start building your Emacs configuration
empire, and the very first thing you&#39;ll probably want to do is use &lt;code&gt;evil-mode&lt;/code&gt;
by default.&lt;/p&gt;
&lt;p&gt;{% infobox %}
A &amp;ldquo;mode&amp;rdquo; in Emacs is similar to Vim&#39;s notion of a &amp;ldquo;filetype.&amp;rdquo; A mode usually
provides syntax highlighting and indentation rules, keyboard mappings, and other
functionality useful for a particular type of task.&lt;/p&gt;
&lt;p&gt;Your &amp;ldquo;major mode&amp;rdquo; is the mode that typically defines the type of work you&#39;re
doing, which is often associated with the filetype you&#39;re editing; you can only
use one major mode at a time.&lt;/p&gt;
&lt;p&gt;Emacs packages may also provide &amp;ldquo;minor modes,&amp;rdquo; of which you may load as many as
you like. Examples of useful minor modes are &amp;ldquo;flycheck,&amp;rdquo; which gives you syntax
checking, or &amp;ldquo;projectile,&amp;rdquo; which provides functions for working with
source-controlled projects, or &amp;ldquo;magit,&amp;rdquo; which gives you interactive git commands.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;To tell Emacs to use &lt;code&gt;evil-mode&lt;/code&gt; immediately upon opening in all buffers, you
simply load the package into memory and call the main mode function, which is
conveniently named &lt;code&gt;evil-mode&lt;/code&gt;. Add this to your &lt;code&gt;~/.emacs&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil&lt;/span&gt;)
(evil-mode &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are editing your &lt;code&gt;.emacs&lt;/code&gt; file in Emacs, you can find out what those
functions do by placing your cursor over the word &amp;ldquo;require,&amp;rdquo; for example, and
pressing &lt;code&gt;C-h f&lt;/code&gt; to open the &amp;ldquo;help for functions&amp;rdquo; prompt; the word under the
cursor will be placed into the prompt for you. Press enter and a split window
will open containing the definition of the function.&lt;/p&gt;
&lt;p&gt;Try it for &lt;code&gt;evil-mode&lt;/code&gt; as well. To close the split window you should be able to
use the typical Vim key &lt;code&gt;C-w o&lt;/code&gt; (&amp;ldquo;only this&amp;rdquo; window). The Emacs key to do the
same thing is &lt;code&gt;C-x 1&lt;/code&gt;, because that makes sense&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;taking-the-helm&#34;&gt;Taking the Helm&lt;/h2&gt;
&lt;p&gt;One of the most popular packages available for Emacs is called Helm. It is
described simply as &amp;ldquo;Emacs incremental and narrowing framework,&amp;rdquo; which doesn&#39;t
at first seem tremendously useful, but what it actually provides is the ability
to display a list of values that is narrowed down as you type, similar to
something like Vim&#39;s CtrlP implementation or Sublime Text&#39;s fuzzy search.&lt;/p&gt;
&lt;p&gt;Now, Helm doesn&#39;t actually search your project files or anything. No, it simply
provides a framework for displaying an interactively narrowed list of
things. But the staggeringly cool thing about it is that when it is installed,
suddenly all of the Emacs default selection functions become interactive
lists. Everything from &lt;code&gt;M-x&lt;/code&gt; to &lt;code&gt;package-install&lt;/code&gt; will become narrowing lists
just like CtrlP.&lt;/p&gt;
&lt;p&gt;Let&#39;s install it!&lt;/p&gt;
&lt;h2 id=&#34;automatically-installing-packages&#34;&gt;Automatically Installing Packages&lt;/h2&gt;
&lt;p&gt;This is a perfect time to talk about how to maintain a list of packages that you
always want installed. There are a lot of different ways to do this, but here is
a quite simple one that you can immediately start using.&lt;/p&gt;
&lt;p&gt;Since the Emacs &lt;code&gt;package.el&lt;/code&gt; package manager is built into Emacs, you don&#39;t need
anything like Vundle or Neobundle or Pathogen, all you need to do is call
&lt;code&gt;package-install&lt;/code&gt; on every package that isn&#39;t yet installed. This is easy to
write in Elisp.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update (December, 2016)&lt;/strong&gt;: I no longer recommend manually hacking this package
stuff into your config as shown down below (preserved for posterity). Instead, I
recommend using the awesome &lt;code&gt;use-package&lt;/code&gt; package by John Wiegley.&lt;/p&gt;
&lt;p&gt;You must first set up your &lt;code&gt;package.el&lt;/code&gt; configuration as you would in any case
(by configuring the repositories you would like to use, and so forth), but then
you can bootstrap the whole system with this simple snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(unless (package-installed-p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;)
  (package-refresh-contents)
  (package-install &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;))

(eval-when-compile
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;use-package&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then configure all of your packages using &lt;code&gt;use-package&lt;/code&gt; forms as described in
&lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;the documentation&lt;/a&gt;. Any package with
the keyword &lt;code&gt;:ensure&lt;/code&gt; set to &lt;code&gt;t&lt;/code&gt; will be downloaded from a remote repository.&lt;/p&gt;
&lt;p&gt;The simplest example is something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;use-package&lt;/span&gt; markdown-mode
  &lt;span style=&#34;color:#e6db74&#34;&gt;:ensure&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;use-package&lt;/code&gt; system is capable of a whole lot more, and it&#39;s allowed me to
clean up and modularize most of my configuration while also optimize my Emacs
startup time. I strongly recommend giving it a shot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deprecated advice below&lt;/strong&gt;, continue at your own peril.&lt;/p&gt;
&lt;p&gt;There are several ways to do this, but the simplest seems to be &lt;a href=&#34;http://stackoverflow.com/a/10095853/580206&#34;&gt;this Stack
Overflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(defun ensure-package-installed (&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;rest&lt;/span&gt; packages)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assure every package is installed, ask for installation if it’s not.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Return a list of installed packages or nil for every skipped package.&amp;#34;&lt;/span&gt;
  (&lt;span style=&#34;color:#a6e22e&#34;&gt;mapcar&lt;/span&gt;
   (lambda (&lt;span style=&#34;color:#a6e22e&#34;&gt;package&lt;/span&gt;)
     (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (package-installed-p &lt;span style=&#34;color:#a6e22e&#34;&gt;package&lt;/span&gt;)
         &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
       (&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;y-or-n-p&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Package %s is missing. Install it? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;package&lt;/span&gt;))
           (package-install &lt;span style=&#34;color:#a6e22e&#34;&gt;package&lt;/span&gt;)
         &lt;span style=&#34;color:#a6e22e&#34;&gt;package&lt;/span&gt;)))
   packages))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Make sure to have downloaded archive description.&lt;/span&gt;
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

&lt;span style=&#34;color:#75715e&#34;&gt;;; Activate installed packages&lt;/span&gt;
(package-initialize)

&lt;span style=&#34;color:#75715e&#34;&gt;;; Assuming you wish to install &amp;#34;iedit&amp;#34; and &amp;#34;magit&amp;#34;&lt;/span&gt;
(ensure-package-installed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;iedit&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;magit&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you add this to your &lt;code&gt;~/.emacs&lt;/code&gt;, simply starting Emacs will prompt you for
any packages you wish to install that are not already installed. You can expand
the call to &lt;code&gt;ensure-package-installed&lt;/code&gt; quite easily, and Elisp cares not about
spacing, so you can even organize it like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;(ensure-package-installed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;evil&lt;/span&gt;
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;projectile&lt;/span&gt;
                          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;magit&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;congratulations&#34;&gt;Congratulations&lt;/h2&gt;
&lt;p&gt;If you&#39;ve made it this far, you&#39;re probably ready to begin exploring on your
own. I&#39;ll keep posting updates as I have time to collate my thoughts and
experiences, or feel free to reach out with questions by using the commenting
feature below.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>learning to love emacs</title>
       <link>http://example.org/post/2015/01/17/learning-to-love-emacs/</link>
       <pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2015/01/17/learning-to-love-emacs/</guid>
       <description>&lt;p&gt;It would be safe to say that I&#39;m a Vim devotee; a follower. I own more than one
t-shirt with Vim &amp;ldquo;stuff&amp;rdquo; on it (one bearing its logo, another the image of
&amp;ldquo;HJKL&amp;rdquo; key caps). I&#39;ve spoken at local Vim meetups, I subscribe to Vim-related
lists, I&#39;ve casually urged people to switch from Sublime Text to Vim at the
office and a few actually did.&lt;/p&gt;
&lt;p&gt;For me, saying that I use Emacs or, heaven forbid, advertising it through
wardrobe choices, feels like an act of high treason.&lt;/p&gt;
&lt;p&gt;Still, it is true. I&#39;ve been secretly using Emacs for the past few months,
exclusively. I have told a few people at work and all of them, without
exception, literally gasped. That&#39;s how broadly I had advertised my love of
Vim. But it&#39;s time now to explain why I switched and why you should think about
switching, too.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;vim-is-awesome&#34;&gt;Vim Is Awesome&lt;/h2&gt;
&lt;p&gt;What is it about Vim that is so awesome? Primarily, it is its mnemonically
fluent, composable grammar, which lends itself to the common keyboard
interface. Once you learn the keystroke for &amp;ldquo;delete,&amp;rdquo; and the keystrokes for
&amp;ldquo;word,&amp;rdquo; &amp;ldquo;sentence,&amp;rdquo; &amp;ldquo;paragraph,&amp;rdquo; and so on, you can delete those things (we call
them &amp;ldquo;text objects&amp;rdquo;) by typing the keystrokes one after another. Learn the
keystroke for &amp;ldquo;yank&amp;rdquo; (which is &amp;ldquo;copy&amp;rdquo; in Vim parlance) and you can now yank all
of those text objects. That&#39;s what we mean by &amp;ldquo;composable,&amp;rdquo; and that is the
source of Vim&#39;s power.&lt;/p&gt;
&lt;p&gt;Emacs, in its default configuration, uses sequences of modifier keystrokes to
avoid pressing any bare letters or numbers to issue commands. This means that in
order to delete letters, words, sentences, paragraphs, and so on, you must learn
entirely new sequences of keystrokes, each of which putting your hands into
contortions to press a modifier at the same time.&lt;/p&gt;
&lt;p&gt;Vim&#39;s approach is simpler to grasp and easier to execute. Paired with an array
of impressive plug-ins adding everything from linting to git integration, it&#39;s
as close to an IDE as I&#39;ve ever wanted.&lt;/p&gt;
&lt;p&gt;Unfortunately for Vim&amp;ndash;the editor that I have grown to love with a passion that
spills from my words and actions on a daily basis and that even now I&#39;m mildly
proselytizing&amp;ndash;it is a shitty piece of software. I mean, sure, you can run it on
virtually any platform and it opens quickly and can handily edit huge files and
for all of those reasons it is objectively superior to, say, EditPlus or even
Sublime Text in certain circumstances. But that doesn&#39;t make it a &lt;em&gt;great&lt;/em&gt; piece
of software.&lt;/p&gt;
&lt;p&gt;There are three reasons that I believe Emacs to be superior to Vim &lt;em&gt;as a
software package&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;capabilities-plain-and-simple&#34;&gt;Capabilities, Plain and Simple&lt;/h2&gt;
&lt;p&gt;Emacs is capable of more. Here are a few things that Emacs can do that Vim
simply cannot; it can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run tasks in the background (&amp;ldquo;asynchronously&amp;rdquo;). That includes extension code
that you have written as well as shell programs, even while piping the output
from those programs into visible windows. In Vim, this hangs the UI.&lt;/li&gt;
&lt;li&gt;Display graphics. If you use Emacs in its GUI form (which is recommended), it
can display custom glyphs, images, and even full document formats like
PDF. The GUI version of Vim (&amp;ldquo;gVim&amp;rdquo;) provides scrollbars, a toolbar, can
display more colors, and&amp;hellip; That&#39;s it.&lt;/li&gt;
&lt;li&gt;Be &lt;em&gt;truly&lt;/em&gt; extended. By this I mean that all of Emacs&amp;rsquo; core functionality is
exposed through elisp functions, which can be called and even overridden
using a sort of mixin strategy called &amp;ldquo;advice.&amp;rdquo; Given this, there are few
limitations to what you can do to customize it. Vim provides a scripting
language that can manipulate most of Vim&#39;s behavior, but it is limited
primarily to modifying data; you cannot change any fundamental behaviors like
how Vim draws line numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best example I can think of for how Emacs can be extended is &amp;ldquo;Evil Mode,&amp;rdquo;
which essentially emulates Vim within Emacs, and it is a staggeringly complete
implementation. The ex command prompt and all of the built-in commands (like
&amp;ldquo;registers&amp;rdquo; and &amp;ldquo;bdelete&amp;rdquo; and so on) are implemented. Think about this. A
seamless ex command prompt was implemented in elisp and it&#39;s as good, if not
better, than Vim&#39;s own. Jumps, marks, registers, all of the text objects and
associated commands&amp;hellip; They&#39;re all there.&lt;/p&gt;
&lt;p&gt;But having a little Vim running inside your Emacs and being able to run some
background tasks and hacking on elisp is only one of the reasons I think that
Emacs is objectively better software.&lt;/p&gt;
&lt;h2 id=&#34;code-quality&#34;&gt;Code Quality&lt;/h2&gt;
&lt;p&gt;I haven&#39;t attempted to submit patches to Vim nor Emacs, but Geoff Greer has
hacked on Vim code before, and his analysis of why Vim is a pretty terrible
software project is compelling.&lt;/p&gt;
&lt;p&gt;Here is an excerpt from his recent post, &lt;a href=&#34;http://geoff.greer.fm/2015/01/15/why-neovim-is-better-than-vim/&#34;&gt;Why NeoVim Is Better than Vim&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I started programming in C almost 20 years ago. Vim is, without question, the
worst C codebase I have seen. Copy-pasted but subtly changed code
abounds. Indentation is haphazard. Lines contain tabs mixed with
spaces. Source files are huge. There are almost 25,000 lines in &lt;code&gt;eval.c&lt;/code&gt;. That
file contains over 500 &lt;code&gt;#ifdefs&lt;/code&gt; and references globals defined in the 2,000
line &lt;code&gt;globals.h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some of Vim’s source code isn’t even valid text. It’s not
ASCII or UTF-8. The venerable &lt;code&gt;file&lt;/code&gt; can’t figure out the encoding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a programmer myself, this bothers me in principle. It is hard to hear that
lurking behind the facade of one of your favorite programs is a pile of
spaghetti code. Still, how a program is written is not necessarily a deal-breaker
for the users of that program. Take, as an example, the various and long-lived
Microsoft Office programs. We know from stories written by past and present
Microsoft engineers that codebases of that size with reverse compatibility
requirements of that magnitude are going to produce anything from mild shame to
active regret in their maintainers.&lt;/p&gt;
&lt;p&gt;But Microsoft is a giant and powerful software company that has the enviable
luxury of hiring amazingly talented people and paying them generously to
continue down that rocky path of maintenance and feature development because
these products &lt;em&gt;are indispensable&lt;/em&gt; in modern business and &lt;em&gt;make tons of money&lt;/em&gt;
for Microsoft and its employees and shareholders.&lt;/p&gt;
&lt;p&gt;Vim, on the other hand, is &amp;ldquo;charityware,&amp;rdquo; is maintained and improved by a
relatively small and devoted cadre of programmers who work for pure praise and
self-satisfaction, and could, at least in theory, fall into an irrecoverable
state of disrepair as other open source software projects have in the past if
developers lose interest in the daily uphill battle of navigating disorganized
code kept that way willfully by its original author.&lt;/p&gt;
&lt;p&gt;None of this makes me feel supremely confident that Vim will actually improve
steadily over time. In fact, the observations made by Greer in his post linked
up above seem to indicate that not only will Vim improve slowly, if at all, but
that a collapse into that irrecoverable state of disrepair I mentioned is
frighteningly likely.&lt;/p&gt;
&lt;p&gt;I mean, if you&#39;re passionate about a project and you want to spend some of your
time and energy contributing to it, about the last thing you want to do,
especially as a newcomer, is dig through decades of cruft that core project
maintainers have &lt;em&gt;actively ignored&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This brings me to the final nail in the coffin, which is&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;project-leadership&#34;&gt;Project Leadership&lt;/h2&gt;
&lt;p&gt;Purely as a piece of software, Vim is a program that was written by Bram
Moolenaar, who is still its primary maintainer. That is not, by any means, a bad
thing. Linus Torvalds still approves all Linux kernel changes himself, because
he&#39;s passionate about it and because he&#39;s damned good at it.&lt;/p&gt;
&lt;p&gt;Still, Bram has been notoriously intractable on topics of modernization ranging
from simple internals issues, like removing obsolete &lt;code&gt;#ifdef&lt;/code&gt; branches that make
Vim compatible with operating systems that aren&#39;t even in use anymore (like
BeOS, remember that one?), to adding capabilities broadly and passionately
desired by Vim&#39;s users such as asynchronous operations.&lt;/p&gt;
&lt;p&gt;So strong is the will of the Vim community and so obstinate is Bram in his
vision of what Vim ought to be that a guy by the name of Thiago Arruguda created
a project called NeoVim that aims to provide all of that and more. Asynchronous
processing? Sure. An extension language that stands on its own as feature-rich
and fluent? Absolutely. A plug-in API that exposes everything for customization?
Imagine!&lt;/p&gt;
&lt;p&gt;NeoVim sounds very promising, but it is still in its infancy. It only compiles
on a few platforms and it isn&#39;t feature-complete yet. It might not be for some
time to come. From what I have heard, the group of folks working on the project
are friendly and welcoming to others willing to help. The Vim community lacks
this because it is led and managed solely by Bram.&lt;/p&gt;
&lt;p&gt;In an e-mail interview published on Binpress,
&lt;a href=&#34;http://www.binpress.com/blog/2014/11/19/vim-creator-bram-moolenaar-interview/&#34;&gt;10 Questions with Vim&#39;s creator, Bram Moolenaar&lt;/a&gt;,
Alexis Santos asks, &amp;ldquo;How can the community ensure that the Vim project succeeds
for the foreseeable future?&amp;rdquo; Bram answers, &amp;ldquo;Keep me alive. :-)&amp;rdquo;&lt;/p&gt;
&lt;p&gt;That is a staggeringly, mind-blowingly irresponsible answer for the maintainer
of such a venerable and ubiquitous project to offer his community. &amp;ldquo;Keep me
alive?&amp;rdquo; Setting aside for a moment the inescapable fact that every human
eventually dies, Bram&#39;s flippant answer to this question does not inspire faith
in me that the Vim project has a reliable stewardship and a bright and long
future.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a look at the Emacs side. Emacs was originally written by none other
than Richard M. Stallman (often self-identified and sometimes addressed by his
initials, &amp;ldquo;RMS&amp;rdquo;), who is also the founder of the Free Software Foundation and
the creator of the GNU Project (GNU is Not UNIX). Stallman has a lot going on;
he is involved in the operations of his foundation, he frequently gives talks on
freedom and privacy topics, and he is involved with Emacs development as well.&lt;/p&gt;
&lt;p&gt;I say &amp;ldquo;involved&amp;rdquo; because he stepped down as maintainer of Emacs in 2008, handing
the reins to two gentlemen, Stefan Monnier and Chong Yidong, who had a proven
track record of contributing to the project and vetting others&amp;rsquo;
contributions. In classic RMS style, here is how Richard handed over the
leadership of one of open source&#39;s largest development efforts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From:	 Richard Stallman
Subject: Re: Looking for a new Emacs maintainer or team
Date:    Fri, 22 Feb 2008 17:57:22 -0500

Stefan and Yidong offered to take over, so I am willing to hand
over Emacs development to them.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Problem solved.&lt;/p&gt;
&lt;p&gt;Making the transition to Emacs isn&#39;t transparent or instantaneous. Even with
Evil Mode, there are some things you need to learn about how the system works,
including, probably, a bit of elisp. But if you&#39;re up for it, it can be a
tremendously gratifying experience. All of the things you love about Vim, with
all of the capabilities of what has been described as &amp;ldquo;a great operating system,
lacking only a great text editor.&amp;rdquo; I believe that Evil Mode is that editor.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>sharpening your blades</title>
       <link>http://example.org/post/2014/02/12/sharpening-your-blades/</link>
       <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2014/02/12/sharpening-your-blades/</guid>
       <description>&lt;p&gt;The &amp;ldquo;toolbox&amp;rdquo; metaphor often used to describe a programmer&#39;s knowledge,
favorite software, shell scripting tricks, and so on, is a convenient one. The
skills and utilities that a seasoned programmer brings to bear on any given
problem is much the same as the craftsman&#39;s physical collection of implements;
selected carefully, representative of the craftsman&#39;s preferences, and wielded
with precision borne from experience.&lt;/p&gt;
&lt;p&gt;We can learn much from these parallel concepts. In the same way that a builder
must keep the blade of the saw sharp, so must a programmer focus some effort
on sharpening the &amp;ldquo;blades&amp;rdquo; of his or her tools and techniques. This is not a
post about education or learning new algorithms or solving ridiculous &lt;em&gt;code
katas&lt;/em&gt; every day. This is a story about chainsaws.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;I watched this talk by the inimitable Gary Bernhardt (some day I hope someone
describes me as &amp;ldquo;inimitable&amp;rdquo;) called &amp;ldquo;&lt;a href=&#34;http://www.confreaks.com/videos/615-cascadiaruby2011-the-unix-chainsaw&#34;&gt;The Unix Chainsaw&lt;/a&gt;.&amp;rdquo; Though the
technical guts of the talk consists of (awesome) Unix shell wizardry, the
philosophical thread that runs throughout is the avoidance of what Bernhardt
terms &amp;ldquo;the tar pit of immediacy,&amp;rdquo; an expression that has since been used far
fewer times than I feel it deserves, which is why I&#39;m mentioning it now.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;tar pit of immediacy&amp;rdquo; describes the experience of encountering a problem,
reaching for some familiar tool, solving the problem quickly and messily, and
then whenever the problem is encountered again, &lt;em&gt;doing the exact same thing&lt;/em&gt;.
Often, getting the job done is absolutely the most important thing, but
looking at it from the perspective of our metaphorical craftsman this is much
like cutting things with the same blade until it&#39;s as dull as a spoon.&lt;/p&gt;
&lt;p&gt;If there is one single piece of advice that I would like to give to every
software engineer ever, it&#39;s this: &lt;em&gt;you need to take the time to sharpen your
blades.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The best programmers are fundamentally lazy people. They &lt;em&gt;abhor&lt;/em&gt; repetition,
they &lt;em&gt;embrace&lt;/em&gt; automation. If I see a programmer pressing the same keys over
and over, or submitting code for review with the same trivial syntactic
mistakes (like trailing whitespace or mis-alignments), I am going to walk over
to them and ask them how their chainsaw is doing because it sure looks to me
like they&#39;re cutting down a tree with a camping hatchet.&lt;/p&gt;
&lt;p&gt;I have been, and continue to be, a massive advocate (some might say
proselytizer) of Vim and the Unix shell. I write about them, I teach Vim and
the shell at work, I give Vim talks, I own a t-shirt with the Vim logo printed
on it&amp;hellip; You get the idea. This set of tools works for me; if I were a
carpenter they would be the hammer or chisel that fit so perfectly in my hand
that it would seem as though they were molded to my very palm. And indeed I
have spent enough time customizing my tools that in some ways they &lt;em&gt;are&lt;/em&gt;
molded to my way of doing things, as a good tool ought to be.&lt;/p&gt;
&lt;p&gt;But this is where I need to be absolutely clear: &lt;em&gt;your tools are yours&lt;/em&gt;. Vim
isn&#39;t for everyone. I will continue to try to convince you that you should
learn it, but you can probably hit the ground running at a faster pace in
Sublime Text or some other editor. That you have chosen tool X, Y, or Z and I
have chosen A, B, or C is of little consequence. What is more important is
that you are always thinking about &lt;em&gt;making your tools work for you&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I often see people using Sublime Text rather poorly. Sublime Text is a
tremendously powerful editor with most, if not all, of the capabilities of Vim
or Emacs. If you are using it on a daily basis you should be &lt;em&gt;fast&lt;/em&gt; and
&lt;em&gt;confident&lt;/em&gt; with it.  If you are doing a lot of repetitive text translations,
you need to find a better way, and that&#39;s what leads me to my ultimate point:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Test the sharpness of your blades often.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Vim has a learning curve whose difficulty falls roughly in between playing a
song on the harmonica and building the Space Shuttle. People who have reached
even a modest efficiency in Vim feel like they&#39;ve learned a new language (and
in some ways they have), but it becomes obvious through that process that
there is much, much more on the horizon. The programmer within them swells
with the anticipation of shaving further keystrokes off of each operation, of
creating macros for every common task, of learning more and more. This is how
you should feel, all the time, with all of your tools.&lt;/p&gt;
&lt;p&gt;Contrary to Vim, a tool like Sublime Text is easy to pick up and use. This is
a great advantage and the reason I recommend it to many new programmers. Be
careful, however, to recognize the distance between you and the horizon,
between your ability to type in some code and maybe use some multiple cursors
and the vast array of keyboard shortcuts, plug-ins, and built-in functions
that will make you a wizard of your craft. Don&#39;t fall into the tar pit of
immediacy.&lt;/p&gt;
&lt;p&gt;Always seek out the shortest path to your destination. Reduce patterns to
scripts or macros. Look up keyboard shortcuts for frequently used operations.
If you are annoyed or slowed by anything, &lt;em&gt;anything&lt;/em&gt;, do a quick search to see
if there is another tool that does it better. You don&#39;t have to solve these
problems of efficiency right away; by all means, get the job done, but come
back to your pet problems and find a way to solve them. Only then will your
toolbox truly be yours.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>master vim registers with ctrl r</title>
       <link>http://example.org/post/2013/12/03/master-vim-registers-with-ctrl-r/</link>
       <pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/12/03/master-vim-registers-with-ctrl-r/</guid>
       <description>&lt;p&gt;Vim&#39;s registers are incredibly powerful. You use them all the time when you
yank and put text or record macros, but are you using CTRL-R (in insert
mode)? If you aren&#39;t, you&#39;re missing out on a huge efficiency boost! I will
show you what CTRL-R does and how it can make you faster and give you even
more uses for Vim&#39;s registers.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;From the Vim documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Insert the contents of a register. Between typing CTRL-R and the second
character, &lt;code&gt;&amp;quot;&lt;/code&gt; will be displayed to indicate that you are expected to enter
the name of a register.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In its simplest form, you can press CTRL-R followed by a register name (such
as a letter, number, or symbol as seen in the output of &lt;code&gt;:registers&lt;/code&gt;) and the
contents of that register will be inserted at the cursor position, as though
you had typed it. I use this all the time to insert text that I had just
yanked by pressing &lt;code&gt;CTRL-R &amp;quot;&lt;/code&gt;. Double quote is the name of the default
register.&lt;/p&gt;
&lt;h2 id=&#34;playing-with-macros&#34;&gt;Playing with Macros&lt;/h2&gt;
&lt;p&gt;You can also use CTRL-R to do some fun things with macros. As you may already
know, macros are recorded into registers and you can manipulate that content
in the same way that you manipulate any register. Let&#39;s record a macro as an
example. Here is a macro I recorded into register &amp;ldquo;q&amp;rdquo; that starts inserting at
the end of the line with &amp;ldquo;A&amp;rdquo; and types out &amp;quot; and my ax!&amp;rdquo; followed by pressing
escape.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;qqA and my ax!^[q&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;^[&lt;/code&gt; is how Vim represents a literal escape. Great, so I have a
macro recorded into register &amp;ldquo;q&amp;rdquo; and I can play it back by pressing &lt;code&gt;@q&lt;/code&gt; as
usual. But let&#39;s say I want to make a change to this macro and I am far too
lazy to re-record it. Instead of inserting &amp;quot; and my ax!&amp;rdquo; at the end of the
line, I want it to insert &amp;ldquo;My ax and &amp;quot; at the beginning of the line.&lt;/p&gt;
&lt;p&gt;We can use CTRL-R to get access to that macro in a buffer so that we can edit
it. Just press:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i^R^Rq&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Press &amp;ldquo;i&amp;rdquo; to enter insert mode, then press CTRL-R twice, then press &amp;ldquo;q&amp;rdquo; to
insert the contents of the &amp;ldquo;q&amp;rdquo; register. What ought to come out looks like
this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A and my ax!^[&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reason you press CTRL-R twice is to insert that escape character code
literally. If you only press CTRL-R once, the contents of the register will be
inserted without any literal control characters, so you&#39;ll lose the escape
keypress, which is bad news bears.&lt;/p&gt;
&lt;p&gt;Now that I have the contents of the macro sitting in a buffer, I can edit it
normally as text. I will change it to look like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IMy ax and ^[&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now the macro presses &amp;ldquo;I&amp;rdquo; to start inserting at the beginning of the line and
types out &amp;ldquo;My ax and &amp;quot; then presses escape. Let&#39;s capture that back into the
&amp;ldquo;q&amp;rdquo; register. I place my cursor at the beginning of that line and press:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;qy$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I have just used the double quote key to tell Vim I want to use the &amp;ldquo;q&amp;rdquo;
register for the next command and pressed &lt;code&gt;y$&lt;/code&gt; to yank to the end of the line.
Now my revised macro is in the &amp;ldquo;q&amp;rdquo; register and can be played normally with
&lt;code&gt;@q&lt;/code&gt;. This little trick comes in very handy when you are working with longer
macros and you make a mistake partway through or want to tweak the behavior a
little bit without re-recording the whole sequence.&lt;/p&gt;
&lt;p&gt;As a bonus, now that you know how to use CTRL-R twice in a row to output the
contents of a register literally, including control characters, you can
confidently save macros for later use by creating mappings. If I want to
create a new mapping to run the same sequence that I recorded in this macro, I
could type this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;a ^R^Rq&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;nnoremap&lt;/code&gt; command creates a mapping for the key sequence &lt;code&gt;&amp;lt;Leader&amp;gt;a&lt;/code&gt; to
the literal contents of the &amp;ldquo;q&amp;rdquo; register without allowing nested mappings.
It&#39;s important to use &lt;code&gt;nnoremap&lt;/code&gt; because in the future you may create a
mapping for one of the key sequences used in this mapping and you don&#39;t want
that to run; you want this key sequence to be played back literally. After
pressing &amp;ldquo;q&amp;rdquo; in the line above, it should look like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nnoremap &amp;lt;Leader&amp;gt;a IMy ax and ^[&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ta daa!&lt;/p&gt;
&lt;h2 id=&#34;expressions&#34;&gt;Expressions&lt;/h2&gt;
&lt;p&gt;In a [previous post][1] I talked about how to use CTRL-R and the expression
register to easily edit complex Vim settings. The expression register is super
powerful and can do a lot more than just output simple values. For example, it
is possible to perform calculations and call any of the built-in functions
found in &lt;code&gt;:h function-list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Things are about to get pretty advanced, so make sure you&#39;re strapped in. This
is a completely contrived example, but I am going to show you how to create a
macro that uses CTRL-R to multiply the number under the cursor by two. Later
on, you can think of other crazy ways to apply these concepts and leave them
in the comments below for all to enjoy.&lt;/p&gt;
&lt;p&gt;The basic procedure is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Begin recording a macro into register &amp;ldquo;q&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Change the word (the number) under the cursor. This places the deleted
value in the default register, &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;, and puts you in insert mode&lt;/li&gt;
&lt;li&gt;Use CTRL-R to insert an expression and use CTRL-R again to get the value
from the default register, &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;, into the command.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The exact keystrokes to record the macro are these: &lt;code&gt;qqciw^R=2*^R&amp;quot;^M^[q&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note in the macro string that &lt;code&gt;^R&lt;/code&gt; is CTRL-R, &lt;code&gt;^M&lt;/code&gt; is the return key, and &lt;code&gt;^[&lt;/code&gt;
is escape. Give it a try, record the macro, then type in some numbers in the
buffer and replay the macro with the cursor on each number. Because we have
used &lt;code&gt;ciw&lt;/code&gt; you can place your cursor anywhere over the number and it will
replace the whole number with the sum!&lt;/p&gt;
&lt;p&gt;Now you have the power to &lt;em&gt;truly master CTRL-R&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;[1]: {% post_url 2013-10-24-test-complex-vim-settings-easily %}&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>why you should give zsh another try</title>
       <link>http://example.org/post/2013/11/19/why-you-should-give-zsh-another-try/</link>
       <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/11/19/why-you-should-give-zsh-another-try/</guid>
       <description>&lt;p&gt;If you&#39;re already a fan of &amp;ldquo;the Z shell&amp;rdquo; (zsh), you may not need to read any
further. If, however, you&#39;re like me and have spent years in the Bourne Again
shell (bash), it might be time to re-evaluate your choice.&lt;/p&gt;
&lt;p&gt;I have used bash for a long time and reached a fair proficiency level in it.
I was doing things like looping over program output, filtering it, using
utilities like &lt;code&gt;seq&lt;/code&gt; and &lt;code&gt;wc&lt;/code&gt; all the time. I could re-run commands from my
history in more than one way and reverse-search them with Ctrl-R. None of this
was news to me.&lt;/p&gt;
&lt;p&gt;But then someone told me about this Z shell configuration package called &amp;ldquo;oh
my zsh,&amp;rdquo; and I decided to dangle my toes into the waters of the Z shell and
see what it&#39;s all about. After all, the OS X terminal drops you into zsh by
default; there must be something to it.&lt;/p&gt;
&lt;p&gt;I&#39;m never going back.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;To begin, here are some specific reasons you should drop bash or tcsh or csh
and use the Z shell:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The number one reason to consider zsh as a replacement for the shell you
already use is ubiquity. You&#39;re going to be much more likely to actually
find zsh on any given machine than newfangled shells like &amp;ldquo;fish.&amp;rdquo; If you
only ever use your own single personal computer this doesn&#39;t matter as
much.&lt;/li&gt;
&lt;li&gt;The features, oh the features! The bulk of this post will be about these
features so I will leave it at this for now. Suffice it to say, there are
a couple of options that are so killer that I can never go back to bash.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;oh my zsh&amp;rdquo; system provides a further ecosystem of themes and
extensions that other people maintain, giving you some awesome
off-the-shelf capabilities as well as a very reasonable framework in which
to create your own, if you wish.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Curious? Let&#39;s dig in.&lt;/p&gt;
&lt;h2 id=&#34;get-started-right-now&#34;&gt;Get Started Right Now&lt;/h2&gt;
&lt;p&gt;If you&#39;re like me, you&#39;re more of a &lt;em&gt;doer&lt;/em&gt; than a &lt;em&gt;reader&lt;/em&gt;. If you want to see
what all the fuss is about, here is how you can do that right now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure you have zsh installed. It is the default shell in OS X and
sometimes CentOS; other flavors of Linux may need a quick install. For
Ubuntu, &lt;code&gt;sudo apt-get install zsh&lt;/code&gt;, for Gentoo &lt;code&gt;sudo emerge zsh  zsh-completion&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you want to try &amp;ldquo;oh my zsh&amp;rdquo;, get it &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;on the oh-my-zsh Github page&lt;/a&gt;.
I highly recommend it, but be prepared to read another README and follow
more installation instructions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;oh-the-features&#34;&gt;Oh, the Features!&lt;/h2&gt;
&lt;p&gt;As a long-time bash user, perhaps the single most game-changing feature that
zsh offers is insanely good command completion. What do I mean by &amp;ldquo;good?&amp;rdquo;
Well, zsh sometimes unexpectedly completes things that I&#39;ve accidentally typed
using the wrong case, its menu completion is (to my mind) easier to use
because it highlights the selected item. On top of those, it&#39;s all
configurable (the Linux user&#39;s dream).&lt;/p&gt;
&lt;p&gt;There are straightforward options for whether to ring the terminal bell when
starting an ambiguous completion and whether to use menu completion
immediately or attempt a regular inline completion first. Let&#39;s talk about
these options now.&lt;/p&gt;
&lt;p&gt;First, you can see a list of &lt;strong&gt;all&lt;/strong&gt; of the options on this handy webpage
maintained by a Hungarian University. This is the page I used as a reference;
I&#39;m not sure why it&#39;s in English or why it&#39;s so highly ranked by Google, but
here it is: &lt;a href=&#34;http://www.cs.elte.hu/zsh-manual/zsh_16.html&#34;&gt;ZSH options&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In zsh, you set and unset options using the commands &lt;code&gt;setopt&lt;/code&gt; and &lt;code&gt;unsetopt&lt;/code&gt;.
Zsh has a semi-unique way of dealing with options: the names themselves are
not case-sensitive and the underscores don&#39;t even matter. In other words,
&lt;code&gt;APPEND_HISTORY&lt;/code&gt; is the same as &lt;code&gt;Ap_pEND_hIs_t_ory&lt;/code&gt; or just &lt;code&gt;appendhistory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similar to Vim, you can negate an option by prepending &amp;ldquo;no&amp;rdquo; to it. Thus,
&lt;code&gt;setopt noautomenu&lt;/code&gt; is the same as &lt;code&gt;unsetopt automenu&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With me so far? Excellent. Here are the options that I have set and why:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;autolist&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;When you press tab to try to autocomplete your entry, if the completion
is ambiguous (what you have typed is not unique), immediately display the
list of possible completions.
&lt;p&gt;Note that if you like the behavior of &lt;code&gt;menucomplete&lt;/code&gt; described below, you
probably won&#39;t need to set this option, as &lt;code&gt;menucomplete&lt;/code&gt; supersedes it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;autonamedirs&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Zsh has a really neat feature where you can &amp;ldquo;name&amp;rdquo; directories and then use
the name instead of the full directory path anywhere where a normal path
would be accepted. This option tells zsh that if you set an environment
variable to a literal path, that environment variable should also be
accepted as a name for that path when preceded by the &lt;code&gt;~&lt;/code&gt; (tilde), which is
how zsh normally identifies the names of named directories. I&#39;ll dig into
this a bit more later on.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;cdablevars&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This basically says that if an argument is expected to be a directory and
all other shell expansion has failed to produce a directory, also try to
expand it as though it were the name of a named directory, even though it
doesn&#39;t begin with the &lt;code&gt;~&lt;/code&gt; character.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;histignoredups&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Don&#39;t record duplicate commands in the history. Because honestly, did you
need to know how many times you had to repeat the same command? It&#39;s just
embarrassing.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;listtypes&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This causes the menu completion display to include characters indicating the
types of the items (symbolic links, executables, etc.)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;menucomplete&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;When attempting a completion on an ambiguous match, instead of simply
appending all remaining characters shared by all possible matches and
waiting (which is the usual behavior in most shells), immediately insert the
entire first possible match and display the completion menu. This is better
experienced than described, so try it out and see if you like it. I do.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;nolistbeep&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Zsh will emit a terminal bell when you attempt to do an ambiguous
completion&amp;hellip; Unless you set this option. Which I strongly recommend.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;These are the options that I&#39;m pretty happy with so far, although I&#39;m still
tweaking things here and there. Now let&#39;s get into the serious stuff!&lt;/p&gt;
&lt;p&gt;{% infobox %}
Since I wrote this, I have decided that &lt;code&gt;menucomplete&lt;/code&gt; is kind of annoying.
When &lt;code&gt;menucomplete&lt;/code&gt; is turned on, you can&#39;t drill down into partial
completions by adding disambiguating characters because the menu appears
immediately. So, give it a try, but I turned it back off.
{% endinfobox %}&lt;/p&gt;
&lt;h2 id=&#34;whats-in-a-name&#34;&gt;What&#39;s in a Name?&lt;/h2&gt;
&lt;p&gt;Zsh has this pretty fantastic feature called named directories. If you are
familiar with Linux shells at all, you are probably by now quite used to using
&lt;code&gt;~&lt;/code&gt; to stand in for the path to your home directory. This is supremely
convenient when you want to, for example, copy a file from your current
directory to your home directory, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ cp some_file.txt ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much easier than having to type out &lt;code&gt;/home/myusername/&lt;/code&gt; or whatever it may be.
So that&#39;s swell, but what if you could create your own symbols for long
directory names that you use often? In zsh you can!&lt;/p&gt;
&lt;p&gt;The whole concept of &amp;ldquo;named directories&amp;rdquo; is based on zsh&#39;s &amp;ldquo;expansion&amp;rdquo; system,
which you can read about in detail on &lt;a href=&#34;http://www.cs.elte.hu/zsh-manual/zsh_6.html&#34;&gt;this page&lt;/a&gt;. Essentially, if any word
entered at the zsh prompt begins with a tilde (&lt;code&gt;~&lt;/code&gt;), zsh attempts to expand it
in a few ways. Note that you can force this expansion &amp;ldquo;live&amp;rdquo; on the prompt by
pressing tab (which is sometimes really helpful and cool).&lt;/p&gt;
&lt;p&gt;To name your own directory, all you need to do is define a shell variable (in
zsh they call these &amp;ldquo;parameters;&amp;rdquo; I&#39;m not sure why) that begins with a forward
slash. Obviously named directories must be absolute, so that might be slightly
limiting, but let&#39;s look at an example.&lt;/p&gt;
&lt;p&gt;Let&#39;s say you run an Apache webserver and the root of your main website is
located at &lt;code&gt;/var/www/awesomesite&lt;/code&gt;. Even with tab completion it can be annoying
to type that over and over, so let&#39;s create a very short name for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ export wroot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/var/www/awesomesite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example, I have used the &lt;code&gt;export&lt;/code&gt; command at the prompt to
immediately add this variable to my environment. You can add that exact line
to your &lt;code&gt;.zshrc&lt;/code&gt; so that it is permanent (without the dollar sign prompt
obviously). Now, if you want to change directories to your web root, you type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ cd ~wr&amp;lt;tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you press tab, if there are no other named directories starting with
&amp;ldquo;wr,&amp;rdquo; it will expand your command line to &lt;code&gt;cd ~wroot/&lt;/code&gt;. You saved at least six
or seven keystrokes even accounting for tab completion with the original full
path. You can also use the &lt;code&gt;~wroot&lt;/code&gt; shorthand anywhere where zsh expects a
path and it will work. For example, &lt;code&gt;touch ~wroot/foo.txt&lt;/code&gt; will work. Think of
the possibilities.&lt;/p&gt;
&lt;p&gt;So what if you wind up with a whole bunch of named directories? No problem,
zsh will continue to use your various completion options to disambiguate what
you have typed, including the same menu it uses for normal commands and paths
as described above.&lt;/p&gt;
&lt;p&gt;Named directories is one of my favorite zsh tricks.&lt;/p&gt;
&lt;h2 id=&#34;what-else&#34;&gt;What Else?&lt;/h2&gt;
&lt;p&gt;There are obviously a lot of options available and I have only scratched the
surface here. I am still learning which combination of options I really like,
but maybe you have some experience or ideas as well; feel free to share them!
Remember, sharing is caring.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>test complex vim settings easily</title>
       <link>http://example.org/post/2013/10/24/test-complex-vim-settings-easily/</link>
       <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/10/24/test-complex-vim-settings-easily/</guid>
       <description>&lt;p&gt;Have you ever wanted to test a new value for a complex Vim setting, like
&lt;code&gt;comments&lt;/code&gt;, and been annoyed at having to print out the setting, memorize its
value, and then type it back in? There are a couple of ways around this that
are much more convenient, but I&#39;ll show you a great trick for getting the
current value of a setting to work from.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;As an example, let&#39;s stick with the &lt;code&gt;comments&lt;/code&gt; setting, which tells Vim what
source code comments look like in various languages. A typical value for
&lt;code&gt;comments&lt;/code&gt; is something like &lt;code&gt;s1:/*,mb:*,ex:*/,://,:#&lt;/code&gt; (this one handles all
PHP-style comments).&lt;/p&gt;
&lt;p&gt;The first part of this trick is to know that you can reference the values of
settings by prepending an ampersand on their name. In other words, in VimL
code, you can use &lt;code&gt;&amp;amp;comments&lt;/code&gt; to reference the value of the &lt;code&gt;comments&lt;/code&gt;
setting. This is done in Vim script fairly regularly to manipulate the values
of buffer-local settings that affect what the script is trying to do.&lt;/p&gt;
&lt;p&gt;The second part of the trick is to understand that a variable like &lt;code&gt;&amp;amp;comments&lt;/code&gt;
is considered to be an &lt;em&gt;expression&lt;/em&gt; by Vim, which is to say, it can be
evaluated. The result of evaluating &lt;code&gt;&amp;amp;comments&lt;/code&gt; is the value of the setting.&lt;/p&gt;
&lt;p&gt;Armed with these two pieces of knowledge, we can use the &lt;em&gt;expression register&lt;/em&gt;
to easily feed the current value of a setting into the command to change that
setting. Let&#39;s try it with &lt;code&gt;comments&lt;/code&gt;. Type this exactly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:set comments=&amp;lt;C-R&amp;gt;=&amp;amp;comments&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that &lt;code&gt;&amp;lt;C-R&amp;gt;&lt;/code&gt; means that you should press Ctrl-R on your keyboard, and
&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; means that you should press the return key. When you press Ctrl-R, Vim
will enter &lt;em&gt;operator pending&lt;/em&gt; mode and wait for you to enter a register name
(which is typically a single letter or number). When you press &lt;code&gt;=&lt;/code&gt;, it
indicates that you want to insert a value from the &lt;em&gt;expression register&lt;/em&gt;,
which is a special register that has no stored value. Instead, you will see an
equal sign prompt and you can enter any expression that Vim can evaluate.&lt;/p&gt;
&lt;p&gt;When you enter &lt;code&gt;&amp;amp;comments&lt;/code&gt; at the expression prompt and press enter, Vim
evaluates that expression and inserts the resulting value at the cursor&#39;s
(previous) position, which sets you up to start editing that setting.&lt;/p&gt;
&lt;p&gt;You can also use this &lt;code&gt;&amp;lt;C-R&amp;gt;=&lt;/code&gt; trick in insert mode at any time to insert the
result of expression evaluation directly into the file you&#39;re editing. This
can sometimes be helpful to do quick math or string conversions using any of
Vim&#39;s built-in functions.&lt;/p&gt;
&lt;p&gt;Want more? Check out these articles in the Vim help files to learn all about
expressions, the expression register, and Vim&#39;s built-in functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:h expression&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:h function-list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:h quote=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>type like optimus prime the mechanical keyboard renaissance</title>
       <link>http://example.org/post/2013/04/24/type-like-optimus-prime-the-mechanical-keyboard-renaissance/</link>
       <pubDate>Wed, 24 Apr 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/04/24/type-like-optimus-prime-the-mechanical-keyboard-renaissance/</guid>
       <description>&lt;p&gt;Set aside for the moment the fact that Optimus Prime&#39;s defining characteristic
is his ability to &lt;em&gt;transform&lt;/em&gt;. Pretend, instead, that he&#39;s just an enormous,
sentient robot. That&#39;s what your keyboard would be like if you had mechanical
key switches in there. Maybe you already do and this is old hat; if that is
the case, move along. But if you want to learn about Cherry MX Blues and the
siren song of the Rosewills and the Leopolds, by all means, read on.
&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Most keyboards do not have mechanical key switches. The reason for this is
quite simple: mechanical key switches are more expensive to manufacture.
That&#39;s really the only reason I can come up with.&lt;/p&gt;
&lt;p&gt;To the contrary, most keyboards have some type of &amp;ldquo;conductive rubber pad&amp;rdquo;
mechanism, which usually consists of a single circuit board, a rubber overlay
that provides resistance to key presses and holds conductive rubber pads above
a grid of switch-like breaks in the circuit board traces. When you press down
on a key, you are depressing one of the rubber &amp;ldquo;bumps,&amp;rdquo; which eventually
collapses and allows the conductive pad to touch the circuit board underneath,
completing the circuit.&lt;/p&gt;
&lt;p&gt;Making keyboards this way has a few advantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The materials and manufacturing are really cheap.&lt;/li&gt;
&lt;li&gt;The parts can be extruded or molded and assembled by machines.&lt;/li&gt;
&lt;li&gt;The keyboards are typically quiet and comfortable to use, which is
appealing in the modern office environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, there are also disadvantages. The primary disadvantage is that
commodity keyboards fail quickly; generally in under a couple million key
presses, but by comparison to mechanical key switch keyboards they often have
a cheap or flimsy feel during use. Even the nicer conductive keyboards pale in
comparison to the feeling of pressing down on an actual, mechanical button.&lt;/p&gt;
&lt;p&gt;So what makes mechanical key switches better? How about another list?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Most mechanical key switches (the popular ones) are made by companies that
do not make keyboards, they only make key switches. This specialization
results in a higher quality product.&lt;/li&gt;
&lt;li&gt;Rather than failing after one or two million key presses, mechanical key
switches are generally expected to survive thirty, forty, or fifty million
key presses before succumbing to the wear and tear of their owner&#39;s
constant hammering.&lt;/li&gt;
&lt;li&gt;They feel awesome to type on. Seriously. There are a few types of key
switches, which I will go over, and they all feel so much better to type
on than your run-of-the-mill Microsoft or Dell keyboard.&lt;/li&gt;
&lt;li&gt;Geek cred. More on this at the end.&lt;/li&gt;
&lt;/ol&gt;
</description>
     </item>
   
     <item>
       <title>why python is your tooling language of choice</title>
       <link>http://example.org/post/2013/04/08/why-python-is-your-tooling-language-of-choice/</link>
       <pubDate>Mon, 08 Apr 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/04/08/why-python-is-your-tooling-language-of-choice/</guid>
       <description>&lt;p&gt;{% img left /images/uploads/why-python/python_logo.gif %}&lt;/p&gt;
&lt;p&gt;Python is, by far, the language of your choosing when you need to build a
toolchain of utilities that interact with local systems, servers, other
software, running processes, and generally all things outside of your
application development.&lt;/p&gt;
&lt;p&gt;I leave out application development because I still believe that when it comes
to server-side application code that lives for exactly one user request, the
best language is the one you are comfortable with. It may be Python, but it
may also be Ruby, PHP, Scala, Erlang, Haskell, or one of those new-age sparkly
languages such as Go or Rust.&lt;/p&gt;
&lt;p&gt;Yet, as you dig deeper into forking processes, maintaining a running state,
cleaning up after yourself (I&#39;m talking about memory, I will assume that you
bathe), and generally &lt;em&gt;acting predictably&lt;/em&gt;, Python is, without a doubt, your
chosen language.&lt;/p&gt;
&lt;p&gt;Why? I&#39;ll tell you why.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;First off, Python, you&#39;ve heard of it? I hope so. Python is interpreted but
bytecode compiled, and runs in its own &amp;ldquo;virtual machine&amp;rdquo; or &amp;ldquo;virtual
environment.&amp;rdquo; This gives it certain other advantages within the programming
ecosystem but none of those are relevant to this conversation. It&#39;s easy to
learn (relatively speaking) and enforces its scoping and nesting through
indentation rather than curly braces or parentheses. This generally leads to
cleaner (looking) code.&lt;/p&gt;
&lt;p&gt;So what makes Python a better tooling language? You can certainly write Python
web applications, but they are probably not fundamentally any more efficient
or maintainable than the spaghetti code you wrote in any of the other
languages I mentioned above. Any application of sufficient size and age,
regardless of the language, becomes a bit like the New York City Subway
system&amp;hellip; Layers of old and new tunnels, with homeless people living in
some of them.&lt;/p&gt;
&lt;p&gt;Setting aside for a moment PHP&#39;s long-suffered garbage collection woes, many
of which were resolved in at least the 5.3 release, and considering only
language features themselves, the one thing that sets Python above the rest is
the (somewhat new) &lt;em&gt;subprocess module&lt;/em&gt;. Why is this awesome? Because shells
suck.&lt;/p&gt;
&lt;p&gt;Don&#39;t get me wrong, I love shells. I&#39;m in a shell right now and I prefer
shells to almost everything else as a human being who needs to interact with
computers. But when programs need to interact with one another, shells
seriously suck.&lt;/p&gt;
&lt;p&gt;You should first read this nice explanation by Stefan Karpinski, which is
focused more on the &amp;ldquo;julia&amp;rdquo; language but uses Ruby examples: &lt;a href=&#34;http://julialang.org/blog/2012/03/shelling-out-sucks/&#34;&gt;Shelling out
sucks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What it boils down to is that UNIX programs like to talk to each other through
pipes, and the easiest way for anyone to create a pipe in any arbitrary
language of their choosing is to wire them together using the shell
environment, because the shell gives you these tools out-of-the-box.
Unfortunately, there are plenty of ways that things can go Wrong(tm).&lt;/p&gt;
&lt;p&gt;In contrast, Python&#39;s subprocess module (which is now the only accepted method
of interacting with external processes) can create the processes and wire up
their pipes for you, without a shell in between. You can tell Python to use a
shell, but it is strongly discouraged and in the majority of cases
unnecessary.&lt;/p&gt;
&lt;p&gt;If you have not had occasion to run afoul of spawning external programs and
reading their output or passing them input&amp;hellip; You probably need to do more
hobby programming. That said, keep Python in mind, it will make your life a
lot easier.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>c star music player is my new best friend</title>
       <link>http://example.org/post/2013/04/06/c-star-music-player-is-my-new-best-friend/</link>
       <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/04/06/c-star-music-player-is-my-new-best-friend/</guid>
       <description>&lt;p&gt;Have you heard of C * Music Player, also commonly abbreviated as its command
name, &lt;code&gt;cmus&lt;/code&gt;? If you haven&#39;t, you&#39;re potentially missing out on your new
favorite music player (at least, since WinAmp 2.x; ahhh, those were the days).&lt;/p&gt;
&lt;p&gt;C * Music Player is for UNIX-like OSes, which essentially means Linux and OS
X. You can usually grab it through your package manager of choice (&lt;code&gt;apt&lt;/code&gt; in
Debian-based Linuxes, Homebrew in OS X).&lt;/p&gt;
&lt;p&gt;It looks a little like this:&lt;/p&gt;
&lt;p&gt;{% img /images/uploads/cmus-cmus_screenshot.png %}&lt;/p&gt;
&lt;p&gt;That&#39;s &lt;code&gt;cmus&lt;/code&gt; running in a tmux session in iTerm 2, using the Zenburn color
theme that now ships along with it (finally).&lt;/p&gt;
&lt;p&gt;You might be thinking, &amp;ldquo;Ugh, a terminal-based music player? How limiting.&amp;rdquo; Not
so. What if I told you that you could have global keyboard shortcuts and Growl
notifications? Well, you can (at least in OS X). I&#39;ll tell you how.
&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Full disclosure&lt;/em&gt;: in order to get global hotkeys working in OS X, you need
the Alfred Powerpack, which is not free. Alfred is an amazing launcher
utility, faster and more awesome than Quicksilver and Butler. Seriously, you
should try it, it&#39;s free. If you like it, you can buy the Powerpack and follow
my instructions below to learn how use it to control lots of other things.&lt;/p&gt;
&lt;p&gt;The Alfred Powerpack includes &amp;ldquo;workflows,&amp;rdquo; a super-powerful visual
scripting capability that can probably make a lot of things easier for you in
the long run. I recommend supporting these guys, they make good stuff.&lt;/p&gt;
&lt;p&gt;That said, if you are in a Linuxy type of environment, there will be some
other way to create global keyboard shortcuts (in Xmonad you can plop them
right into your &lt;code&gt;~/.xmonad/xmonad.hs&lt;/code&gt;, for which there is massive amounts of
documentation), but I&#39;m not going to get into any of that in this article.&lt;/p&gt;
&lt;p&gt;Even in OS X there are probably other ways, such as Quicksilver. What you need
is the ability to bind a global keyboard shortcut to a &lt;em&gt;terminal script
execution&lt;/em&gt;, or a command, to put it simply.&lt;/p&gt;
&lt;h2 id=&#34;yay-sockets&#34;&gt;Yay, sockets!&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cmus&lt;/code&gt;, by default, starts listening for remote control commands on a &lt;em&gt;UNIX
socket&lt;/em&gt; called, appropriately, &lt;code&gt;~/.cmus/socket&lt;/code&gt;. UNIX sockets are awesome,
even better than named pipes. So how does this help you to reach &lt;code&gt;cmus&lt;/code&gt;
nirvana? Through a little included utility predictably named &lt;code&gt;cmus-remote&lt;/code&gt;.
You can already see where this is going.&lt;/p&gt;
&lt;p&gt;What we&#39;re going to do is wire up an Alfred workflow to listen for a key press
like Control-Command-X and tell &lt;code&gt;cmus&lt;/code&gt; to begin playing, then also print out
and grep the current artist and track name, and send that along to Growl so
that it displays what it&#39;s doing in the corner of the screen. Perfect.&lt;/p&gt;
&lt;p&gt;Here is what the workflow looks like for the &amp;ldquo;play&amp;rdquo; command:&lt;/p&gt;
&lt;p&gt;{% img center /images/uploads/cmus-alfred_workflow.png %}&lt;/p&gt;
&lt;p&gt;It&#39;s the &amp;ldquo;Run Script&amp;rdquo; step that&#39;s interesting. Here is the script we&#39;re
running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/local/bin/cmus-remote -p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/usr/local/bin/cmus-remote -Q | 
/usr/bin/grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag artist&amp;#39;&lt;/span&gt; | /usr/bin/cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f3-&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;/usr/local/bin/cmus-remote -Q | /usr/bin/grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag title&amp;#39;&lt;/span&gt; | /usr/bin/cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; -f3-&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Evidently the &lt;code&gt;/bin/bash&lt;/code&gt; environment that Alfred executes scripts within does
not have any path configured, so I&#39;ve had to put in the full paths to each
utility, but that&#39;s not a big deal. Let me break down for you what&#39;s happening
here.&lt;/p&gt;
&lt;p&gt;First, we execute &lt;code&gt;cmus-remote -p&lt;/code&gt;, which tells &lt;code&gt;cmus&lt;/code&gt; to begin playing.&lt;/p&gt;
&lt;p&gt;Next, echo the output of two sub-shell commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cmus-remote -Q | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag artist&amp;#39;&lt;/span&gt; | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f3-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cmus-remote -Q | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tag title&amp;#39;&lt;/span&gt; | cut -d&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f3-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each command first runs &lt;code&gt;cmus-remote -Q&lt;/code&gt;, which outputs the current status of
&lt;code&gt;cmus&lt;/code&gt;, including the currently playing track and so on. I use &lt;code&gt;grep&lt;/code&gt; to find
the line I&#39;m looking for, which looks like &lt;code&gt;tag artist Artist Name&lt;/code&gt; and use
the &lt;code&gt;cut&lt;/code&gt; command to get just the artist name itself.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;cut -d&#39; &#39;&lt;/code&gt; I am specifying that the field delimiter is a space, and then
I&#39;m asking for fields three through to the end (the trailing hyphen means
&amp;ldquo;all following fields&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;I then separate the output of each with a hyphen by using this bash construct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;first command&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; - &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;second command&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&#39;s a very helpful little trick to know. This results in an output like
&amp;ldquo;Artist Name - Track Name&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Then, I set up the Growl notification step in the workflow to actually include
the previous command output in the message, which in Alfred you can achieve by
using the special string &lt;code&gt;{query}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;{% img center /images/uploads/cmus-growl_panel.png %}&lt;/p&gt;
&lt;p&gt;Now when I press Control-Command-X, &lt;code&gt;cmus&lt;/code&gt; begins playing and Alfred helpfully
pops up a Growl notification saying &amp;ldquo;Play (Artist - Track)&amp;quot;. I duplicated this
workflow for each of previous track, next track, pause, and stop. It&#39;s
amazing.&lt;/p&gt;
&lt;h3 id=&#34;ok-but-why&#34;&gt;OK, but why?&lt;/h3&gt;
&lt;p&gt;Why go through all of this work when you can just use iTunes or something?
There are certainly tons of ways to remote control iTunes with the keyboard,
and in fact, Alfred ships with support for it in its workflows, also.&lt;/p&gt;
&lt;p&gt;The answer is&amp;hellip; &lt;code&gt;cmus&lt;/code&gt; is fast. It&#39;s fast and efficient and handles
searching, organizing, and playing many thousands of tracks so much better
than iTunes. Plus, I can keep it tucked away in tmux where I can get to it by
keyboard when I&#39;m in the middle of doing whatever it is I&#39;m doing&amp;hellip; Like
writing this blog post.&lt;/p&gt;
&lt;p&gt;Questions? Comments? That&#39;s what the form at the bottom of the page is for. Go
for it.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>configure your old airport express in mountain lion</title>
       <link>http://example.org/post/2013/03/16/configure-your-old-airport-express-in-mountain-lion/</link>
       <pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/16/configure-your-old-airport-express-in-mountain-lion/</guid>
       <description>&lt;p&gt;Apple, in their ultimate wisdom, have made it impossible to install the
AirPort Utility version 5.6 in Mountain Lion. The utility works, mind you, but
you can&#39;t install it.&lt;/p&gt;
&lt;p&gt;That is, unless you have a little bit of bash-fu on your utility belt, which I
do. You can extract the utility from the installer package and run it directly
to configure your older-generation AirPort Express. Want to learn
how?&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Step 1: Download &lt;a href=&#34;http://support.apple.com/kb/dl1482&#34;&gt;AirPort Utility 5.6&lt;/a&gt;
from Apple.&lt;/p&gt;
&lt;p&gt;Step 2: Mount the disk image and copy the installer &lt;code&gt;.pkg&lt;/code&gt; file somewhere,
like your desktop (I will use your desktop as my example here).&lt;/p&gt;
&lt;p&gt;Step 3: Expand the contents of the installer package into a folder. Open your
terminal and do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd Desktop
$ pkgutil --expand AirPortUtility56.pkg AirPortUtility
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, go into the AirPortUtility folder that you just expanded, navigate into
the &lt;code&gt;AirPortUtility56Lion.pkg&lt;/code&gt; folder, and run the Payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd AirPortUtility
$ cd AirPortUtility56Lion.pkg/
$ open Payload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A progress dialog window will open and Payload will be extracted, which will
create a new folder called &lt;code&gt;Payload 2 2&lt;/code&gt;. Expand that folder and within it,
expand &lt;code&gt;Applications&lt;/code&gt; and then &lt;code&gt;Utilities&lt;/code&gt; and there you will find &lt;code&gt;AirPort  Utility 5.6&lt;/code&gt;. You can copy the app into your Applications folder, or wherever
you want, or just run it from there if you only need it once.&lt;/p&gt;
&lt;p&gt;Congratulations! You can now configure your older AirPort Express (or older
Extreme base station) using OS X Mountain Lion.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>amazon cloud player vs google play</title>
       <link>http://example.org/post/2013/03/14/amazon-cloud-player-vs-google-play/</link>
       <pubDate>Thu, 14 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/14/amazon-cloud-player-vs-google-play/</guid>
       <description>&lt;p&gt;Perhaps you&#39;ve heard of Amazon&#39;s new Cloud Player and Google Play (previously
Google Music), and perhaps you&#39;ve used one or both of them. If you&#39;ve already
formed your own opinion, it&#39;s unlikely that what I will say here will change
it, but if you&#39;re considering trying one of these (admittedly awesome)
services, you may enjoy reading on.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;As you can see from the simple feature grid below, the services are very
similar on their face:&lt;/p&gt;
&lt;p&gt;| Feature                | Cloud Player          | Google Play              |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| Upload your own music  | Up to 250 tracks free | Up to 20,000 tracks free |
| Match online library   | Yes                   | Yes                      |
| Play in web browser    | Yes                   | Yes                      |
| Play on Android/iPhone | Yes                   | Yes                      |
| Play on Sonos speakers | Yes                   | No                       |
| Download tracks        | Yes                   | Yes                      |
| Upload automatically   | Yes                   | Yes                      |&lt;/p&gt;
&lt;p&gt;So let&#39;s get into the details. First things first: why would you want to use
one of these services anyway? I&#39;m sure that the reasons may be different for
you, but here are the reasons I decided to start this evaluation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listen to the same music on your computer, from your phone, and through a
variety of other media devices, such as Sonos and Roku (the Netflix player).&lt;/li&gt;
&lt;li&gt;Have download access to your music from anywhere (with a browser).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For me, the first point is doubly attractive because I have an ample data plan
from my cell carrier and Bluetooth A2DP audio in my car. This means that I can
listen to all of my music in the car, on the train, on my computer at home, or
on my laptop in a coffee shop somewhere. It&#39;s a compelling proposition.&lt;/p&gt;
&lt;p&gt;My entire music collection at this point is about 7,000 tracks. The truth is,
I don&#39;t frequently listen to all of that music, but I think that 7,000 tracks
is a reasonable size for a personal music collection. I was on the cusp of
purchasing the Amazon Cloud Player &amp;ldquo;premium account,&amp;rdquo; which increases the
track limit to 250,000, when I learned of the Google Play service.&lt;/p&gt;
&lt;p&gt;With Google Play&#39;s 20,000 track limit, I can load up all of my music and
listen for free. Awesome.&lt;/p&gt;
&lt;p&gt;OK, so the feature grid makes it look like the services are equivalent except
for the track limit, so how do you choose? I&#39;m here to tell you, they are
&lt;em&gt;not&lt;/em&gt; equivalent at all.&lt;/p&gt;
&lt;h2 id=&#34;browser-support&#34;&gt;Browser support&lt;/h2&gt;
&lt;p&gt;The first thing you&#39;re going to notice is that both services offer
browser-based players. The full desktop browser players are OK from both
companies, but Google edges out the lead by accepting some common keyboard
shortcuts, such as spacebar to play and pause, and left and right arrow keys
to move to the previous and next track.&lt;/p&gt;
&lt;p&gt;The Amazon player works well enough and the interface is easy to use, but it
doesn&#39;t seem to respond to any key presses.&lt;/p&gt;
&lt;p&gt;Now let&#39;s talk about mobile browsers. Both services offer native apps for the
iPhone and Android-based phones, but what they do not offer is a native iPad
app. So, what if you want to listen to some music on your iPad?&lt;/p&gt;
&lt;p&gt;If you have Cloud Player, you can&#39;t. You can install the iPhone app on your
iPad, but it&#39;s not a great experience. If you&#39;re really in a bind and want to
go that route, it&#39;s there, but it is not a very &amp;ldquo;iPaddy&amp;rdquo; experience.&lt;/p&gt;
&lt;p&gt;I got the Amazon Cloud Player site to load in Mobile Safari on my iPad once,
and it even played a track or two, but it was unreliable and took several taps
of links and buttons to make things happen. Now it looks like you get turned
away when you try to access it from the iPad so I guess it&#39;s really not
production-ready.&lt;/p&gt;
&lt;p&gt;If you try to load the Google Play site on your iPad browser (and just to be
generous, I used Chrome, which I normally use for web browsing on my iPad
anyway), it loads fine, and works perfectly. The interface is spartan
considering the screen real estate, but the playback works exactly as you
would expect it to.&lt;/p&gt;
&lt;p&gt;I don&#39;t think that you can listen to music in the background while using the
browser-based app, but at least it works.&lt;/p&gt;
&lt;h2 id=&#34;other-ways-to-listen&#34;&gt;Other ways to listen&lt;/h2&gt;
&lt;p&gt;Google owns the web experience; between the two web-based players, Google&#39;s is
the more intuitive, more responsive, and generally cleaner one.&lt;/p&gt;
&lt;p&gt;On the iPhone, both services seem to be neck-and-neck. On Android (which is
what I personally use), the Google Play app is a nice little player that can
stream from your account as well as play local music. I have used it for a
while and have no substantial complaints.&lt;/p&gt;
&lt;p&gt;It seems that Google is not ready or not willing to allow third-party
developers to access the music from Play, though. Sonos can&#39;t play from that
source, and I don&#39;t think you can access it from your Roku, either. Meanwhile,
Amazon&#39;s Cloud Player service is accessible from both Roku and Sonos.&lt;/p&gt;
&lt;h2 id=&#34;on-the-periphery&#34;&gt;On the periphery&lt;/h2&gt;
&lt;p&gt;A few other things stand out that you may like to consider when choosing a
service:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amazon&#39;s music uploader application is made with Adobe Air. I don&#39;t have any
real problem with Adobe Air, but Amazon didn&#39;t do a great job with this one.
It can sometimes hang while uploading and doesn&#39;t feel very polished.&lt;/li&gt;
&lt;li&gt;In contrast to the above, Google&#39;s music uploader is a native application. I
tried the Windows one and the experience was smooth and without issue.&lt;/li&gt;
&lt;li&gt;It seemed to me that Google&#39;s service provided a faster upload speed. I am
on Verizon FiOS and have 35 megabits of upstream bandwidth so I do like to
see a couple of megs per second going up, and with Google that was the case.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Which service to choose? This depends on your needs, of course. If you want to
do a serious test drive without spending any money, Google will let you store
more tracks for free. If you are a devout user of Sonos, Roku, or another
third-party multimedia platform, the chances are higher than it will have
Cloud Player support than Google Play support.&lt;/p&gt;
&lt;p&gt;If you are an Android user, or if you listen mostly on the web at work or at
home, Google&#39;s service is the way to go; their web-based player is on par with
Pandora and other mature web applications, with support for keyboard shortcuts
and a quick, responsive feel.&lt;/p&gt;
&lt;p&gt;For me, I think I will stick with Google Play. It&#39;s a bummer that I can&#39;t play
it on the Sonos, but maybe that will change. For now, I&#39;m happy to stream from
my browser and my phone.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>dmenu plus xft equals awesome</title>
       <link>http://example.org/post/2013/03/12/dmenu-plus-xft-equals-awesome/</link>
       <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/12/dmenu-plus-xft-equals-awesome/</guid>
       <description>&lt;p&gt;Though I love my Macs, I often use Ubuntu. I have an old laptop running Ubuntu
(which I&#39;m typing this on right now) and I occasionally run Ubuntu in VMware
Workstation or VMware Fusion just as an efficient alternative to Windows or
when I&#39;m doing something that is particularly Linux-friendly.&lt;/p&gt;
&lt;p&gt;My favorite window manager right now is Xmonad, a tiling window manager
written in Haskell. I know very little of Haskell, which makes navigating its
configuration files, which are Haskell scripts, somewhat daunting, but the
window manager itself is simple and incredibly fast.&lt;/p&gt;
&lt;p&gt;There are two tools that everyone who uses Xmonad comes to love: xmobar and
dmenu. The former places a persistent status bar at the top of the screen,
which of course you can customize, and the latter is triggered by a keyboard
shortcut and opens a one-line menu of programs in your path that is filtered
as you type. The ultimate no-frills launcher.&lt;/p&gt;
&lt;p&gt;This is the story of how I finally got Xft (anti-aliased TrueType fonts)
working in dmenu. It makes it look amazing. Seriously.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;In order to get dmenu to use Xft, you need to patch the source and compile it.
Fortunately, the patch is provided for you. Download the dmenu source and the
patch for the same version from the links below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.suckless.org/dmenu/&#34;&gt;Suckless Tools Dmenu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tools.suckless.org/dmenu/patches/xft&#34;&gt;Dmenu Xft support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then all you have to do, in theory, is extract the source, apply the patch,
and compile dmenu. Something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ tar zxvf dmenu-4.5.tar.gz
$ cd dmenu-4.5
$ mv ../dmenu-4.5-xft.diff .
$ patch -p1 &amp;lt; dmenu-4.5-xft.diff
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The third line is assuming that the &lt;code&gt;dmenu-4.5.tar.gz&lt;/code&gt; and
&lt;code&gt;dmenu-4.5-xft.diff&lt;/code&gt; files were downloaded or moved to the same location
before you began. There are other ways to do it, but you get the idea, I hope.&lt;/p&gt;
&lt;p&gt;When I attempted to run this, in Ubuntu, it complained that it couldn&#39;t find
freetype.h (or one of the other headers in the Freetype package). Funny, I&#39;m
sure I installed it.&lt;/p&gt;
&lt;p&gt;Make sure that you do install the Xft libraries themselves:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get install libxft-dev libxft2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you&#39;ve done that, you may still get an error because dmenu doesn&#39;t ship
with a &lt;code&gt;configure&lt;/code&gt; script that scours around to find the various dependencies,
and on top of that, dmenu doesn&#39;t have an Xft dependency&amp;hellip; Until you patch
it. Then it does, but it doesn&#39;t know where to find the headers.&lt;/p&gt;
&lt;p&gt;Easily fixed!&lt;/p&gt;
&lt;p&gt;Edit the &lt;code&gt;config.mk&lt;/code&gt; file in the dmenu package and find the line that looks
like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INCS = -I${X11INC} ${XFTINC}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And amend it so that it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INCS = -I${X11INC} ${XFTINC} -I/usr/include/freetype2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are running Ubuntu I am 99% sure this will work, but you should do a
sanity check to make sure that &lt;code&gt;/usr/include/freetype2&lt;/code&gt; exists and contains
the freetype headers (like &lt;code&gt;freetype.h&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If you are certain you installed it but can&#39;t find them there, an easy way to
sniff them out is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo updatedb
$ locate freetype.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just replace my path with yours if it&#39;s different. Then you&#39;re on your way!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ make
$ sudo make install
$ dmenu_path | dmenu -fn &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Inconsolata-10&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&#39;s assuming you have installed the wonderful Inconsolata typeface. If not,
you should try it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get install fonts-inconsolata
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you&#39;re in dmenu anti-aliased font nirvana! Just add some colors and you&#39;ll
feel even better:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dmenu_run -i -nb &#39;#282b57&#39; -nf &#39;#eeeeff&#39; -sb &#39;#555a9e&#39; -fn &#39;Inconsolata-10&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Beautiful. Pat yourself on the back, that was great.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>rbenv revisited</title>
       <link>http://example.org/post/2013/03/11/rbenv-revisited/</link>
       <pubDate>Mon, 11 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/11/rbenv-revisited/</guid>
       <description>&lt;p&gt;A few days ago I wrote about my
&lt;a href=&#34;http://example.org/blog/2013/03/08/rbenv-for-the-win/&#34;&gt;experience with Rbenv&lt;/a&gt;, the Ruby
environment manager (is that what they call it?). My overall experience was
good, but I did encounter a couple of hiccups getting the &amp;ldquo;ruby-build&amp;rdquo; plugin
to work. While installing the whole kit once again on this cute new Ubuntu
laptop, I figured it out.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;I shouldn&#39;t have been so audacious as to try to install Rbenv using &lt;code&gt;apt&lt;/code&gt;
because, naturally, it isn&#39;t the latest version. When you run the &lt;code&gt;rbenv&lt;/code&gt;
command, it actually executes a bash script that hands off to the program that
handles whichever command you are running. In other words, when you run &lt;code&gt;rbenv  versions&lt;/code&gt;, it hands off to &lt;code&gt;rbenv-versions&lt;/code&gt;, if it exists in your path.&lt;/p&gt;
&lt;p&gt;It&#39;s that &amp;ldquo;bootstrapping&amp;rdquo; bash script that is responsible for making sure that
all of the necessary paths are searched for the program in question. The
latest version (from github) actually looks through the &lt;code&gt;~/.rbenv/plugins&lt;/code&gt;
directory. The version from &lt;code&gt;apt&lt;/code&gt; does not.&lt;/p&gt;
&lt;p&gt;Serves me right. Fortunately, fixing it is easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get remove rbenv
$ rm -rf ~/.rbenv
$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
$ git clone git://github.com/sstephenson/ruby-build.git 
~/.rbenv/plugins/ruby-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&#39;s pretty much it. Remember to add the path stuff to your &lt;code&gt;~/.profile&lt;/code&gt; or
&lt;code&gt;~/.bashrc&lt;/code&gt; or whatever. I share my shell configurations across several
machines, not all of which use Rbenv, so I came up with this, which works
nicely:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -d $HOME/.rbenv/bin &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/.rbenv/bin:$PATH; &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; which rbenv &amp;gt; /dev/null; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; eval &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;rbenv init -&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That will only change your path and import the Rbenv initialization settings
if Rbenv actually exists. Harmony.&lt;/p&gt;
&lt;p&gt;The next problem that I had was that Ruby had no OpenSSL support and refused
to let bundler run. Ruby needs to be compiled with OpenSSL support, but I had
built it using &amp;ldquo;ruby-build,&amp;rdquo; which takes no options (and generally doesn&#39;t
need to). Oddly it worked fine on the Ubuntu VM where I did this last time.&lt;/p&gt;
&lt;p&gt;For whatever reason, this laptop didn&#39;t have &lt;code&gt;openssl&lt;/code&gt; nor &lt;code&gt;libssl-dev&lt;/code&gt;
installed. The thing is, if you don&#39;t have &lt;code&gt;libssl-dev&lt;/code&gt;, ruby won&#39;t be able to
compile its built-in OpenSSL stuff, but it won&#39;t tell you this. Or, at least,
it won&#39;t fail to build, and since &lt;code&gt;ruby-build&lt;/code&gt; gobbles up all of the output of
the build process, you probably won&#39;t know.&lt;/p&gt;
&lt;p&gt;So the moral of the story is, on a virgin box, install &lt;code&gt;openssl&lt;/code&gt; and
&lt;code&gt;libssl-dev&lt;/code&gt; before running your &lt;code&gt;rbenv install&lt;/code&gt; stuff.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>macvim fullscreen paradise</title>
       <link>http://example.org/post/2013/03/09/macvim-fullscreen-paradise/</link>
       <pubDate>Sat, 09 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/09/macvim-fullscreen-paradise/</guid>
       <description>&lt;p&gt;I can&#39;t believe how utterly, totally, fully, and completely I overlooked this.
I could add a few more adjectives to that list and it would still fail to
capture the magnitude of sustained neglect it required on my part not to
realize that this existed.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;OK, hold on, rewind about one month. I got a new MacBook Pro for work, which
is almost exactly the same as my own MacBook Pro except it&#39;s running the
latest OS X. I haven&#39;t been putting off upgrading because I honestly didn&#39;t
feel like the new features were worth the trouble. One of the new features is
the ability to full-screen just about any application. This ties into the
Expose multi-desktop functionality so that when you full-screen an app, it
slides to the right and receives its own dedicated viewport. This is really
slick because you can three-finger swipe on the trackpad to get back to your
normal desktop at any time.&lt;/p&gt;
&lt;p&gt;I was really enjoying that feature for both Chrome and MacVim, both of which I
use often. No, often isn&#39;t the right word. Constantly. I use them
&lt;em&gt;constantly&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When I would come back to my own laptop, though, I would miss the ability to
full-screen MacVim. Chrome, of course, has had full-screen built in for all
platforms for quite some time now, so that was always there. Just hit
Command-Shift-F and it would pop into full-screen.&lt;/p&gt;
&lt;p&gt;Being the dense, neglectful, stolid, uncomprehending fellow that (apparently)
I am, I never pressed those keys in MacVim. I have no idea why I never tried
it, because it works. There&#39;s just one thing, though&amp;hellip;&lt;/p&gt;
&lt;p&gt;If you full-screen MacVim using default settings, it will increase its height
to the maximum number of lines that will fit on your screen and leave the
width alone. The Vim control is centered and the remaining space is filled
with black. This is inefficient.&lt;/p&gt;
&lt;p&gt;If you want the Vim control to fill the whole screen (at least to a multiple
of the character block size, which is the maximum size you can have), you need
to set this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set fuoptions=maxvert,maxhorz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;maxvert&lt;/code&gt; option is the default. &lt;code&gt;maxhorz&lt;/code&gt; tells MacVim to also increase
your columns to the maximum that will fit on your screen.&lt;/p&gt;
&lt;p&gt;It&#39;s really sweet. Especially sweet for writing blog posts without
distraction.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>github resume is so cool</title>
       <link>http://example.org/post/2013/03/08/github-resume-is-so-cool/</link>
       <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/08/github-resume-is-so-cool/</guid>
       <description>&lt;p&gt;Have you guys seen this? Github can generate a &amp;ldquo;resume&amp;rdquo; based on your
github.com account listing the projects you own and organizations you&#39;re
affiliated with. This is &lt;strong&gt;such&lt;/strong&gt; a neat idea!&lt;/p&gt;
&lt;p&gt;You can see mine for example: &lt;a href=&#34;http://resume.github.com/?aaronbieber&#34;&gt;resume.github.com/?aaronbieber&lt;/a&gt;, just
replace my username with yours to see your own Github resume.&lt;/p&gt;
&lt;p&gt;I stumbled upon this thanks to Gina Trapani on Google Plus. Though it&#39;s
flattering for Github to refer to me as an &amp;ldquo;advanced&amp;rdquo; Github user, Gina is a
&amp;ldquo;passionate&amp;rdquo; github user. I think I have a distance to go yet&amp;hellip;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>rbenv for the win</title>
       <link>http://example.org/post/2013/03/08/rbenv-for-the-win/</link>
       <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/08/rbenv-for-the-win/</guid>
       <description>&lt;p&gt;I&#39;m sure that this is not news to many of you, but rbenv is awesome. Because I
faced some challenges along the way while setting up this Octopress blog
environment and have now gone through the motions on both my Mac laptop and
Linux desktop, I am going to take a few minutes to share my findings.&lt;/p&gt;
&lt;p&gt;If you have no interest in using Ruby, you can move along.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-rbenv&#34;&gt;What is rbenv?&lt;/h2&gt;
&lt;p&gt;For those who don&#39;t know, rbenv is a sort of *NIX-oriented way of creating a
Ruby walled garden with the precise version of Ruby itself and its associated
gems captured in a way that doesn&#39;t affect the rest of your system. Primarily,
this allows you to indicate a specific Ruby version that your application
requires and ensure that it doesn&#39;t change. You can feel free to upgrade your
system&#39;s Ruby distribution and it will not meddle with your application.&lt;/p&gt;
&lt;p&gt;As an added bonus, gem-based tools like bundler are also captured and
controlled by rbenv so you don&#39;t have conflicts with your system installation
of bundler, for example. Getting all of this to work is actually not too hard,
but it can be more of a challenge if you have, just for example, a Mac laptop
that has had several Ruby applications run on it in the past and a muddle of
bizarre gems scattered all around.&lt;/p&gt;
&lt;p&gt;The general methodology of rbenv is very similar to Python&#39;s virtualenv (which
serves essentially the same purpose on the Python side of the fence). You
build Ruby itself into a specific location, load some path-management commands
into one of your shell configuration scripts, and then whenever you run ruby,
bundle, gem, etc., you actually run a &amp;ldquo;shim&amp;rdquo; command that rbenv provides,
which redirects all of the internal Ruby path settings (classpath, basically)
to find the precise stuff you&#39;re looking for.&lt;/p&gt;
&lt;p&gt;Moreover, a handy little &lt;code&gt;.ruby-version&lt;/code&gt; file is created in your application&#39;s
directory when you choose a version, so that &amp;ldquo;tag,&amp;rdquo; if you will, lives
alongside your app and can inform other people what version they will need to
satisfy with their own rbenv environments.&lt;/p&gt;
&lt;p&gt;With rbenv and bundler combined, you can rest assured that all support
libraries are sane and organized, which is pretty awesome.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;OK, so how do we install it?&lt;/p&gt;
&lt;p&gt;I won&#39;t go step-by-step through the instructions that are already out there,
but I will link to everything you need and explain some of the caveats and
semi-weirdness that I encountered.&lt;/p&gt;
&lt;p&gt;First, you need rbenv itself. If you are on a Mac, you should use Homebrew to
install it, and that is covered in the &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;rbenv README&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are in some flavor of Debian or Ubuntu or probably Gentoo, you can get
rbenv from your package management system du jour, maybe something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get update
$ sudo apt-get install rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once that&#39;s installed, you are also going to want the &lt;code&gt;ruby-build&lt;/code&gt; package
also by Sam Stephenson, which streamlines the download and compilation of your
selected version(s) of Ruby. This is covered on the
&lt;a href=&#34;https://github.com/sstephenson/ruby-build&#34;&gt;ruby-build github page&lt;/a&gt;, but I had some issue installing it as a plugin,
which I&#39;ll cover next.&lt;/p&gt;
&lt;p&gt;I attempted to clone the project straight in &lt;code&gt;~/.rbenv/plugins/ruby-build&lt;/code&gt; as
instructed, but rbenv could never find the command. I would run &lt;code&gt;rbenv  install&lt;/code&gt; and it would just tell me that the command could not be found. So I
opted for the system-wide installation, which, at least in my case, is not a
big deal because I&#39;m the only user of the system. To do this, you clone the
project wherever you want and run its installer script:&lt;/p&gt;
&lt;p&gt;{% infobox %}
I finally figured this out; see
&lt;a href=&#34;http://example.org/blog/2013/03/11/rbenv-revisited/&#34;&gt;Rbenv revisited&lt;/a&gt; for the details!
{% endinfobox %}&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone git://github.com/sstephenson/ruby-build ruby-build
$ cd ruby-build
$ sudo ./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will install the &lt;code&gt;ruby-build&lt;/code&gt; executable into &lt;code&gt;/usr/local/bin&lt;/code&gt; along with
the &lt;code&gt;rbenv-install&lt;/code&gt; and &lt;code&gt;rbenv-uninstall&lt;/code&gt; plugin commands and then you can
either run &lt;code&gt;ruby-build&lt;/code&gt; itself, or run &lt;code&gt;rbenv install&lt;/code&gt; to install new Ruby
versions.&lt;/p&gt;
&lt;h2 id=&#34;cautionary-notes&#34;&gt;Cautionary notes&lt;/h2&gt;
&lt;p&gt;None of the rbenv black magic works without updating your shell initialization
scripts. For most folks (I think), this is one of &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.profile&lt;/code&gt;,
or &lt;code&gt;.bashrc&lt;/code&gt;. For those using other shells, you know what your initialization
script is. The &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;rbenv README&lt;/a&gt; goes into detail about that, but suffice it
to say, you need to update these files and explicitly source them or restart
your terminal session before things will work correctly.&lt;/p&gt;
&lt;p&gt;When it comes to building versions of Ruby, if you are using &lt;code&gt;ruby-build&lt;/code&gt;
directly as I am, you need to specify the installation location yourself. I
recommend using the default location, &lt;code&gt;~/.rbenv/versions/&amp;lt;version name&amp;gt;&lt;/code&gt;. So
if you wanted to install 1.9.3-p392, you would run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ruby-build 1.9.3-p392 ~/.rbenv/versions/1.9.3-p392
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&#39;m fairly sure that you can name the destination directory however you&#39;d
like, but it seems to make sense to name it for the exact Ruby version. Once
the build completes, you will be able to set the version for any directory
using &lt;code&gt;rbenv version&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;thats-it&#34;&gt;That&#39;s it&lt;/h2&gt;
&lt;p&gt;So that&#39;s about it. If I left anything out that you have questions about, or
if I was&amp;hellip; You know&amp;hellip; Wrong&amp;hellip; About anything&amp;hellip; Please leave a comment
below! I&#39;ll reply, I promise.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>first octopress post</title>
       <link>http://example.org/post/2013/03/07/first-octopress-post/</link>
       <pubDate>Thu, 07 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/07/first-octopress-post/</guid>
       <description>&lt;p&gt;I have migrated the clunky, dusty old Wordpress blog into Octopress, the
spiffy, mostly-Ruby-powered, static blog site generator. While the primary
impetus for this migration was the promise of editing all of my blog posts
directly in Vim, it&#39;s also pretty cool to have the whole site built on SASS
and sitting in a Git repository on my laptop.&lt;/p&gt;
&lt;p&gt;If you want to know more about why this is awesome and you should do it, too,
read on.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;There are a few reasons that Octopress is the correct choice for the hacker
writer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use your choice of editors (my primary reason for trying it out).&lt;/li&gt;
&lt;li&gt;Complete control over the layout and styles without wrangling complicated
themes or PHP code or whatever else.&lt;/li&gt;
&lt;li&gt;Total version control; place your entire blog site, including the Octopress
application code that generates it, into a VCS repository.&lt;/li&gt;
&lt;li&gt;This is a big one. &lt;strong&gt;Static sites have almost no security concerns&lt;/strong&gt;. This
blog is generated on my local machine and sync&#39;d to my live server with
&lt;code&gt;rsync&lt;/code&gt;. You can&#39;t hack it because it&#39;s not an application.&lt;/li&gt;
&lt;li&gt;What could be faster than serving static files? All the dynamic aspects are
Javascript plug-ins (Disqus for comments, Smarterer on the right side,
sharing on social networks, etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It feels wonderful to be able to write a blog post with sane line wrapping and
text formatting (in Markdown, of course) and then have that content translated
to HTML and cross-referenced with the other pages of the site automatically.
This approach puts content creation where it belongs (on the desktop), and
presents the data in hypertext where &lt;em&gt;it&lt;/em&gt; belongs (on the web).&lt;/p&gt;
&lt;p&gt;Can&#39;t remember when you wrote that article about XYZ? Just grep it.&lt;/p&gt;
&lt;p&gt;In any case, this is a new experiment for me, so bear with the layout and
styles of the site as I continue to hone them, which I&#39;m sure I will do.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>i love git a lot</title>
       <link>http://example.org/post/2013/03/07/i-love-git-a-lot/</link>
       <pubDate>Thu, 07 Mar 2013 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/03/07/i-love-git-a-lot/</guid>
       <description>&lt;p&gt;I love git. A lot.&lt;/p&gt;
&lt;p&gt;Judging by the growing ubiquity of github.com in nearly every corner of
digital life that can be captured in text form, I have concluded that I am not
alone in this sentiment. So much do I love git and github.com that I have
taken to using it for as much as possible.&lt;/p&gt;
&lt;p&gt;My latest thing is dotfiles. You know all of those preference and settings
files that start to pile up in your Mac or Linux home directory? The ones that
start with a period? For a while I had been keeping the longer, more important
ones on github.com, which is really helpful when using a new computer or
reinstalling your OS from scratch.&lt;/p&gt;
&lt;p&gt;Today, though, I took it to the next level. Want to know more?&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Maybe this isn&#39;t an Earth-shattering, life-changing revelation, but it
occurred to me that every time I clone this repository I wind up copying out
the files I want and then sort of forgetting about it, neglecting it, and
letting the various files on different computers fall out of sync.&lt;/p&gt;
&lt;p&gt;I don&#39;t like things to get neglected and I don&#39;t like it when things are out
of sync. I have been storing my whole Vim configuration in a git repository
for a long time and now I could never give that up. It&#39;s too easy to pull the
changes that I made into a different environment or to set up Vim on a new
computer (or server).&lt;/p&gt;
&lt;p&gt;Actually, the only dotfiles I store so far are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.bashrc
.gitconfig
.screenrc
.tmux.conf
.ttytterrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And even among those, &lt;code&gt;.screenrc&lt;/code&gt; is sort of redundant because I now use tmux
almost everywhere. That said, I wanted to build up a storage and installation
system for dotfiles that I could use anywhere&amp;hellip; So I did.&lt;/p&gt;
&lt;p&gt;You can see the repository for yourself in its entirety &lt;a href=&#34;http://github.com/aaronbieber/dotfiles&#34;&gt;on github.com&lt;/a&gt;,
but the really magical part is this little bash script called &lt;code&gt;linkall&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&#39;s so short, I&#39;ll show you the whole thing right here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Get options.&lt;/span&gt;
LNOPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $# -gt &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
	LNOPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-f&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
	echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Unrecognized option &amp;#39;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# This appears to be the &amp;#34;best&amp;#34; way to get the canonicalized path to where this&lt;/span&gt; 
&lt;span style=&#34;color:#75715e&#34;&gt;# script is located, which is, presumably, where all of my dotfiles are.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Lifted from http://stackoverflow.com/a/4774063&lt;/span&gt;
pushd &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;dirname $0&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &amp;gt; /dev/null
SCRIPTPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
popd &amp;gt; /dev/null

pushd ~ &amp;gt; /dev/null
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dotfile in &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;find /Users/airborne/dotfiles -type f -iname &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.*&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;echo -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Linking &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dotfile##*/&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;... &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	ln -s $LNOPTS &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$dotfile&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dotfile##*/&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $? -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
popd &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All it does is scan the directory it lives in for files starting with a period
(it skips directories right now because I don&#39;t store any in my dotfiles repo
except for the &lt;code&gt;.git&lt;/code&gt; repository metadata directory itself, which should not
be linked to from elsewhere) and creates symbolic links to them from the
running user&#39;s home directory.&lt;/p&gt;
&lt;p&gt;In short, a file like &lt;code&gt;.bashrc&lt;/code&gt; stored alongside &lt;code&gt;linkall&lt;/code&gt; gets a symlink
created called &lt;code&gt;~/.bashrc&lt;/code&gt;. Additionally, to be safe, it will not overwrite
existing files or symlinks and will instead print &amp;ldquo;Failed&amp;rdquo; for that file. If
you are sure you want to wipe them out and replace them, just pass &lt;code&gt;-f&lt;/code&gt; to the
script.&lt;/p&gt;
&lt;p&gt;{% infobox %}
There is only a small amount of bash-fu in this one; feel free to drop me a
comment below if you&#39;d like me to explain how any of this actually works.
{% endinfobox %}&lt;/p&gt;
&lt;p&gt;How cool is that? So now, on a new system, and assuming that git is installed,
setting up all of my preferences is as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone git@github.com:aaronbieber/dotfiles
$ dotfiles/linkall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, when I want to make changes to my &lt;code&gt;.tmux.conf&lt;/code&gt;, for example, I don&#39;t have
to remember to copy anything. &lt;code&gt;vim ~/.tmux.conf&lt;/code&gt; will edit the file in the
repository so that I can later push it up and receive those changes on my
other machines.&lt;/p&gt;
&lt;p&gt;How cool is that?&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>as promised vim musings</title>
       <link>http://example.org/post/as-promised-vim-musings/</link>
       <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/as-promised-vim-musings/</guid>
       <description>&lt;p&gt;I love Vim, I really do. Having used Vim for about 12 years or so, I feel
really comfortable with it. Remarkably, I keep learning new things about it,
but it’s easy to get sucked down the rabbit hole. I’ve written a couple of my
own plug-ins (most notably my &lt;a href=&#34;http://quicktask.aaronbieber.com&#34;&gt;Quicktask&lt;/a&gt; task management tool) and I’ve
customized the thing to death.&lt;/p&gt;
&lt;p&gt;It’s easy to get carried away, though, especially as a beginner. I ran across
this article by Alex Young today, which I completely agree with. Check it out:
&lt;a href=&#34;https://medium.com/usevim/stop-the-vim-configuration-madness-c825578bbf3e&#34;&gt;Stop the Vim Configuration Madness&lt;/a&gt;. Alex points out that newcomers to Vim
are drawn in by its extensive capacity to be customized and overlook the
process of building up muscle memory for the myriad of movement commands and
Vim grammar that make it so awesome.&lt;/p&gt;
&lt;p&gt;In a similar vein, Ian Langworth looks back on 11 years with Vim and points
out some of his favorite configuration tricks and plug-ins in his article
&lt;a href=&#34;http://statico.github.com/vim.html&#34;&gt;Vim After 11 Years&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In conclusion: &lt;a href=&#34;http://www.tylercipriani.com/vim.html&#34;&gt;Vim. Live it.&lt;/a&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>oh did you want to see your changes in sinatra</title>
       <link>http://example.org/post/2013/01/31/oh-did-you-want-to-see-your-changes-in-sinatra/</link>
       <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/01/31/oh-did-you-want-to-see-your-changes-in-sinatra/</guid>
       <description>&lt;p&gt;I started fiddling with the neat, lightweight Ruby web application framework
“Sinatra” the other day. It seemed like a nice alternative to Rails and since
I had also been playing with Slim for PHP, I wanted to see what it was like on
the Ruby side of the fence.&lt;/p&gt;
&lt;p&gt;I got the whole thing set up in Vagrant after no small amount of fiddling with
Chef. I wanted to run it under Unicorn with Nginx in front, as is recommended
by many for production deploys. After getting it all lined up, the app finally
ran! Awesome, time to do some development!&lt;/p&gt;
&lt;p&gt;So I started editing my index controller, saved, reloaded the browser. No
change. Ugh. Caching, maybe?&lt;/p&gt;
&lt;p&gt;To make a long story short, there isn’t enough information about this, and
it’s even harder when you don’t know who’s causing the problem. I tried
cutting out Unicorn and connected Nginx up to WEBrick directly… No love.&lt;/p&gt;
&lt;p&gt;Some searches turned up this thing about the “sendfile” setting in Nginx
having real problems with VirtualBox, so I tried turning that off. Nope. Still
no refresh.&lt;/p&gt;
&lt;p&gt;Finally, I found &lt;a href=&#34;http://stackoverflow.com/questions/1247125/how-to-get-sinatra-to-auto-reload-the-file-after-each-change&#34;&gt;this article&lt;/a&gt; on Stack Overflow. Sinatra doesn’t reload
files for each request because… Wait for it… It was “too complicated” to do.
So developers just have to, what, restart their app after each change? I
personally think that this decision is kind of dumb.&lt;/p&gt;
&lt;p&gt;Anyway, install the “sinatra-reload” gem in your app and everything is gold.
As one commenter suggested, you should probably check the environment and load
it only in development, but do what you want.&lt;/p&gt;
&lt;p&gt;I hope that all of the words in this post help it to find its way to other
suffering souls on Google because I was just about to “vagrant destroy” for
the last time.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>rediscovering the linux desktop</title>
       <link>http://example.org/post/2012/12/13/rediscovering-the-linux-desktop/</link>
       <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2012/12/13/rediscovering-the-linux-desktop/</guid>
       <description>&lt;p&gt;Here at the day job, we are slowly moving our (production) systems away from
Windows and toward (Ubuntu LTS) Linux. The company has always been
Windows-oriented, mostly due to the decisions of its President when it was
founded, subsequent inertia, and the skillsets of the infrastructure teams.
Now, though, we have an increased Linux knowledgebase in-house, we’ve started
this reorientation toward PHP and other open-source products, and Linux just
makes more sense.&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;To help “grease the wheels” in the development process, we started toying with
Vagrant and Chef to spin up local development instances, which has been a
really interesting and satisfying endeavor. This whole Vagrant/VirtualBox
thing is opening up new ideas about how to develop efficiently and about the
malleability of server configurations that we’d never have considered up till
now.&lt;/p&gt;
&lt;p&gt;I even started to use Vagrant myself, for freelance projects, which I found to
be gratifying. Gone are the days of guarding your VMware image with a
pitchfork against the specter of data loss or corruption; with only your
Vagrantfile in hand (and at least knowing which base image you used, which is
important only to a point), you can spin up a replica of the system in
moments.&lt;/p&gt;
&lt;p&gt;But this isn’t meant to be a 500-word essay on how great Vagrant is. Dipping
back into the Linux world made me yearn for some of the things that Windows
(no offense to Cygwin) just can’t do. For example, I really love tmux, the
terminal multiplexer. I have finally left GNU screen behind on my Mac, but
alas, tmux doesn’t run in Cygwin because of the way the signals are passed
through pipes or sockets or something that Cygwin can’t do.&lt;/p&gt;
&lt;p&gt;This is a shame, because tmux increases my productivity, and I want my
productivity to increase. So what to do? The obvious answer (to me, anyway)
was to dust off this copy of VMware Workstation that they got for me and just
run Ubuntu as an actual desktop. With a GUI. Give it the old college try once
again. So I did that.&lt;/p&gt;
&lt;p&gt;After running a large terminal window with tmux in it and feeling the joy of
Firefox and Google Chrome acting, essentially, identically to how they do in
Windows, and apt-getting basically the whole world at once, a thought came to
me.&lt;/p&gt;
&lt;p&gt;Window managers. Remember window managers?&lt;/p&gt;
&lt;p&gt;If you’re reading this in Linux, the chances are pretty high that you fall
into one of two groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You’re using Gnome or KDE as your default window manager because it was
installed with your distribution (like Ubuntu), or&lt;/li&gt;
&lt;li&gt;You’re using your own window manager because hot damn there are so many to
choose from.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What the hell is a window manager, you might be asking, if you are a member of
the former group? A window manager is a piece of software that manages your
windows; their locations, sizes, behaviors, and so forth. Every GUI OS has
some kind of a window manager, but it so happens that in Linux (as with most
things in Linux), the window manager is not actually inextricably tied to the
desktop or the launcher bar (“taskbar,” if you will), or any other aspect of
the GUI experience.&lt;/p&gt;
&lt;p&gt;Everything is separated out. Separation of responsibility. Like a good,
organized OS should be.&lt;/p&gt;
&lt;p&gt;So, which window manager to choose? I decided to give xmonad a try. Xmonad is
a window manager written in Haskell that tiles your windows automatically.
Windows can’t float (unless you force them to), and they self-organize using
predefined patterns, which you can change. You also get virtual desktops as
well, so you can have several screens of tiled windows and switch between them
quickly.&lt;/p&gt;
&lt;p&gt;So far, this is the best computing experience I’ve probably ever had.
Everything is at my fingertips; I barely use the mouse. Xmonad is so fast,
even in this virtual machine running inside of my Windows 7 desktop. I
borrowed some configuration from folks on the Googlewebs to get things pointed
in the right direction, but it was really not too hard to set up.&lt;/p&gt;
&lt;p&gt;Here are some references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vicfryzel.com/2010/06/27/obtaining-a-beautiful-usable-xmonad-configuration&#34;&gt;Obtaining a beautiful, usable xmonad configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.huntlycameron.co.uk/2010/11/how-to-set-up-xmonad-xmobar-ubuntu/&#34;&gt;How-to: Set up XMonad &amp;amp; XMobar on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I lifted most of the config from those guys and followed their instructions.&lt;/p&gt;
&lt;p&gt;I also wanted to do more in terminal windows, because terminals are badass,
and when you’re doing everything with the keyboard you really don’t want to
fiddle with GUI widgets (except for web browsing, and for that there’s Chrome
Vimium, of course).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For the tweeting: TTYtter (so cool!)&lt;/li&gt;
&lt;li&gt;For Gtalk: IRSSI &amp;amp; the irssi-xmpp plugin (the most stable console XMPP
client I have tried!)&lt;/li&gt;
&lt;li&gt;For music: cmus (really nice once you figure out how it works. RTFM.)&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
   
     <item>
       <title>run your own private shared git repository</title>
       <link>http://example.org/post/2013/01/14/run-your-own-private-shared-git-repository/</link>
       <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/2013/01/14/run-your-own-private-shared-git-repository/</guid>
       <description>&lt;p&gt;So everyone uses Github now, and that’s cool, because Github is awesome. But
what if Github goes down, even just for a short time, and you’re sitting there
trying to get your stuff deployed or whatever? You’re basically screwed.
Though Github is a fantastically stable service, it does have the occasional
availability hiccup and the only real solution to that problem is
&lt;em&gt;redundancy&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So what’s a guy (or gal) to do? Run your own private git repository somewhere
else!&lt;del&gt;MORE&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Push your changes to Github and to your own repository and you’ll never be
without a version-controlled source. You may know that git itself is able to
operate over several protocols:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP(S)&lt;/li&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The HTTP and SSH protocols are obvious and they give you exactly the
capabilities that you would expect. But who wants to have to type in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git push ssh://username@domain.com:/var/git/repos/myrepo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s silly. On top of that, you want to have centralized access to
repositories across a few users rather than spread all around on the remote
system. In short, you want what Github provides. You want this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git push git@github.com:username/repository.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, you can have it, and I’m going to tell you how.&lt;/p&gt;
&lt;p&gt;The trick is to use &lt;code&gt;git-shell&lt;/code&gt; and the so-called “git protocol.” In reality,
the git protocol wraps around SSH and SCP; it transfers the actual data to the
remote system through an SSH tunnel and doesn’t require running any additional
daemons or servers on the remote host. It does require that git is installed
on the remote host, of course, so do that first.&lt;/p&gt;
&lt;p&gt;When you use a URL like &lt;a href=&#34;mailto:%60git@github.com&#34;&gt;`git@github.com&lt;/a&gt;:this/is/a/path.git`, it actually logs
into the remote host via SSH using the username “git” and makes changes to the
repository found at “this/is/a/path.git”, which will most likely reside in the
“git” user’s home directory. I did a very simple setup, so that directory is
actually “/home/git”.&lt;/p&gt;
&lt;p&gt;To make all of this work, you need the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A “git” user and group on the remote host.&lt;/li&gt;
&lt;li&gt;The git user’s home directory contains a directory called
“git-shell-commands,” which is empty.&lt;/li&gt;
&lt;li&gt;The git user’s shell is set to &lt;code&gt;/usr/bin/git-shell&lt;/code&gt; (or wherever it is on
your system; try &lt;code&gt;which git-shell&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Your own public key on your local system is appended to
&lt;code&gt;/home/git/.ssh/authorized_keys2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To see it work, you will first need to create a bare repository on the remote
system into which you will push some changesets. To create it, simply do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cd /home/git
$ mkdir -p username/new-repository.git
$ cd username/new-repository.git
$ git init --bare
$ sudo chown -R git:git /home/git/username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All of this is assuming that your username is &lt;code&gt;username&lt;/code&gt;, which I’m using here
just as a way to separate one user’s repositories from another in the way that
Github does. You don’t need to do this; you could place each repository
directly into git’s home directory if you wanted to.&lt;/p&gt;
&lt;p&gt;The important part is &lt;code&gt;git init --bare&lt;/code&gt;, which creates an empty git repository
without placing it into a &lt;code&gt;.git&lt;/code&gt; folder; it simply dumps all of the repository
metadata files right into the named path (or your current directory if no path
is specified, as above). Now it is ready to receive data!&lt;/p&gt;
&lt;p&gt;To push to it, just use the same familiar syntax you would use with Github. I
like to add actual remotes by name because it makes it easier later on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git remote add my-server git@mydomain.com:username/new-repository.git
$ git push --all my-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You probably wouldn’t use the &lt;code&gt;--all&lt;/code&gt; switch every time, but that tells git to
push all refs and heads, not just the one(s) named. You could also just do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git push my-server master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To push only the master head out to your new server. If you have an SSH agent
available already, it should start pushing those files out with no trouble. If
not, you may be prompted to enter your private key passphrase.&lt;/p&gt;
&lt;p&gt;Was this helpful? Let me know.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>welcome to my chronicle</title>
       <link>http://example.org/post/welcome-to-my-chronicle/</link>
       <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
       
       <guid>http://example.org/post/welcome-to-my-chronicle/</guid>
       <description>&lt;p&gt;I’ll try to keep this brief. Five years ago, I left my job as a production PHP
programmer at a national consulting firm (business consulting, not development
consulting) to take a job writing ColdFusion at a startup on the other side of
the state.&lt;/p&gt;
&lt;p&gt;Since then, I have learned the ins and outs of an arcane version of ColdFusion
while using more modern languages, such as Ruby and Python, only in my spare
time. Finally, after all these years, the business sees fit to undertake a
rewrite and to leave ColdFusion behind. After much deliberation, PHP was
chosen.&lt;/p&gt;
&lt;p&gt;Let us keep the snickers to a minimum; PHP is still the language with the
broadest adoption and is therefore among the easiest to hire for. As it turns
out, a lot has changed in PHP since I left my previous position.&lt;/p&gt;
&lt;p&gt;This blog will be a chronicle of my discoveries, solutions to odd problems,
and probably also an outpouring of affection for Vim, my favorite editor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; __construct() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;try_to_enjoy_yourselves&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I may also talk about bash scripting, because bash is cool. Here’s a freebie.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ll&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    ls -G -lho &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
 </channel>
</rss>
